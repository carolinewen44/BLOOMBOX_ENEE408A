
BloomBox_STM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b754  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000328  0800b8e8  0800b8e8  0001b8e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bc10  0800bc10  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800bc10  0800bc10  0001bc10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bc18  0800bc18  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bc18  0800bc18  0001bc18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bc1c  0800bc1c  0001bc1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800bc20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001918  20000078  0800bc98  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001990  0800bc98  00021990  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f44c  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000361d  00000000  00000000  0003f4f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001808  00000000  00000000  00042b18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016c0  00000000  00000000  00044320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b187  00000000  00000000  000459e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bc57  00000000  00000000  00070b67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010b419  00000000  00000000  0008c7be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00197bd7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000072bc  00000000  00000000  00197c2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b8cc 	.word	0x0800b8cc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	0800b8cc 	.word	0x0800b8cc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2iz>:
 8000b1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b24:	d215      	bcs.n	8000b52 <__aeabi_d2iz+0x36>
 8000b26:	d511      	bpl.n	8000b4c <__aeabi_d2iz+0x30>
 8000b28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b30:	d912      	bls.n	8000b58 <__aeabi_d2iz+0x3c>
 8000b32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b42:	fa23 f002 	lsr.w	r0, r3, r2
 8000b46:	bf18      	it	ne
 8000b48:	4240      	negne	r0, r0
 8000b4a:	4770      	bx	lr
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b56:	d105      	bne.n	8000b64 <__aeabi_d2iz+0x48>
 8000b58:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	bf08      	it	eq
 8000b5e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b62:	4770      	bx	lr
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2uiz>:
 8000b6c:	004a      	lsls	r2, r1, #1
 8000b6e:	d211      	bcs.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b74:	d211      	bcs.n	8000b9a <__aeabi_d2uiz+0x2e>
 8000b76:	d50d      	bpl.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d40e      	bmi.n	8000ba0 <__aeabi_d2uiz+0x34>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	4770      	bx	lr
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9e:	d102      	bne.n	8000ba6 <__aeabi_d2uiz+0x3a>
 8000ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba4:	4770      	bx	lr
 8000ba6:	f04f 0000 	mov.w	r0, #0
 8000baa:	4770      	bx	lr

08000bac <__aeabi_d2f>:
 8000bac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bb0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb4:	bf24      	itt	cs
 8000bb6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bba:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bbe:	d90d      	bls.n	8000bdc <__aeabi_d2f+0x30>
 8000bc0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bcc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bd0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd4:	bf08      	it	eq
 8000bd6:	f020 0001 	biceq.w	r0, r0, #1
 8000bda:	4770      	bx	lr
 8000bdc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000be0:	d121      	bne.n	8000c26 <__aeabi_d2f+0x7a>
 8000be2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be6:	bfbc      	itt	lt
 8000be8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	4770      	bxlt	lr
 8000bee:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bf2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf6:	f1c2 0218 	rsb	r2, r2, #24
 8000bfa:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c02:	fa20 f002 	lsr.w	r0, r0, r2
 8000c06:	bf18      	it	ne
 8000c08:	f040 0001 	orrne.w	r0, r0, #1
 8000c0c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c10:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c14:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c18:	ea40 000c 	orr.w	r0, r0, ip
 8000c1c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c20:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c24:	e7cc      	b.n	8000bc0 <__aeabi_d2f+0x14>
 8000c26:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c2a:	d107      	bne.n	8000c3c <__aeabi_d2f+0x90>
 8000c2c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c30:	bf1e      	ittt	ne
 8000c32:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c36:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c3a:	4770      	bxne	lr
 8000c3c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c40:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c44:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop

08000c4c <__aeabi_uldivmod>:
 8000c4c:	b953      	cbnz	r3, 8000c64 <__aeabi_uldivmod+0x18>
 8000c4e:	b94a      	cbnz	r2, 8000c64 <__aeabi_uldivmod+0x18>
 8000c50:	2900      	cmp	r1, #0
 8000c52:	bf08      	it	eq
 8000c54:	2800      	cmpeq	r0, #0
 8000c56:	bf1c      	itt	ne
 8000c58:	f04f 31ff 	movne.w	r1, #4294967295
 8000c5c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c60:	f000 b96e 	b.w	8000f40 <__aeabi_idiv0>
 8000c64:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c68:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c6c:	f000 f806 	bl	8000c7c <__udivmoddi4>
 8000c70:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c78:	b004      	add	sp, #16
 8000c7a:	4770      	bx	lr

08000c7c <__udivmoddi4>:
 8000c7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c80:	9d08      	ldr	r5, [sp, #32]
 8000c82:	4604      	mov	r4, r0
 8000c84:	468c      	mov	ip, r1
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	f040 8083 	bne.w	8000d92 <__udivmoddi4+0x116>
 8000c8c:	428a      	cmp	r2, r1
 8000c8e:	4617      	mov	r7, r2
 8000c90:	d947      	bls.n	8000d22 <__udivmoddi4+0xa6>
 8000c92:	fab2 f282 	clz	r2, r2
 8000c96:	b142      	cbz	r2, 8000caa <__udivmoddi4+0x2e>
 8000c98:	f1c2 0020 	rsb	r0, r2, #32
 8000c9c:	fa24 f000 	lsr.w	r0, r4, r0
 8000ca0:	4091      	lsls	r1, r2
 8000ca2:	4097      	lsls	r7, r2
 8000ca4:	ea40 0c01 	orr.w	ip, r0, r1
 8000ca8:	4094      	lsls	r4, r2
 8000caa:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cae:	0c23      	lsrs	r3, r4, #16
 8000cb0:	fbbc f6f8 	udiv	r6, ip, r8
 8000cb4:	fa1f fe87 	uxth.w	lr, r7
 8000cb8:	fb08 c116 	mls	r1, r8, r6, ip
 8000cbc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cc0:	fb06 f10e 	mul.w	r1, r6, lr
 8000cc4:	4299      	cmp	r1, r3
 8000cc6:	d909      	bls.n	8000cdc <__udivmoddi4+0x60>
 8000cc8:	18fb      	adds	r3, r7, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cce:	f080 8119 	bcs.w	8000f04 <__udivmoddi4+0x288>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 8116 	bls.w	8000f04 <__udivmoddi4+0x288>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	443b      	add	r3, r7
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cf0:	45a6      	cmp	lr, r4
 8000cf2:	d909      	bls.n	8000d08 <__udivmoddi4+0x8c>
 8000cf4:	193c      	adds	r4, r7, r4
 8000cf6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfa:	f080 8105 	bcs.w	8000f08 <__udivmoddi4+0x28c>
 8000cfe:	45a6      	cmp	lr, r4
 8000d00:	f240 8102 	bls.w	8000f08 <__udivmoddi4+0x28c>
 8000d04:	3802      	subs	r0, #2
 8000d06:	443c      	add	r4, r7
 8000d08:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0c:	eba4 040e 	sub.w	r4, r4, lr
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa0>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	b902      	cbnz	r2, 8000d26 <__udivmoddi4+0xaa>
 8000d24:	deff      	udf	#255	; 0xff
 8000d26:	fab2 f282 	clz	r2, r2
 8000d2a:	2a00      	cmp	r2, #0
 8000d2c:	d150      	bne.n	8000dd0 <__udivmoddi4+0x154>
 8000d2e:	1bcb      	subs	r3, r1, r7
 8000d30:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d34:	fa1f f887 	uxth.w	r8, r7
 8000d38:	2601      	movs	r6, #1
 8000d3a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d3e:	0c21      	lsrs	r1, r4, #16
 8000d40:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d48:	fb08 f30c 	mul.w	r3, r8, ip
 8000d4c:	428b      	cmp	r3, r1
 8000d4e:	d907      	bls.n	8000d60 <__udivmoddi4+0xe4>
 8000d50:	1879      	adds	r1, r7, r1
 8000d52:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d56:	d202      	bcs.n	8000d5e <__udivmoddi4+0xe2>
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	f200 80e9 	bhi.w	8000f30 <__udivmoddi4+0x2b4>
 8000d5e:	4684      	mov	ip, r0
 8000d60:	1ac9      	subs	r1, r1, r3
 8000d62:	b2a3      	uxth	r3, r4
 8000d64:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d68:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d6c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d70:	fb08 f800 	mul.w	r8, r8, r0
 8000d74:	45a0      	cmp	r8, r4
 8000d76:	d907      	bls.n	8000d88 <__udivmoddi4+0x10c>
 8000d78:	193c      	adds	r4, r7, r4
 8000d7a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d7e:	d202      	bcs.n	8000d86 <__udivmoddi4+0x10a>
 8000d80:	45a0      	cmp	r8, r4
 8000d82:	f200 80d9 	bhi.w	8000f38 <__udivmoddi4+0x2bc>
 8000d86:	4618      	mov	r0, r3
 8000d88:	eba4 0408 	sub.w	r4, r4, r8
 8000d8c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d90:	e7bf      	b.n	8000d12 <__udivmoddi4+0x96>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d909      	bls.n	8000daa <__udivmoddi4+0x12e>
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	f000 80b1 	beq.w	8000efe <__udivmoddi4+0x282>
 8000d9c:	2600      	movs	r6, #0
 8000d9e:	e9c5 0100 	strd	r0, r1, [r5]
 8000da2:	4630      	mov	r0, r6
 8000da4:	4631      	mov	r1, r6
 8000da6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000daa:	fab3 f683 	clz	r6, r3
 8000dae:	2e00      	cmp	r6, #0
 8000db0:	d14a      	bne.n	8000e48 <__udivmoddi4+0x1cc>
 8000db2:	428b      	cmp	r3, r1
 8000db4:	d302      	bcc.n	8000dbc <__udivmoddi4+0x140>
 8000db6:	4282      	cmp	r2, r0
 8000db8:	f200 80b8 	bhi.w	8000f2c <__udivmoddi4+0x2b0>
 8000dbc:	1a84      	subs	r4, r0, r2
 8000dbe:	eb61 0103 	sbc.w	r1, r1, r3
 8000dc2:	2001      	movs	r0, #1
 8000dc4:	468c      	mov	ip, r1
 8000dc6:	2d00      	cmp	r5, #0
 8000dc8:	d0a8      	beq.n	8000d1c <__udivmoddi4+0xa0>
 8000dca:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dce:	e7a5      	b.n	8000d1c <__udivmoddi4+0xa0>
 8000dd0:	f1c2 0320 	rsb	r3, r2, #32
 8000dd4:	fa20 f603 	lsr.w	r6, r0, r3
 8000dd8:	4097      	lsls	r7, r2
 8000dda:	fa01 f002 	lsl.w	r0, r1, r2
 8000dde:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000de2:	40d9      	lsrs	r1, r3
 8000de4:	4330      	orrs	r0, r6
 8000de6:	0c03      	lsrs	r3, r0, #16
 8000de8:	fbb1 f6fe 	udiv	r6, r1, lr
 8000dec:	fa1f f887 	uxth.w	r8, r7
 8000df0:	fb0e 1116 	mls	r1, lr, r6, r1
 8000df4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df8:	fb06 f108 	mul.w	r1, r6, r8
 8000dfc:	4299      	cmp	r1, r3
 8000dfe:	fa04 f402 	lsl.w	r4, r4, r2
 8000e02:	d909      	bls.n	8000e18 <__udivmoddi4+0x19c>
 8000e04:	18fb      	adds	r3, r7, r3
 8000e06:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e0a:	f080 808d 	bcs.w	8000f28 <__udivmoddi4+0x2ac>
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	f240 808a 	bls.w	8000f28 <__udivmoddi4+0x2ac>
 8000e14:	3e02      	subs	r6, #2
 8000e16:	443b      	add	r3, r7
 8000e18:	1a5b      	subs	r3, r3, r1
 8000e1a:	b281      	uxth	r1, r0
 8000e1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e28:	fb00 f308 	mul.w	r3, r0, r8
 8000e2c:	428b      	cmp	r3, r1
 8000e2e:	d907      	bls.n	8000e40 <__udivmoddi4+0x1c4>
 8000e30:	1879      	adds	r1, r7, r1
 8000e32:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e36:	d273      	bcs.n	8000f20 <__udivmoddi4+0x2a4>
 8000e38:	428b      	cmp	r3, r1
 8000e3a:	d971      	bls.n	8000f20 <__udivmoddi4+0x2a4>
 8000e3c:	3802      	subs	r0, #2
 8000e3e:	4439      	add	r1, r7
 8000e40:	1acb      	subs	r3, r1, r3
 8000e42:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e46:	e778      	b.n	8000d3a <__udivmoddi4+0xbe>
 8000e48:	f1c6 0c20 	rsb	ip, r6, #32
 8000e4c:	fa03 f406 	lsl.w	r4, r3, r6
 8000e50:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e54:	431c      	orrs	r4, r3
 8000e56:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e5a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e5e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e62:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e66:	431f      	orrs	r7, r3
 8000e68:	0c3b      	lsrs	r3, r7, #16
 8000e6a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e6e:	fa1f f884 	uxth.w	r8, r4
 8000e72:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e76:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e7a:	fb09 fa08 	mul.w	sl, r9, r8
 8000e7e:	458a      	cmp	sl, r1
 8000e80:	fa02 f206 	lsl.w	r2, r2, r6
 8000e84:	fa00 f306 	lsl.w	r3, r0, r6
 8000e88:	d908      	bls.n	8000e9c <__udivmoddi4+0x220>
 8000e8a:	1861      	adds	r1, r4, r1
 8000e8c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e90:	d248      	bcs.n	8000f24 <__udivmoddi4+0x2a8>
 8000e92:	458a      	cmp	sl, r1
 8000e94:	d946      	bls.n	8000f24 <__udivmoddi4+0x2a8>
 8000e96:	f1a9 0902 	sub.w	r9, r9, #2
 8000e9a:	4421      	add	r1, r4
 8000e9c:	eba1 010a 	sub.w	r1, r1, sl
 8000ea0:	b2bf      	uxth	r7, r7
 8000ea2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ea6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000eaa:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eae:	fb00 f808 	mul.w	r8, r0, r8
 8000eb2:	45b8      	cmp	r8, r7
 8000eb4:	d907      	bls.n	8000ec6 <__udivmoddi4+0x24a>
 8000eb6:	19e7      	adds	r7, r4, r7
 8000eb8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ebc:	d22e      	bcs.n	8000f1c <__udivmoddi4+0x2a0>
 8000ebe:	45b8      	cmp	r8, r7
 8000ec0:	d92c      	bls.n	8000f1c <__udivmoddi4+0x2a0>
 8000ec2:	3802      	subs	r0, #2
 8000ec4:	4427      	add	r7, r4
 8000ec6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000eca:	eba7 0708 	sub.w	r7, r7, r8
 8000ece:	fba0 8902 	umull	r8, r9, r0, r2
 8000ed2:	454f      	cmp	r7, r9
 8000ed4:	46c6      	mov	lr, r8
 8000ed6:	4649      	mov	r1, r9
 8000ed8:	d31a      	bcc.n	8000f10 <__udivmoddi4+0x294>
 8000eda:	d017      	beq.n	8000f0c <__udivmoddi4+0x290>
 8000edc:	b15d      	cbz	r5, 8000ef6 <__udivmoddi4+0x27a>
 8000ede:	ebb3 020e 	subs.w	r2, r3, lr
 8000ee2:	eb67 0701 	sbc.w	r7, r7, r1
 8000ee6:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000eea:	40f2      	lsrs	r2, r6
 8000eec:	ea4c 0202 	orr.w	r2, ip, r2
 8000ef0:	40f7      	lsrs	r7, r6
 8000ef2:	e9c5 2700 	strd	r2, r7, [r5]
 8000ef6:	2600      	movs	r6, #0
 8000ef8:	4631      	mov	r1, r6
 8000efa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000efe:	462e      	mov	r6, r5
 8000f00:	4628      	mov	r0, r5
 8000f02:	e70b      	b.n	8000d1c <__udivmoddi4+0xa0>
 8000f04:	4606      	mov	r6, r0
 8000f06:	e6e9      	b.n	8000cdc <__udivmoddi4+0x60>
 8000f08:	4618      	mov	r0, r3
 8000f0a:	e6fd      	b.n	8000d08 <__udivmoddi4+0x8c>
 8000f0c:	4543      	cmp	r3, r8
 8000f0e:	d2e5      	bcs.n	8000edc <__udivmoddi4+0x260>
 8000f10:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f14:	eb69 0104 	sbc.w	r1, r9, r4
 8000f18:	3801      	subs	r0, #1
 8000f1a:	e7df      	b.n	8000edc <__udivmoddi4+0x260>
 8000f1c:	4608      	mov	r0, r1
 8000f1e:	e7d2      	b.n	8000ec6 <__udivmoddi4+0x24a>
 8000f20:	4660      	mov	r0, ip
 8000f22:	e78d      	b.n	8000e40 <__udivmoddi4+0x1c4>
 8000f24:	4681      	mov	r9, r0
 8000f26:	e7b9      	b.n	8000e9c <__udivmoddi4+0x220>
 8000f28:	4666      	mov	r6, ip
 8000f2a:	e775      	b.n	8000e18 <__udivmoddi4+0x19c>
 8000f2c:	4630      	mov	r0, r6
 8000f2e:	e74a      	b.n	8000dc6 <__udivmoddi4+0x14a>
 8000f30:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f34:	4439      	add	r1, r7
 8000f36:	e713      	b.n	8000d60 <__udivmoddi4+0xe4>
 8000f38:	3802      	subs	r0, #2
 8000f3a:	443c      	add	r4, r7
 8000f3c:	e724      	b.n	8000d88 <__udivmoddi4+0x10c>
 8000f3e:	bf00      	nop

08000f40 <__aeabi_idiv0>:
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop

08000f44 <DEV_Delay_ms>:

/**
 * delay x ms
**/
void DEV_Delay_ms(UDOUBLE xms)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
	HAL_Delay(xms);
 8000f4c:	6878      	ldr	r0, [r7, #4]
 8000f4e:	f001 fcab 	bl	80028a8 <HAL_Delay>
}
 8000f52:	bf00      	nop
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}

08000f5a <GPIO_Config>:


void GPIO_Config(void)
{
 8000f5a:	b480      	push	{r7}
 8000f5c:	af00      	add	r7, sp, #0
    //DEV_GPIO_Mode(INT_PIN, 0);
}
 8000f5e:	bf00      	nop
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr

08000f68 <DEV_I2C_Init>:
function:	I2C Function initialization and transfer
parameter:
Info:
******************************************************************************/
void DEV_I2C_Init(uint8_t Add)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	4603      	mov	r3, r0
 8000f70:	71fb      	strb	r3, [r7, #7]
#if DEV_I2C
	DEV_I2C_Device = 1;
 8000f72:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <DEV_I2C_Init+0x24>)
 8000f74:	2201      	movs	r2, #1
 8000f76:	701a      	strb	r2, [r3, #0]
	I2C_ADDR =  Add;
 8000f78:	4a05      	ldr	r2, [pc, #20]	; (8000f90 <DEV_I2C_Init+0x28>)
 8000f7a:	79fb      	ldrb	r3, [r7, #7]
 8000f7c:	7013      	strb	r3, [r2, #0]
#endif
}
 8000f7e:	bf00      	nop
 8000f80:	370c      	adds	r7, #12
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	20000094 	.word	0x20000094
 8000f90:	200000d4 	.word	0x200000d4

08000f94 <I2C_Write_Byte>:

void I2C_Write_Byte(uint8_t Cmd, uint8_t value)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b088      	sub	sp, #32
 8000f98:	af04      	add	r7, sp, #16
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	460a      	mov	r2, r1
 8000f9e:	71fb      	strb	r3, [r7, #7]
 8000fa0:	4613      	mov	r3, r2
 8000fa2:	71bb      	strb	r3, [r7, #6]
#if DEV_I2C
	UBYTE Buf[1] = {0};
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	733b      	strb	r3, [r7, #12]
	Buf[0] = value;
 8000fa8:	79bb      	ldrb	r3, [r7, #6]
 8000faa:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Mem_Write(&hi2c1, I2C_ADDR, Cmd, I2C_MEMADD_SIZE_8BIT, Buf, 1, 0x20);
 8000fac:	4b09      	ldr	r3, [pc, #36]	; (8000fd4 <I2C_Write_Byte+0x40>)
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	b299      	uxth	r1, r3
 8000fb2:	79fb      	ldrb	r3, [r7, #7]
 8000fb4:	b29a      	uxth	r2, r3
 8000fb6:	2320      	movs	r3, #32
 8000fb8:	9302      	str	r3, [sp, #8]
 8000fba:	2301      	movs	r3, #1
 8000fbc:	9301      	str	r3, [sp, #4]
 8000fbe:	f107 030c 	add.w	r3, r7, #12
 8000fc2:	9300      	str	r3, [sp, #0]
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	4804      	ldr	r0, [pc, #16]	; (8000fd8 <I2C_Write_Byte+0x44>)
 8000fc8:	f003 fc86 	bl	80048d8 <HAL_I2C_Mem_Write>
#endif
}
 8000fcc:	bf00      	nop
 8000fce:	3710      	adds	r7, #16
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	200000d4 	.word	0x200000d4
 8000fd8:	200002b4 	.word	0x200002b4

08000fdc <I2C_Read_Byte>:

int I2C_Read_Byte(uint8_t Cmd)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b088      	sub	sp, #32
 8000fe0:	af04      	add	r7, sp, #16
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	71fb      	strb	r3, [r7, #7]
#if DEV_I2C
	UBYTE Buf[1]={0};
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Mem_Read(&hi2c1, I2C_ADDR+1, Cmd, I2C_MEMADD_SIZE_8BIT, Buf, 1, 0x20);
 8000fea:	4b0b      	ldr	r3, [pc, #44]	; (8001018 <I2C_Read_Byte+0x3c>)
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	b29b      	uxth	r3, r3
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	b299      	uxth	r1, r3
 8000ff4:	79fb      	ldrb	r3, [r7, #7]
 8000ff6:	b29a      	uxth	r2, r3
 8000ff8:	2320      	movs	r3, #32
 8000ffa:	9302      	str	r3, [sp, #8]
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	9301      	str	r3, [sp, #4]
 8001000:	f107 030c 	add.w	r3, r7, #12
 8001004:	9300      	str	r3, [sp, #0]
 8001006:	2301      	movs	r3, #1
 8001008:	4804      	ldr	r0, [pc, #16]	; (800101c <I2C_Read_Byte+0x40>)
 800100a:	f003 fd79 	bl	8004b00 <HAL_I2C_Mem_Read>
	return Buf[0];
 800100e:	7b3b      	ldrb	r3, [r7, #12]
#endif
}
 8001010:	4618      	mov	r0, r3
 8001012:	3710      	adds	r7, #16
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	200000d4 	.word	0x200000d4
 800101c:	200002b4 	.word	0x200002b4

08001020 <I2C_Read_Word>:

int I2C_Read_Word(uint8_t Cmd)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b088      	sub	sp, #32
 8001024:	af04      	add	r7, sp, #16
 8001026:	4603      	mov	r3, r0
 8001028:	71fb      	strb	r3, [r7, #7]
#if DEV_I2C
	UBYTE Buf[2]={0, 0};
 800102a:	2300      	movs	r3, #0
 800102c:	81bb      	strh	r3, [r7, #12]
	HAL_I2C_Mem_Read(&hi2c1, I2C_ADDR+1, Cmd, I2C_MEMADD_SIZE_8BIT, Buf, 2, 0x20);
 800102e:	4b0d      	ldr	r3, [pc, #52]	; (8001064 <I2C_Read_Word+0x44>)
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	b29b      	uxth	r3, r3
 8001034:	3301      	adds	r3, #1
 8001036:	b299      	uxth	r1, r3
 8001038:	79fb      	ldrb	r3, [r7, #7]
 800103a:	b29a      	uxth	r2, r3
 800103c:	2320      	movs	r3, #32
 800103e:	9302      	str	r3, [sp, #8]
 8001040:	2302      	movs	r3, #2
 8001042:	9301      	str	r3, [sp, #4]
 8001044:	f107 030c 	add.w	r3, r7, #12
 8001048:	9300      	str	r3, [sp, #0]
 800104a:	2301      	movs	r3, #1
 800104c:	4806      	ldr	r0, [pc, #24]	; (8001068 <I2C_Read_Word+0x48>)
 800104e:	f003 fd57 	bl	8004b00 <HAL_I2C_Mem_Read>
	return ((Buf[1] << 8) | (Buf[0] & 0xff));
 8001052:	7b7b      	ldrb	r3, [r7, #13]
 8001054:	021b      	lsls	r3, r3, #8
 8001056:	7b3a      	ldrb	r2, [r7, #12]
 8001058:	4313      	orrs	r3, r2
#endif
}
 800105a:	4618      	mov	r0, r3
 800105c:	3710      	adds	r7, #16
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	200000d4 	.word	0x200000d4
 8001068:	200002b4 	.word	0x200002b4

0800106c <DEV_ModuleInit>:
function:	Module Initialize, the library and initialize the pins, SPI protocol
parameter:
Info:
******************************************************************************/
UBYTE DEV_ModuleInit(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
		GPIO_Config();
 8001070:	f7ff ff73 	bl	8000f5a <GPIO_Config>
    DEV_I2C_Init(0x29<<1);
 8001074:	2052      	movs	r0, #82	; 0x52
 8001076:	f7ff ff77 	bl	8000f68 <DEV_I2C_Init>
    return 0;
 800107a:	2300      	movs	r3, #0
}
 800107c:	4618      	mov	r0, r3
 800107e:	bd80      	pop	{r7, pc}

08001080 <TSL2591_Read_Byte>:
parameter:
            Addr: Register address
Info:
******************************************************************************/
static UBYTE TSL2591_Read_Byte(UBYTE Addr)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	4603      	mov	r3, r0
 8001088:	71fb      	strb	r3, [r7, #7]
    Addr = Addr | COMMAND_BIT;
 800108a:	79fb      	ldrb	r3, [r7, #7]
 800108c:	f063 035f 	orn	r3, r3, #95	; 0x5f
 8001090:	71fb      	strb	r3, [r7, #7]
    return I2C_Read_Byte(Addr);
 8001092:	79fb      	ldrb	r3, [r7, #7]
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff ffa1 	bl	8000fdc <I2C_Read_Byte>
 800109a:	4603      	mov	r3, r0
 800109c:	b2db      	uxtb	r3, r3
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}

080010a6 <TSL2591_Read_Word>:
parameter:
            Addr: Register address
Info:
******************************************************************************/
static UWORD TSL2591_Read_Word(UBYTE Addr)
{
 80010a6:	b580      	push	{r7, lr}
 80010a8:	b082      	sub	sp, #8
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	4603      	mov	r3, r0
 80010ae:	71fb      	strb	r3, [r7, #7]
    Addr = Addr | COMMAND_BIT;
 80010b0:	79fb      	ldrb	r3, [r7, #7]
 80010b2:	f063 035f 	orn	r3, r3, #95	; 0x5f
 80010b6:	71fb      	strb	r3, [r7, #7]
    return I2C_Read_Word(Addr);
 80010b8:	79fb      	ldrb	r3, [r7, #7]
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff ffb0 	bl	8001020 <I2C_Read_Word>
 80010c0:	4603      	mov	r3, r0
 80010c2:	b29b      	uxth	r3, r3
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3708      	adds	r7, #8
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}

080010cc <TSL2591_Write_Byte>:
            Addr: Register address
           Value: Write to the value of the register
Info:
******************************************************************************/
static void TSL2591_Write_Byte(UBYTE Addr, UBYTE Value)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	4603      	mov	r3, r0
 80010d4:	460a      	mov	r2, r1
 80010d6:	71fb      	strb	r3, [r7, #7]
 80010d8:	4613      	mov	r3, r2
 80010da:	71bb      	strb	r3, [r7, #6]
    Addr = Addr | COMMAND_BIT;
 80010dc:	79fb      	ldrb	r3, [r7, #7]
 80010de:	f063 035f 	orn	r3, r3, #95	; 0x5f
 80010e2:	71fb      	strb	r3, [r7, #7]
    I2C_Write_Byte(Addr, Value);
 80010e4:	79ba      	ldrb	r2, [r7, #6]
 80010e6:	79fb      	ldrb	r3, [r7, #7]
 80010e8:	4611      	mov	r1, r2
 80010ea:	4618      	mov	r0, r3
 80010ec:	f7ff ff52 	bl	8000f94 <I2C_Write_Byte>
}
 80010f0:	bf00      	nop
 80010f2:	3708      	adds	r7, #8
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <TSL2591_Enable>:
function:	Enable TSL2591
parameter:
Info:
******************************************************************************/
void TSL2591_Enable(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
    TSL2591_Write_Byte(ENABLE_REGISTER, \
 80010fc:	2193      	movs	r1, #147	; 0x93
 80010fe:	2000      	movs	r0, #0
 8001100:	f7ff ffe4 	bl	80010cc <TSL2591_Write_Byte>
    ENABLE_AIEN | ENABLE_POWERON | ENABLE_AEN | ENABLE_NPIEN);
}
 8001104:	bf00      	nop
 8001106:	bd80      	pop	{r7, pc}

08001108 <TSL2591_Disable>:
function:	Disable TSL2591
parameter:
Info:
******************************************************************************/
void TSL2591_Disable(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
    TSL2591_Write_Byte(ENABLE_REGISTER, \
 800110c:	2100      	movs	r1, #0
 800110e:	2000      	movs	r0, #0
 8001110:	f7ff ffdc 	bl	80010cc <TSL2591_Write_Byte>
    ENABLE_POWEROFF);
}
 8001114:	bf00      	nop
 8001116:	bd80      	pop	{r7, pc}

08001118 <TSL2591_Get_Gain>:
function:	Read TSL2591 gain
parameter:
Info:
******************************************************************************/
UBYTE TSL2591_Get_Gain(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
        MEDIUM_AGAIN        = (0X10)        (25x)
        HIGH_AGAIN          = (0X20)        (428x)
        MAX_AGAIN           = (0x30)        (9876x)
    *************************************************/
    UBYTE data;
    data = TSL2591_Read_Byte(CONTROL_REGISTER);
 800111e:	2001      	movs	r0, #1
 8001120:	f7ff ffae 	bl	8001080 <TSL2591_Read_Byte>
 8001124:	4603      	mov	r3, r0
 8001126:	71fb      	strb	r3, [r7, #7]
    TSL2591_Gain = data & 0x30;
 8001128:	79fb      	ldrb	r3, [r7, #7]
 800112a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800112e:	b2da      	uxtb	r2, r3
 8001130:	4b04      	ldr	r3, [pc, #16]	; (8001144 <TSL2591_Get_Gain+0x2c>)
 8001132:	701a      	strb	r2, [r3, #0]
    return data & 0x30;
 8001134:	79fb      	ldrb	r3, [r7, #7]
 8001136:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800113a:	b2db      	uxtb	r3, r3
}
 800113c:	4618      	mov	r0, r3
 800113e:	3708      	adds	r7, #8
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	200000d6 	.word	0x200000d6

08001148 <TSL2591_Set_Gain>:
function:	Set the TSL2591 gain
parameter:
Info:
******************************************************************************/
void TSL2591_Set_Gain(UBYTE Gain)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	4603      	mov	r3, r0
 8001150:	71fb      	strb	r3, [r7, #7]
    UBYTE control=0;
 8001152:	2300      	movs	r3, #0
 8001154:	73fb      	strb	r3, [r7, #15]
    if(Gain == LOW_AGAIN || Gain == MEDIUM_AGAIN \
 8001156:	79fb      	ldrb	r3, [r7, #7]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d008      	beq.n	800116e <TSL2591_Set_Gain+0x26>
 800115c:	79fb      	ldrb	r3, [r7, #7]
 800115e:	2b10      	cmp	r3, #16
 8001160:	d005      	beq.n	800116e <TSL2591_Set_Gain+0x26>
        || Gain == HIGH_AGAIN || Gain == MAX_AGAIN){
 8001162:	79fb      	ldrb	r3, [r7, #7]
 8001164:	2b20      	cmp	r3, #32
 8001166:	d002      	beq.n	800116e <TSL2591_Set_Gain+0x26>
 8001168:	79fb      	ldrb	r3, [r7, #7]
 800116a:	2b30      	cmp	r3, #48	; 0x30
 800116c:	d115      	bne.n	800119a <TSL2591_Set_Gain+0x52>
            control =  TSL2591_Read_Byte(CONTROL_REGISTER);
 800116e:	2001      	movs	r0, #1
 8001170:	f7ff ff86 	bl	8001080 <TSL2591_Read_Byte>
 8001174:	4603      	mov	r3, r0
 8001176:	73fb      	strb	r3, [r7, #15]
            control &= 0xCf; //0b11001111
 8001178:	7bfb      	ldrb	r3, [r7, #15]
 800117a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800117e:	73fb      	strb	r3, [r7, #15]
            control |= Gain;
 8001180:	7bfa      	ldrb	r2, [r7, #15]
 8001182:	79fb      	ldrb	r3, [r7, #7]
 8001184:	4313      	orrs	r3, r2
 8001186:	73fb      	strb	r3, [r7, #15]
            TSL2591_Write_Byte(CONTROL_REGISTER, control);
 8001188:	7bfb      	ldrb	r3, [r7, #15]
 800118a:	4619      	mov	r1, r3
 800118c:	2001      	movs	r0, #1
 800118e:	f7ff ff9d 	bl	80010cc <TSL2591_Write_Byte>
            TSL2591_Gain = Gain;
 8001192:	4a06      	ldr	r2, [pc, #24]	; (80011ac <TSL2591_Set_Gain+0x64>)
 8001194:	79fb      	ldrb	r3, [r7, #7]
 8001196:	7013      	strb	r3, [r2, #0]
 8001198:	e003      	b.n	80011a2 <TSL2591_Set_Gain+0x5a>
    }else{
        printf("Gain Parameter Error\r\n");
 800119a:	4805      	ldr	r0, [pc, #20]	; (80011b0 <TSL2591_Set_Gain+0x68>)
 800119c:	f008 fbee 	bl	800997c <puts>
    }
}
 80011a0:	bf00      	nop
 80011a2:	bf00      	nop
 80011a4:	3710      	adds	r7, #16
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	200000d6 	.word	0x200000d6
 80011b0:	0800b8e8 	.word	0x0800b8e8

080011b4 <TSL2591_Set_IntegralTime>:
function:	Set the TSL2591 Integral Time
parameter:
Info:
******************************************************************************/
void TSL2591_Set_IntegralTime(UBYTE Time)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	4603      	mov	r3, r0
 80011bc:	71fb      	strb	r3, [r7, #7]
    UBYTE control=0;
 80011be:	2300      	movs	r3, #0
 80011c0:	73fb      	strb	r3, [r7, #15]
    if(Time < 0x06){
 80011c2:	79fb      	ldrb	r3, [r7, #7]
 80011c4:	2b05      	cmp	r3, #5
 80011c6:	d815      	bhi.n	80011f4 <TSL2591_Set_IntegralTime+0x40>
        control =  TSL2591_Read_Byte(CONTROL_REGISTER);
 80011c8:	2001      	movs	r0, #1
 80011ca:	f7ff ff59 	bl	8001080 <TSL2591_Read_Byte>
 80011ce:	4603      	mov	r3, r0
 80011d0:	73fb      	strb	r3, [r7, #15]
        control &= 0xf8; //0b11111000
 80011d2:	7bfb      	ldrb	r3, [r7, #15]
 80011d4:	f023 0307 	bic.w	r3, r3, #7
 80011d8:	73fb      	strb	r3, [r7, #15]
        control |= Time;
 80011da:	7bfa      	ldrb	r2, [r7, #15]
 80011dc:	79fb      	ldrb	r3, [r7, #7]
 80011de:	4313      	orrs	r3, r2
 80011e0:	73fb      	strb	r3, [r7, #15]
        TSL2591_Write_Byte(CONTROL_REGISTER, control);
 80011e2:	7bfb      	ldrb	r3, [r7, #15]
 80011e4:	4619      	mov	r1, r3
 80011e6:	2001      	movs	r0, #1
 80011e8:	f7ff ff70 	bl	80010cc <TSL2591_Write_Byte>
        TSL2591_Time = Time;
 80011ec:	4a05      	ldr	r2, [pc, #20]	; (8001204 <TSL2591_Set_IntegralTime+0x50>)
 80011ee:	79fb      	ldrb	r3, [r7, #7]
 80011f0:	7013      	strb	r3, [r2, #0]
    }else{
        printf("Integral Time Parameter Error\r\n");
    }
}
 80011f2:	e002      	b.n	80011fa <TSL2591_Set_IntegralTime+0x46>
        printf("Integral Time Parameter Error\r\n");
 80011f4:	4804      	ldr	r0, [pc, #16]	; (8001208 <TSL2591_Set_IntegralTime+0x54>)
 80011f6:	f008 fbc1 	bl	800997c <puts>
}
 80011fa:	bf00      	nop
 80011fc:	3710      	adds	r7, #16
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	200000d5 	.word	0x200000d5
 8001208:	0800b900 	.word	0x0800b900

0800120c <TSL2591_Read_Channel0>:
function:	Read channel data
parameter:
Info:
******************************************************************************/
UWORD TSL2591_Read_Channel0(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
    return TSL2591_Read_Word(CHAN0_LOW);
 8001210:	2014      	movs	r0, #20
 8001212:	f7ff ff48 	bl	80010a6 <TSL2591_Read_Word>
 8001216:	4603      	mov	r3, r0
}
 8001218:	4618      	mov	r0, r3
 800121a:	bd80      	pop	{r7, pc}

0800121c <TSL2591_Read_Channel1>:

UWORD TSL2591_Read_Channel1(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
    return TSL2591_Read_Word(CHAN1_LOW);
 8001220:	2016      	movs	r0, #22
 8001222:	f7ff ff40 	bl	80010a6 <TSL2591_Read_Word>
 8001226:	4603      	mov	r3, r0
}
 8001228:	4618      	mov	r0, r3
 800122a:	bd80      	pop	{r7, pc}

0800122c <TSL2591_Init>:
function:	TSL2591 Initialization
parameter:
Info:
******************************************************************************/
UBYTE TSL2591_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
		DEV_I2C_Init(TSL2591_ADDRESS<<1);//8-bit address
 8001230:	2052      	movs	r0, #82	; 0x52
 8001232:	f7ff fe99 	bl	8000f68 <DEV_I2C_Init>
    printf("ID = 0x%X \r\n",TSL2591_Read_Byte(ID_REGISTER));
 8001236:	2012      	movs	r0, #18
 8001238:	f7ff ff22 	bl	8001080 <TSL2591_Read_Byte>
 800123c:	4603      	mov	r3, r0
 800123e:	4619      	mov	r1, r3
 8001240:	4809      	ldr	r0, [pc, #36]	; (8001268 <TSL2591_Init+0x3c>)
 8001242:	f008 fb15 	bl	8009870 <iprintf>
    TSL2591_Enable();
 8001246:	f7ff ff57 	bl	80010f8 <TSL2591_Enable>
    TSL2591_Set_Gain(MEDIUM_AGAIN);//25X GAIN
 800124a:	2010      	movs	r0, #16
 800124c:	f7ff ff7c 	bl	8001148 <TSL2591_Set_Gain>
    TSL2591_Set_IntegralTime(ATIME_200MS);//200ms Integration time
 8001250:	2001      	movs	r0, #1
 8001252:	f7ff ffaf 	bl	80011b4 <TSL2591_Set_IntegralTime>
    TSL2591_Write_Byte(PERSIST_REGISTER, 0x01);//filter
 8001256:	2101      	movs	r1, #1
 8001258:	200c      	movs	r0, #12
 800125a:	f7ff ff37 	bl	80010cc <TSL2591_Write_Byte>
    TSL2591_Disable();
 800125e:	f7ff ff53 	bl	8001108 <TSL2591_Disable>
    return 0;
 8001262:	2300      	movs	r3, #0
}
 8001264:	4618      	mov	r0, r3
 8001266:	bd80      	pop	{r7, pc}
 8001268:	0800b920 	.word	0x0800b920
 800126c:	00000000 	.word	0x00000000

08001270 <TSL2591_Read_Lux>:
function:	Read TSL2591 data to convert to Lux value
parameter:
Info:
******************************************************************************/
UWORD TSL2591_Read_Lux(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b08a      	sub	sp, #40	; 0x28
 8001274:	af00      	add	r7, sp, #0
    UWORD atime, max_counts,channel_0,channel_1;
    TSL2591_Enable();
 8001276:	f7ff ff3f 	bl	80010f8 <TSL2591_Enable>
    for(UBYTE i=0; i<TSL2591_Time+2; i++){
 800127a:	2300      	movs	r3, #0
 800127c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8001280:	e007      	b.n	8001292 <TSL2591_Read_Lux+0x22>
        DEV_Delay_ms(100);
 8001282:	2064      	movs	r0, #100	; 0x64
 8001284:	f7ff fe5e 	bl	8000f44 <DEV_Delay_ms>
    for(UBYTE i=0; i<TSL2591_Time+2; i++){
 8001288:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800128c:	3301      	adds	r3, #1
 800128e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8001292:	4b6b      	ldr	r3, [pc, #428]	; (8001440 <TSL2591_Read_Lux+0x1d0>)
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	1c5a      	adds	r2, r3, #1
 8001298:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800129c:	429a      	cmp	r2, r3
 800129e:	daf0      	bge.n	8001282 <TSL2591_Read_Lux+0x12>
    }
    if(DEV_Digital_Read(INT_PIN) == 1)
 80012a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012a8:	f003 fa56 	bl	8004758 <HAL_GPIO_ReadPin>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d103      	bne.n	80012ba <TSL2591_Read_Lux+0x4a>
            printf("INT 0\r\n");
 80012b2:	4864      	ldr	r0, [pc, #400]	; (8001444 <TSL2591_Read_Lux+0x1d4>)
 80012b4:	f008 fb62 	bl	800997c <puts>
 80012b8:	e002      	b.n	80012c0 <TSL2591_Read_Lux+0x50>
    else
             printf("INT 1\r\n");
 80012ba:	4863      	ldr	r0, [pc, #396]	; (8001448 <TSL2591_Read_Lux+0x1d8>)
 80012bc:	f008 fb5e 	bl	800997c <puts>
    channel_0 = TSL2591_Read_Channel0();
 80012c0:	f7ff ffa4 	bl	800120c <TSL2591_Read_Channel0>
 80012c4:	4603      	mov	r3, r0
 80012c6:	84bb      	strh	r3, [r7, #36]	; 0x24
    channel_1 = TSL2591_Read_Channel1();
 80012c8:	f7ff ffa8 	bl	800121c <TSL2591_Read_Channel1>
 80012cc:	4603      	mov	r3, r0
 80012ce:	847b      	strh	r3, [r7, #34]	; 0x22
    TSL2591_Disable();
 80012d0:	f7ff ff1a 	bl	8001108 <TSL2591_Disable>
    TSL2591_Enable();
 80012d4:	f7ff ff10 	bl	80010f8 <TSL2591_Enable>
    TSL2591_Write_Byte(0xE7, 0x13);
 80012d8:	2113      	movs	r1, #19
 80012da:	20e7      	movs	r0, #231	; 0xe7
 80012dc:	f7ff fef6 	bl	80010cc <TSL2591_Write_Byte>
    TSL2591_Disable();
 80012e0:	f7ff ff12 	bl	8001108 <TSL2591_Disable>

    atime = 100 * TSL2591_Time + 100;
 80012e4:	4b56      	ldr	r3, [pc, #344]	; (8001440 <TSL2591_Read_Lux+0x1d0>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	3301      	adds	r3, #1
 80012ea:	b29b      	uxth	r3, r3
 80012ec:	461a      	mov	r2, r3
 80012ee:	0092      	lsls	r2, r2, #2
 80012f0:	4413      	add	r3, r2
 80012f2:	461a      	mov	r2, r3
 80012f4:	0091      	lsls	r1, r2, #2
 80012f6:	461a      	mov	r2, r3
 80012f8:	460b      	mov	r3, r1
 80012fa:	4413      	add	r3, r2
 80012fc:	009b      	lsls	r3, r3, #2
 80012fe:	82fb      	strh	r3, [r7, #22]
    if(TSL2591_Time == ATIME_100MS){
 8001300:	4b4f      	ldr	r3, [pc, #316]	; (8001440 <TSL2591_Read_Lux+0x1d0>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d103      	bne.n	8001310 <TSL2591_Read_Lux+0xa0>
        max_counts = MAX_COUNT_100MS;
 8001308:	f648 73ff 	movw	r3, #36863	; 0x8fff
 800130c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800130e:	e002      	b.n	8001316 <TSL2591_Read_Lux+0xa6>
    }else{
        max_counts = MAX_COUNT;
 8001310:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001314:	84fb      	strh	r3, [r7, #38]	; 0x26
    }
    UBYTE gain_t;
    if (channel_0 >= max_counts || channel_1 >= max_counts){
 8001316:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001318:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800131a:	429a      	cmp	r2, r3
 800131c:	d203      	bcs.n	8001326 <TSL2591_Read_Lux+0xb6>
 800131e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001320:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001322:	429a      	cmp	r2, r3
 8001324:	d32d      	bcc.n	8001382 <TSL2591_Read_Lux+0x112>
            gain_t = TSL2591_Get_Gain();
 8001326:	f7ff fef7 	bl	8001118 <TSL2591_Get_Gain>
 800132a:	4603      	mov	r3, r0
 800132c:	757b      	strb	r3, [r7, #21]
            if(gain_t != LOW_AGAIN){
 800132e:	7d7b      	ldrb	r3, [r7, #21]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d021      	beq.n	8001378 <TSL2591_Read_Lux+0x108>
                gain_t = ((gain_t>>4)-1)<<4;
 8001334:	7d7b      	ldrb	r3, [r7, #21]
 8001336:	091b      	lsrs	r3, r3, #4
 8001338:	b2db      	uxtb	r3, r3
 800133a:	3b01      	subs	r3, #1
 800133c:	b2db      	uxtb	r3, r3
 800133e:	011b      	lsls	r3, r3, #4
 8001340:	757b      	strb	r3, [r7, #21]
                TSL2591_Set_Gain(gain_t);
 8001342:	7d7b      	ldrb	r3, [r7, #21]
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff feff 	bl	8001148 <TSL2591_Set_Gain>
                channel_0 = 0;
 800134a:	2300      	movs	r3, #0
 800134c:	84bb      	strh	r3, [r7, #36]	; 0x24
                channel_1 = 0;
 800134e:	2300      	movs	r3, #0
 8001350:	847b      	strh	r3, [r7, #34]	; 0x22
                while(channel_0 <= 0 || channel_1 <=0){
 8001352:	e007      	b.n	8001364 <TSL2591_Read_Lux+0xf4>
                    channel_0 = TSL2591_Read_Channel0();
 8001354:	f7ff ff5a 	bl	800120c <TSL2591_Read_Channel0>
 8001358:	4603      	mov	r3, r0
 800135a:	84bb      	strh	r3, [r7, #36]	; 0x24
                    channel_1 = TSL2591_Read_Channel1();
 800135c:	f7ff ff5e 	bl	800121c <TSL2591_Read_Channel1>
 8001360:	4603      	mov	r3, r0
 8001362:	847b      	strh	r3, [r7, #34]	; 0x22
                while(channel_0 <= 0 || channel_1 <=0){
 8001364:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001366:	2b00      	cmp	r3, #0
 8001368:	d0f4      	beq.n	8001354 <TSL2591_Read_Lux+0xe4>
 800136a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800136c:	2b00      	cmp	r3, #0
 800136e:	d0f1      	beq.n	8001354 <TSL2591_Read_Lux+0xe4>
                }
                    DEV_Delay_ms(100);
 8001370:	2064      	movs	r0, #100	; 0x64
 8001372:	f7ff fde7 	bl	8000f44 <DEV_Delay_ms>
 8001376:	e004      	b.n	8001382 <TSL2591_Read_Lux+0x112>
            }else{
                printf("Numerical overflow!/r/n");
 8001378:	4834      	ldr	r0, [pc, #208]	; (800144c <TSL2591_Read_Lux+0x1dc>)
 800137a:	f008 fa79 	bl	8009870 <iprintf>
                return 0;
 800137e:	2300      	movs	r3, #0
 8001380:	e052      	b.n	8001428 <TSL2591_Read_Lux+0x1b8>
            }
    }
    double again;
    again = 1.0;
 8001382:	f04f 0200 	mov.w	r2, #0
 8001386:	4b32      	ldr	r3, [pc, #200]	; (8001450 <TSL2591_Read_Lux+0x1e0>)
 8001388:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if(TSL2591_Gain == MEDIUM_AGAIN){
 800138c:	4b31      	ldr	r3, [pc, #196]	; (8001454 <TSL2591_Read_Lux+0x1e4>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	2b10      	cmp	r3, #16
 8001392:	d105      	bne.n	80013a0 <TSL2591_Read_Lux+0x130>
        again = 25.0;
 8001394:	f04f 0200 	mov.w	r2, #0
 8001398:	4b2f      	ldr	r3, [pc, #188]	; (8001458 <TSL2591_Read_Lux+0x1e8>)
 800139a:	e9c7 2306 	strd	r2, r3, [r7, #24]
 800139e:	e012      	b.n	80013c6 <TSL2591_Read_Lux+0x156>
    }else if(TSL2591_Gain == HIGH_AGAIN){
 80013a0:	4b2c      	ldr	r3, [pc, #176]	; (8001454 <TSL2591_Read_Lux+0x1e4>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	2b20      	cmp	r3, #32
 80013a6:	d105      	bne.n	80013b4 <TSL2591_Read_Lux+0x144>
        again = 428.0;
 80013a8:	a321      	add	r3, pc, #132	; (adr r3, 8001430 <TSL2591_Read_Lux+0x1c0>)
 80013aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ae:	e9c7 2306 	strd	r2, r3, [r7, #24]
 80013b2:	e008      	b.n	80013c6 <TSL2591_Read_Lux+0x156>
    }else if(TSL2591_Gain == MAX_AGAIN){
 80013b4:	4b27      	ldr	r3, [pc, #156]	; (8001454 <TSL2591_Read_Lux+0x1e4>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	2b30      	cmp	r3, #48	; 0x30
 80013ba:	d104      	bne.n	80013c6 <TSL2591_Read_Lux+0x156>
        again = 9876.0;
 80013bc:	a31e      	add	r3, pc, #120	; (adr r3, 8001438 <TSL2591_Read_Lux+0x1c8>)
 80013be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013c2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    }
    double Cpl;
    UWORD lux1,lux2=0;
 80013c6:	2300      	movs	r3, #0
 80013c8:	827b      	strh	r3, [r7, #18]

    Cpl = (atime * again) / LUX_DF;
 80013ca:	8afb      	ldrh	r3, [r7, #22]
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7ff f8a1 	bl	8000514 <__aeabi_i2d>
 80013d2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80013d6:	f7ff f907 	bl	80005e8 <__aeabi_dmul>
 80013da:	4602      	mov	r2, r0
 80013dc:	460b      	mov	r3, r1
 80013de:	4610      	mov	r0, r2
 80013e0:	4619      	mov	r1, r3
 80013e2:	f04f 0200 	mov.w	r2, #0
 80013e6:	4b1d      	ldr	r3, [pc, #116]	; (800145c <TSL2591_Read_Lux+0x1ec>)
 80013e8:	f7ff fa28 	bl	800083c <__aeabi_ddiv>
 80013ec:	4602      	mov	r2, r0
 80013ee:	460b      	mov	r3, r1
 80013f0:	e9c7 2302 	strd	r2, r3, [r7, #8]
    lux1 = (int)((channel_0 - (2 * channel_1)) / Cpl);
 80013f4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80013f6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	1ad3      	subs	r3, r2, r3
 80013fc:	4618      	mov	r0, r3
 80013fe:	f7ff f889 	bl	8000514 <__aeabi_i2d>
 8001402:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001406:	f7ff fa19 	bl	800083c <__aeabi_ddiv>
 800140a:	4602      	mov	r2, r0
 800140c:	460b      	mov	r3, r1
 800140e:	4610      	mov	r0, r2
 8001410:	4619      	mov	r1, r3
 8001412:	f7ff fb83 	bl	8000b1c <__aeabi_d2iz>
 8001416:	4603      	mov	r3, r0
 8001418:	80fb      	strh	r3, [r7, #6]
    // lux2 = ((0.6 * channel_0) - (channel_1)) / Cpl;
    // This is a two segment lux equation where the first
    // segment (Lux1) covers fluorescent and incandescent light
    // and the second segment (Lux2) covers dimmed incandescent light

    if(lux1>lux2){
 800141a:	88fa      	ldrh	r2, [r7, #6]
 800141c:	8a7b      	ldrh	r3, [r7, #18]
 800141e:	429a      	cmp	r2, r3
 8001420:	d901      	bls.n	8001426 <TSL2591_Read_Lux+0x1b6>
        return lux1;
 8001422:	88fb      	ldrh	r3, [r7, #6]
 8001424:	e000      	b.n	8001428 <TSL2591_Read_Lux+0x1b8>
    }else{
        return lux2;
 8001426:	8a7b      	ldrh	r3, [r7, #18]
    }
}
 8001428:	4618      	mov	r0, r3
 800142a:	3728      	adds	r7, #40	; 0x28
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	00000000 	.word	0x00000000
 8001434:	407ac000 	.word	0x407ac000
 8001438:	00000000 	.word	0x00000000
 800143c:	40c34a00 	.word	0x40c34a00
 8001440:	200000d5 	.word	0x200000d5
 8001444:	0800b930 	.word	0x0800b930
 8001448:	0800b938 	.word	0x0800b938
 800144c:	0800b940 	.word	0x0800b940
 8001450:	3ff00000 	.word	0x3ff00000
 8001454:	200000d6 	.word	0x200000d6
 8001458:	40390000 	.word	0x40390000
 800145c:	4087d000 	.word	0x4087d000

08001460 <TSL2591_SET_LuxInterrupt>:
        SET_HIGH: Interrupt high threshold
Info:   Based on Lux as a comparison
        Need to use the function TSL2591_Read_Lux() to update the data
******************************************************************************/
void TSL2591_SET_LuxInterrupt(UWORD SET_LOW, UWORD SET_HIGH)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b08a      	sub	sp, #40	; 0x28
 8001464:	af00      	add	r7, sp, #0
 8001466:	4603      	mov	r3, r0
 8001468:	460a      	mov	r2, r1
 800146a:	80fb      	strh	r3, [r7, #6]
 800146c:	4613      	mov	r3, r2
 800146e:	80bb      	strh	r3, [r7, #4]
    double Cpl;
    double again;
    UWORD atime, channel_1;
    atime  = 100 * TSL2591_Time + 100;
 8001470:	4b59      	ldr	r3, [pc, #356]	; (80015d8 <TSL2591_SET_LuxInterrupt+0x178>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	3301      	adds	r3, #1
 8001476:	b29b      	uxth	r3, r3
 8001478:	461a      	mov	r2, r3
 800147a:	0092      	lsls	r2, r2, #2
 800147c:	4413      	add	r3, r2
 800147e:	461a      	mov	r2, r3
 8001480:	0091      	lsls	r1, r2, #2
 8001482:	461a      	mov	r2, r3
 8001484:	460b      	mov	r3, r1
 8001486:	4413      	add	r3, r2
 8001488:	009b      	lsls	r3, r3, #2
 800148a:	83fb      	strh	r3, [r7, #30]
    again = 1.0;
 800148c:	f04f 0200 	mov.w	r2, #0
 8001490:	4b52      	ldr	r3, [pc, #328]	; (80015dc <TSL2591_SET_LuxInterrupt+0x17c>)
 8001492:	e9c7 2308 	strd	r2, r3, [r7, #32]
    if(TSL2591_Gain == MEDIUM_AGAIN){
 8001496:	4b52      	ldr	r3, [pc, #328]	; (80015e0 <TSL2591_SET_LuxInterrupt+0x180>)
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	2b10      	cmp	r3, #16
 800149c:	d105      	bne.n	80014aa <TSL2591_SET_LuxInterrupt+0x4a>
        again = 25.0;
 800149e:	f04f 0200 	mov.w	r2, #0
 80014a2:	4b50      	ldr	r3, [pc, #320]	; (80015e4 <TSL2591_SET_LuxInterrupt+0x184>)
 80014a4:	e9c7 2308 	strd	r2, r3, [r7, #32]
 80014a8:	e012      	b.n	80014d0 <TSL2591_SET_LuxInterrupt+0x70>
    }else if(TSL2591_Gain == HIGH_AGAIN){
 80014aa:	4b4d      	ldr	r3, [pc, #308]	; (80015e0 <TSL2591_SET_LuxInterrupt+0x180>)
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	2b20      	cmp	r3, #32
 80014b0:	d105      	bne.n	80014be <TSL2591_SET_LuxInterrupt+0x5e>
        again = 428.0;
 80014b2:	a345      	add	r3, pc, #276	; (adr r3, 80015c8 <TSL2591_SET_LuxInterrupt+0x168>)
 80014b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b8:	e9c7 2308 	strd	r2, r3, [r7, #32]
 80014bc:	e008      	b.n	80014d0 <TSL2591_SET_LuxInterrupt+0x70>
    }else if(TSL2591_Gain == MAX_AGAIN){
 80014be:	4b48      	ldr	r3, [pc, #288]	; (80015e0 <TSL2591_SET_LuxInterrupt+0x180>)
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	2b30      	cmp	r3, #48	; 0x30
 80014c4:	d104      	bne.n	80014d0 <TSL2591_SET_LuxInterrupt+0x70>
        again = 9876.0;
 80014c6:	a342      	add	r3, pc, #264	; (adr r3, 80015d0 <TSL2591_SET_LuxInterrupt+0x170>)
 80014c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014cc:	e9c7 2308 	strd	r2, r3, [r7, #32]
    }

    Cpl = (atime * again) / LUX_DF;
 80014d0:	8bfb      	ldrh	r3, [r7, #30]
 80014d2:	4618      	mov	r0, r3
 80014d4:	f7ff f81e 	bl	8000514 <__aeabi_i2d>
 80014d8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80014dc:	f7ff f884 	bl	80005e8 <__aeabi_dmul>
 80014e0:	4602      	mov	r2, r0
 80014e2:	460b      	mov	r3, r1
 80014e4:	4610      	mov	r0, r2
 80014e6:	4619      	mov	r1, r3
 80014e8:	f04f 0200 	mov.w	r2, #0
 80014ec:	4b3e      	ldr	r3, [pc, #248]	; (80015e8 <TSL2591_SET_LuxInterrupt+0x188>)
 80014ee:	f7ff f9a5 	bl	800083c <__aeabi_ddiv>
 80014f2:	4602      	mov	r2, r0
 80014f4:	460b      	mov	r3, r1
 80014f6:	e9c7 2304 	strd	r2, r3, [r7, #16]
    channel_1 = TSL2591_Read_Channel1();
 80014fa:	f7ff fe8f 	bl	800121c <TSL2591_Read_Channel1>
 80014fe:	4603      	mov	r3, r0
 8001500:	81fb      	strh	r3, [r7, #14]

    SET_HIGH =  (int)(Cpl * SET_HIGH)+ 2*channel_1-1;
 8001502:	88bb      	ldrh	r3, [r7, #4]
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff f805 	bl	8000514 <__aeabi_i2d>
 800150a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800150e:	f7ff f86b 	bl	80005e8 <__aeabi_dmul>
 8001512:	4602      	mov	r2, r0
 8001514:	460b      	mov	r3, r1
 8001516:	4610      	mov	r0, r2
 8001518:	4619      	mov	r1, r3
 800151a:	f7ff faff 	bl	8000b1c <__aeabi_d2iz>
 800151e:	4603      	mov	r3, r0
 8001520:	b29a      	uxth	r2, r3
 8001522:	89fb      	ldrh	r3, [r7, #14]
 8001524:	005b      	lsls	r3, r3, #1
 8001526:	b29b      	uxth	r3, r3
 8001528:	4413      	add	r3, r2
 800152a:	b29b      	uxth	r3, r3
 800152c:	3b01      	subs	r3, #1
 800152e:	80bb      	strh	r3, [r7, #4]
    SET_LOW = (int)(Cpl * SET_LOW)+ 2*channel_1+1;
 8001530:	88fb      	ldrh	r3, [r7, #6]
 8001532:	4618      	mov	r0, r3
 8001534:	f7fe ffee 	bl	8000514 <__aeabi_i2d>
 8001538:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800153c:	f7ff f854 	bl	80005e8 <__aeabi_dmul>
 8001540:	4602      	mov	r2, r0
 8001542:	460b      	mov	r3, r1
 8001544:	4610      	mov	r0, r2
 8001546:	4619      	mov	r1, r3
 8001548:	f7ff fae8 	bl	8000b1c <__aeabi_d2iz>
 800154c:	4603      	mov	r3, r0
 800154e:	b29a      	uxth	r2, r3
 8001550:	89fb      	ldrh	r3, [r7, #14]
 8001552:	005b      	lsls	r3, r3, #1
 8001554:	b29b      	uxth	r3, r3
 8001556:	4413      	add	r3, r2
 8001558:	b29b      	uxth	r3, r3
 800155a:	3301      	adds	r3, #1
 800155c:	80fb      	strh	r3, [r7, #6]

    TSL2591_Enable();
 800155e:	f7ff fdcb 	bl	80010f8 <TSL2591_Enable>
    TSL2591_Write_Byte(AILTL_REGISTER, SET_LOW & 0xFF);
 8001562:	88fb      	ldrh	r3, [r7, #6]
 8001564:	b2db      	uxtb	r3, r3
 8001566:	4619      	mov	r1, r3
 8001568:	2004      	movs	r0, #4
 800156a:	f7ff fdaf 	bl	80010cc <TSL2591_Write_Byte>
    TSL2591_Write_Byte(AILTH_REGISTER, SET_LOW >> 8);
 800156e:	88fb      	ldrh	r3, [r7, #6]
 8001570:	0a1b      	lsrs	r3, r3, #8
 8001572:	b29b      	uxth	r3, r3
 8001574:	b2db      	uxtb	r3, r3
 8001576:	4619      	mov	r1, r3
 8001578:	2005      	movs	r0, #5
 800157a:	f7ff fda7 	bl	80010cc <TSL2591_Write_Byte>

    TSL2591_Write_Byte(AIHTL_REGISTER, SET_HIGH & 0xFF);
 800157e:	88bb      	ldrh	r3, [r7, #4]
 8001580:	b2db      	uxtb	r3, r3
 8001582:	4619      	mov	r1, r3
 8001584:	2006      	movs	r0, #6
 8001586:	f7ff fda1 	bl	80010cc <TSL2591_Write_Byte>
    TSL2591_Write_Byte(AIHTH_REGISTER, SET_HIGH >> 8);
 800158a:	88bb      	ldrh	r3, [r7, #4]
 800158c:	0a1b      	lsrs	r3, r3, #8
 800158e:	b29b      	uxth	r3, r3
 8001590:	b2db      	uxtb	r3, r3
 8001592:	4619      	mov	r1, r3
 8001594:	2007      	movs	r0, #7
 8001596:	f7ff fd99 	bl	80010cc <TSL2591_Write_Byte>

    TSL2591_Write_Byte(NPAILTL_REGISTER, 0 );
 800159a:	2100      	movs	r1, #0
 800159c:	2008      	movs	r0, #8
 800159e:	f7ff fd95 	bl	80010cc <TSL2591_Write_Byte>
    TSL2591_Write_Byte(NPAILTH_REGISTER, 0 );
 80015a2:	2100      	movs	r1, #0
 80015a4:	2009      	movs	r0, #9
 80015a6:	f7ff fd91 	bl	80010cc <TSL2591_Write_Byte>

    TSL2591_Write_Byte(NPAIHTL_REGISTER, 0xff );
 80015aa:	21ff      	movs	r1, #255	; 0xff
 80015ac:	200a      	movs	r0, #10
 80015ae:	f7ff fd8d 	bl	80010cc <TSL2591_Write_Byte>
    TSL2591_Write_Byte(NPAIHTH_REGISTER, 0xff );
 80015b2:	21ff      	movs	r1, #255	; 0xff
 80015b4:	200b      	movs	r0, #11
 80015b6:	f7ff fd89 	bl	80010cc <TSL2591_Write_Byte>
    TSL2591_Disable();
 80015ba:	f7ff fda5 	bl	8001108 <TSL2591_Disable>
}
 80015be:	bf00      	nop
 80015c0:	3728      	adds	r7, #40	; 0x28
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	00000000 	.word	0x00000000
 80015cc:	407ac000 	.word	0x407ac000
 80015d0:	00000000 	.word	0x00000000
 80015d4:	40c34a00 	.word	0x40c34a00
 80015d8:	200000d5 	.word	0x200000d5
 80015dc:	3ff00000 	.word	0x3ff00000
 80015e0:	200000d6 	.word	0x200000d6
 80015e4:	40390000 	.word	0x40390000
 80015e8:	4087d000 	.word	0x4087d000

080015ec <Set_LED>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Set_LED (int LEDnum, int Red, int Green, int Blue)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b085      	sub	sp, #20
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	60f8      	str	r0, [r7, #12]
 80015f4:	60b9      	str	r1, [r7, #8]
 80015f6:	607a      	str	r2, [r7, #4]
 80015f8:	603b      	str	r3, [r7, #0]
	LED_Data[LEDnum][0] = LEDnum;
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	b2d9      	uxtb	r1, r3
 80015fe:	4a11      	ldr	r2, [pc, #68]	; (8001644 <Set_LED+0x58>)
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	LED_Data[LEDnum][1] = Green;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	b2d9      	uxtb	r1, r3
 800160a:	4a0e      	ldr	r2, [pc, #56]	; (8001644 <Set_LED+0x58>)
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	4413      	add	r3, r2
 8001612:	460a      	mov	r2, r1
 8001614:	705a      	strb	r2, [r3, #1]
	LED_Data[LEDnum][2] = Red;
 8001616:	68bb      	ldr	r3, [r7, #8]
 8001618:	b2d9      	uxtb	r1, r3
 800161a:	4a0a      	ldr	r2, [pc, #40]	; (8001644 <Set_LED+0x58>)
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	4413      	add	r3, r2
 8001622:	460a      	mov	r2, r1
 8001624:	709a      	strb	r2, [r3, #2]
	LED_Data[LEDnum][3] = Blue;
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	b2d9      	uxtb	r1, r3
 800162a:	4a06      	ldr	r2, [pc, #24]	; (8001644 <Set_LED+0x58>)
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	4413      	add	r3, r2
 8001632:	460a      	mov	r2, r1
 8001634:	70da      	strb	r2, [r3, #3]
}
 8001636:	bf00      	nop
 8001638:	3714      	adds	r7, #20
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	20000120 	.word	0x20000120

08001648 <Set_Brightness>:

#define PI 3.14159265

void Set_Brightness (int brightness)  // 0-45
{
 8001648:	b5b0      	push	{r4, r5, r7, lr}
 800164a:	b086      	sub	sp, #24
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
#if USE_BRIGHTNESS

	if (brightness > 45) brightness = 45;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2b2d      	cmp	r3, #45	; 0x2d
 8001654:	dd01      	ble.n	800165a <Set_Brightness+0x12>
 8001656:	232d      	movs	r3, #45	; 0x2d
 8001658:	607b      	str	r3, [r7, #4]
	for (int i=0; i<MAX_LED; i++)
 800165a:	2300      	movs	r3, #0
 800165c:	617b      	str	r3, [r7, #20]
 800165e:	e060      	b.n	8001722 <Set_Brightness+0xda>
	{
		LED_Mod[i][0] = LED_Data[i][0];
 8001660:	4a37      	ldr	r2, [pc, #220]	; (8001740 <Set_Brightness+0xf8>)
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	f812 1023 	ldrb.w	r1, [r2, r3, lsl #2]
 8001668:	4a36      	ldr	r2, [pc, #216]	; (8001744 <Set_Brightness+0xfc>)
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
		for (int j=1; j<4; j++)
 8001670:	2301      	movs	r3, #1
 8001672:	613b      	str	r3, [r7, #16]
 8001674:	e04f      	b.n	8001716 <Set_Brightness+0xce>
		{
			float angle = 90-brightness;  // in degrees
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 800167c:	ee07 3a90 	vmov	s15, r3
 8001680:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001684:	edc7 7a03 	vstr	s15, [r7, #12]
			angle = angle*PI / 180;  // in rad
 8001688:	68f8      	ldr	r0, [r7, #12]
 800168a:	f7fe ff55 	bl	8000538 <__aeabi_f2d>
 800168e:	a32a      	add	r3, pc, #168	; (adr r3, 8001738 <Set_Brightness+0xf0>)
 8001690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001694:	f7fe ffa8 	bl	80005e8 <__aeabi_dmul>
 8001698:	4602      	mov	r2, r0
 800169a:	460b      	mov	r3, r1
 800169c:	4610      	mov	r0, r2
 800169e:	4619      	mov	r1, r3
 80016a0:	f04f 0200 	mov.w	r2, #0
 80016a4:	4b28      	ldr	r3, [pc, #160]	; (8001748 <Set_Brightness+0x100>)
 80016a6:	f7ff f8c9 	bl	800083c <__aeabi_ddiv>
 80016aa:	4602      	mov	r2, r0
 80016ac:	460b      	mov	r3, r1
 80016ae:	4610      	mov	r0, r2
 80016b0:	4619      	mov	r1, r3
 80016b2:	f7ff fa7b 	bl	8000bac <__aeabi_d2f>
 80016b6:	4603      	mov	r3, r0
 80016b8:	60fb      	str	r3, [r7, #12]
			LED_Mod[i][j] = (LED_Data[i][j])/(tan(angle));
 80016ba:	4a21      	ldr	r2, [pc, #132]	; (8001740 <Set_Brightness+0xf8>)
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	441a      	add	r2, r3
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	4413      	add	r3, r2
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7fe ff23 	bl	8000514 <__aeabi_i2d>
 80016ce:	4604      	mov	r4, r0
 80016d0:	460d      	mov	r5, r1
 80016d2:	68f8      	ldr	r0, [r7, #12]
 80016d4:	f7fe ff30 	bl	8000538 <__aeabi_f2d>
 80016d8:	4602      	mov	r2, r0
 80016da:	460b      	mov	r3, r1
 80016dc:	ec43 2b10 	vmov	d0, r2, r3
 80016e0:	f009 f892 	bl	800a808 <tan>
 80016e4:	ec53 2b10 	vmov	r2, r3, d0
 80016e8:	4620      	mov	r0, r4
 80016ea:	4629      	mov	r1, r5
 80016ec:	f7ff f8a6 	bl	800083c <__aeabi_ddiv>
 80016f0:	4602      	mov	r2, r0
 80016f2:	460b      	mov	r3, r1
 80016f4:	4610      	mov	r0, r2
 80016f6:	4619      	mov	r1, r3
 80016f8:	f7ff fa38 	bl	8000b6c <__aeabi_d2uiz>
 80016fc:	4603      	mov	r3, r0
 80016fe:	b2d9      	uxtb	r1, r3
 8001700:	4a10      	ldr	r2, [pc, #64]	; (8001744 <Set_Brightness+0xfc>)
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	009b      	lsls	r3, r3, #2
 8001706:	441a      	add	r2, r3
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	4413      	add	r3, r2
 800170c:	460a      	mov	r2, r1
 800170e:	701a      	strb	r2, [r3, #0]
		for (int j=1; j<4; j++)
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	3301      	adds	r3, #1
 8001714:	613b      	str	r3, [r7, #16]
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	2b03      	cmp	r3, #3
 800171a:	ddac      	ble.n	8001676 <Set_Brightness+0x2e>
	for (int i=0; i<MAX_LED; i++)
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	3301      	adds	r3, #1
 8001720:	617b      	str	r3, [r7, #20]
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	2b63      	cmp	r3, #99	; 0x63
 8001726:	dd9b      	ble.n	8001660 <Set_Brightness+0x18>
		}
	}

#endif
}
 8001728:	bf00      	nop
 800172a:	bf00      	nop
 800172c:	3718      	adds	r7, #24
 800172e:	46bd      	mov	sp, r7
 8001730:	bdb0      	pop	{r4, r5, r7, pc}
 8001732:	bf00      	nop
 8001734:	f3af 8000 	nop.w
 8001738:	53c8d4f1 	.word	0x53c8d4f1
 800173c:	400921fb 	.word	0x400921fb
 8001740:	20000120 	.word	0x20000120
 8001744:	20000300 	.word	0x20000300
 8001748:	40668000 	.word	0x40668000

0800174c <WS2812_Send>:
uint16_t pwmData[(24*MAX_LED)+50];

void WS2812_Send (void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b086      	sub	sp, #24
 8001750:	af00      	add	r7, sp, #0
	uint32_t indx=0;
 8001752:	2300      	movs	r3, #0
 8001754:	617b      	str	r3, [r7, #20]
	uint32_t color;

	for (int i= 0; i<MAX_LED; i++){
 8001756:	2300      	movs	r3, #0
 8001758:	613b      	str	r3, [r7, #16]
 800175a:	e036      	b.n	80017ca <WS2812_Send+0x7e>
	#if USE_BRIGHTNESS
		color = ((LED_Mod[i][1]<<16) | (LED_Mod[i][2]<<8) | (LED_Mod[i][3]));
 800175c:	4a2e      	ldr	r2, [pc, #184]	; (8001818 <WS2812_Send+0xcc>)
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	4413      	add	r3, r2
 8001764:	785b      	ldrb	r3, [r3, #1]
 8001766:	041a      	lsls	r2, r3, #16
 8001768:	492b      	ldr	r1, [pc, #172]	; (8001818 <WS2812_Send+0xcc>)
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	440b      	add	r3, r1
 8001770:	789b      	ldrb	r3, [r3, #2]
 8001772:	021b      	lsls	r3, r3, #8
 8001774:	431a      	orrs	r2, r3
 8001776:	4928      	ldr	r1, [pc, #160]	; (8001818 <WS2812_Send+0xcc>)
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	440b      	add	r3, r1
 800177e:	78db      	ldrb	r3, [r3, #3]
 8001780:	4313      	orrs	r3, r2
 8001782:	607b      	str	r3, [r7, #4]
	#else
		color = ((LED_Data[i][1]<<16) | (LED_Data[i][2]<<8) | (LED_Data[i][3]));
	#endif

		for (int i=23; i>=0; i--){
 8001784:	2317      	movs	r3, #23
 8001786:	60fb      	str	r3, [r7, #12]
 8001788:	e019      	b.n	80017be <WS2812_Send+0x72>
			if (color&(1<<i)){
 800178a:	2201      	movs	r2, #1
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	fa02 f303 	lsl.w	r3, r2, r3
 8001792:	461a      	mov	r2, r3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	4013      	ands	r3, r2
 8001798:	2b00      	cmp	r3, #0
 800179a:	d005      	beq.n	80017a8 <WS2812_Send+0x5c>
				pwmData[indx] = 60;  // 2/3 of 90
 800179c:	4a1f      	ldr	r2, [pc, #124]	; (800181c <WS2812_Send+0xd0>)
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	213c      	movs	r1, #60	; 0x3c
 80017a2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80017a6:	e004      	b.n	80017b2 <WS2812_Send+0x66>
			}else pwmData[indx] = 30;  // 1/3 of 90
 80017a8:	4a1c      	ldr	r2, [pc, #112]	; (800181c <WS2812_Send+0xd0>)
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	211e      	movs	r1, #30
 80017ae:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			indx++;
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	3301      	adds	r3, #1
 80017b6:	617b      	str	r3, [r7, #20]
		for (int i=23; i>=0; i--){
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	3b01      	subs	r3, #1
 80017bc:	60fb      	str	r3, [r7, #12]
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	dae2      	bge.n	800178a <WS2812_Send+0x3e>
	for (int i= 0; i<MAX_LED; i++){
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	3301      	adds	r3, #1
 80017c8:	613b      	str	r3, [r7, #16]
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	2b63      	cmp	r3, #99	; 0x63
 80017ce:	ddc5      	ble.n	800175c <WS2812_Send+0x10>
		}
	}

	for (int i=0; i<50; i++){
 80017d0:	2300      	movs	r3, #0
 80017d2:	60bb      	str	r3, [r7, #8]
 80017d4:	e00a      	b.n	80017ec <WS2812_Send+0xa0>
		pwmData[indx] = 0;
 80017d6:	4a11      	ldr	r2, [pc, #68]	; (800181c <WS2812_Send+0xd0>)
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	2100      	movs	r1, #0
 80017dc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		indx++;
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	3301      	adds	r3, #1
 80017e4:	617b      	str	r3, [r7, #20]
	for (int i=0; i<50; i++){
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	3301      	adds	r3, #1
 80017ea:	60bb      	str	r3, [r7, #8]
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	2b31      	cmp	r3, #49	; 0x31
 80017f0:	ddf1      	ble.n	80017d6 <WS2812_Send+0x8a>
	}

	HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t *)pwmData, indx);
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	b29b      	uxth	r3, r3
 80017f6:	4a09      	ldr	r2, [pc, #36]	; (800181c <WS2812_Send+0xd0>)
 80017f8:	2100      	movs	r1, #0
 80017fa:	4809      	ldr	r0, [pc, #36]	; (8001820 <WS2812_Send+0xd4>)
 80017fc:	f005 f99c 	bl	8006b38 <HAL_TIM_PWM_Start_DMA>
	while (!datasentflag){};
 8001800:	bf00      	nop
 8001802:	4b08      	ldr	r3, [pc, #32]	; (8001824 <WS2812_Send+0xd8>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d0fb      	beq.n	8001802 <WS2812_Send+0xb6>
	datasentflag = 0;
 800180a:	4b06      	ldr	r3, [pc, #24]	; (8001824 <WS2812_Send+0xd8>)
 800180c:	2200      	movs	r2, #0
 800180e:	601a      	str	r2, [r3, #0]
}
 8001810:	bf00      	nop
 8001812:	3718      	adds	r7, #24
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	20000300 	.word	0x20000300
 800181c:	200004f8 	.word	0x200004f8
 8001820:	200018a8 	.word	0x200018a8
 8001824:	20000098 	.word	0x20000098

08001828 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(&htim2, TIM_CHANNEL_1);
 8001830:	2100      	movs	r1, #0
 8001832:	4805      	ldr	r0, [pc, #20]	; (8001848 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8001834:	f005 fba0 	bl	8006f78 <HAL_TIM_PWM_Stop_DMA>
	datasentflag=1;
 8001838:	4b04      	ldr	r3, [pc, #16]	; (800184c <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 800183a:	2201      	movs	r2, #1
 800183c:	601a      	str	r2, [r3, #0]
}
 800183e:	bf00      	nop
 8001840:	3708      	adds	r7, #8
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	200018a8 	.word	0x200018a8
 800184c:	20000098 	.word	0x20000098

08001850 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001856:	f000 ffab 	bl	80027b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800185a:	f000 f8ab 	bl	80019b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800185e:	f000 faa5 	bl	8001dac <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001862:	f000 fa25 	bl	8001cb0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001866:	f000 fa53 	bl	8001d10 <MX_USART2_UART_Init>
  MX_DMA_Init();
 800186a:	f000 fa81 	bl	8001d70 <MX_DMA_Init>
  MX_TIM2_Init();
 800186e:	f000 f9a9 	bl	8001bc4 <MX_TIM2_Init>
  MX_ADC1_Init();
 8001872:	f000 f8f1 	bl	8001a58 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001876:	f000 f965 	bl	8001b44 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  //start the receive for the first word/message
  HAL_UART_Receive_IT(&huart1, receive_word, 5);
 800187a:	2205      	movs	r2, #5
 800187c:	4945      	ldr	r1, [pc, #276]	; (8001994 <main+0x144>)
 800187e:	4846      	ldr	r0, [pc, #280]	; (8001998 <main+0x148>)
 8001880:	f006 fca8 	bl	80081d4 <HAL_UART_Receive_IT>

  //setup adc for moisture sensor readings
  HAL_ADC_Start(&hadc1);
 8001884:	4845      	ldr	r0, [pc, #276]	; (800199c <main+0x14c>)
 8001886:	f001 fb6d 	bl	8002f64 <HAL_ADC_Start>

  //setup light sensor
  DEV_ModuleInit();
 800188a:	f7ff fbef 	bl	800106c <DEV_ModuleInit>
  TSL2591_Init();
 800188e:	f7ff fccd 	bl	800122c <TSL2591_Init>

  //set all LEDs to blue/red (purple) combo
  int i;
  for (i=0; i<MAX_LED; i++){
 8001892:	2300      	movs	r3, #0
 8001894:	607b      	str	r3, [r7, #4]
 8001896:	e00b      	b.n	80018b0 <main+0x60>
	  Set_LED(i, 102, 0, 235);
 8001898:	23eb      	movs	r3, #235	; 0xeb
 800189a:	2200      	movs	r2, #0
 800189c:	2166      	movs	r1, #102	; 0x66
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f7ff fea4 	bl	80015ec <Set_LED>
	  i++;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	3301      	adds	r3, #1
 80018a8:	607b      	str	r3, [r7, #4]
  for (i=0; i<MAX_LED; i++){
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	3301      	adds	r3, #1
 80018ae:	607b      	str	r3, [r7, #4]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2b63      	cmp	r3, #99	; 0x63
 80018b4:	ddf0      	ble.n	8001898 <main+0x48>
  }
  brightness = 10;
 80018b6:	4b3a      	ldr	r3, [pc, #232]	; (80019a0 <main+0x150>)
 80018b8:	220a      	movs	r2, #10
 80018ba:	601a      	str	r2, [r3, #0]
  Set_Brightness(brightness);
 80018bc:	4b38      	ldr	r3, [pc, #224]	; (80019a0 <main+0x150>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7ff fec1 	bl	8001648 <Set_Brightness>
  WS2812_Send();
 80018c6:	f7ff ff41 	bl	800174c <WS2812_Send>

    /* USER CODE BEGIN 3 */

	//**** MOISTURE SENSOR, ADC1 (PC0) SIMPLE READ ****//
	//start the ADC
	HAL_ADC_Start(&hadc1);
 80018ca:	4834      	ldr	r0, [pc, #208]	; (800199c <main+0x14c>)
 80018cc:	f001 fb4a 	bl	8002f64 <HAL_ADC_Start>
	//get raw data value from moisture sensor
	HAL_ADC_PollForConversion(&hadc1, 100);
 80018d0:	2164      	movs	r1, #100	; 0x64
 80018d2:	4832      	ldr	r0, [pc, #200]	; (800199c <main+0x14c>)
 80018d4:	f001 fc00 	bl	80030d8 <HAL_ADC_PollForConversion>
	raw_moist = HAL_ADC_GetValue(&hadc1);
 80018d8:	4830      	ldr	r0, [pc, #192]	; (800199c <main+0x14c>)
 80018da:	f001 fcd5 	bl	8003288 <HAL_ADC_GetValue>
 80018de:	4603      	mov	r3, r0
 80018e0:	4a30      	ldr	r2, [pc, #192]	; (80019a4 <main+0x154>)
 80018e2:	6013      	str	r3, [r2, #0]

	//get raw data from ambient light sensor
	raw_lux = TSL2591_Read_Lux();
 80018e4:	f7ff fcc4 	bl	8001270 <TSL2591_Read_Lux>
 80018e8:	4603      	mov	r3, r0
 80018ea:	461a      	mov	r2, r3
 80018ec:	4b2e      	ldr	r3, [pc, #184]	; (80019a8 <main+0x158>)
 80018ee:	601a      	str	r2, [r3, #0]
	TSL2591_SET_LuxInterrupt(50,200);
 80018f0:	21c8      	movs	r1, #200	; 0xc8
 80018f2:	2032      	movs	r0, #50	; 0x32
 80018f4:	f7ff fdb4 	bl	8001460 <TSL2591_SET_LuxInterrupt>

	//only carry out auto adjusting brightness if flag is high
	  if(auto_brightness_flag == 1){
 80018f8:	4b2c      	ldr	r3, [pc, #176]	; (80019ac <main+0x15c>)
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d136      	bne.n	800196e <main+0x11e>
		  //adjust LEDs if lux value is low (low-light)
		  if(raw_lux>60 && raw_lux <500){
 8001900:	4b29      	ldr	r3, [pc, #164]	; (80019a8 <main+0x158>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	2b3c      	cmp	r3, #60	; 0x3c
 8001906:	d908      	bls.n	800191a <main+0xca>
 8001908:	4b27      	ldr	r3, [pc, #156]	; (80019a8 <main+0x158>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001910:	d203      	bcs.n	800191a <main+0xca>
			  new_brightness = 1;
 8001912:	4b27      	ldr	r3, [pc, #156]	; (80019b0 <main+0x160>)
 8001914:	2201      	movs	r2, #1
 8001916:	601a      	str	r2, [r3, #0]
 8001918:	e029      	b.n	800196e <main+0x11e>
		  }else if(raw_lux>45 && raw_lux <500){
 800191a:	4b23      	ldr	r3, [pc, #140]	; (80019a8 <main+0x158>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	2b2d      	cmp	r3, #45	; 0x2d
 8001920:	d908      	bls.n	8001934 <main+0xe4>
 8001922:	4b21      	ldr	r3, [pc, #132]	; (80019a8 <main+0x158>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800192a:	d203      	bcs.n	8001934 <main+0xe4>
			  new_brightness = 5;
 800192c:	4b20      	ldr	r3, [pc, #128]	; (80019b0 <main+0x160>)
 800192e:	2205      	movs	r2, #5
 8001930:	601a      	str	r2, [r3, #0]
 8001932:	e01c      	b.n	800196e <main+0x11e>
		  }else if(raw_lux>30 && raw_lux <500){
 8001934:	4b1c      	ldr	r3, [pc, #112]	; (80019a8 <main+0x158>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	2b1e      	cmp	r3, #30
 800193a:	d908      	bls.n	800194e <main+0xfe>
 800193c:	4b1a      	ldr	r3, [pc, #104]	; (80019a8 <main+0x158>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001944:	d203      	bcs.n	800194e <main+0xfe>
			  new_brightness = 10;
 8001946:	4b1a      	ldr	r3, [pc, #104]	; (80019b0 <main+0x160>)
 8001948:	220a      	movs	r2, #10
 800194a:	601a      	str	r2, [r3, #0]
 800194c:	e00f      	b.n	800196e <main+0x11e>
		  }else if(raw_lux>15 && raw_lux <500){
 800194e:	4b16      	ldr	r3, [pc, #88]	; (80019a8 <main+0x158>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	2b0f      	cmp	r3, #15
 8001954:	d908      	bls.n	8001968 <main+0x118>
 8001956:	4b14      	ldr	r3, [pc, #80]	; (80019a8 <main+0x158>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800195e:	d203      	bcs.n	8001968 <main+0x118>
			  new_brightness = 20;
 8001960:	4b13      	ldr	r3, [pc, #76]	; (80019b0 <main+0x160>)
 8001962:	2214      	movs	r2, #20
 8001964:	601a      	str	r2, [r3, #0]
 8001966:	e002      	b.n	800196e <main+0x11e>
		  }else{
			  new_brightness = 45;
 8001968:	4b11      	ldr	r3, [pc, #68]	; (80019b0 <main+0x160>)
 800196a:	222d      	movs	r2, #45	; 0x2d
 800196c:	601a      	str	r2, [r3, #0]
		  }
	  }
	  //send new data to the lights if the brightness is updated
	  if(new_brightness != brightness){
 800196e:	4b10      	ldr	r3, [pc, #64]	; (80019b0 <main+0x160>)
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	4b0b      	ldr	r3, [pc, #44]	; (80019a0 <main+0x150>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	429a      	cmp	r2, r3
 8001978:	d0a7      	beq.n	80018ca <main+0x7a>
		  brightness = new_brightness;
 800197a:	4b0d      	ldr	r3, [pc, #52]	; (80019b0 <main+0x160>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a08      	ldr	r2, [pc, #32]	; (80019a0 <main+0x150>)
 8001980:	6013      	str	r3, [r2, #0]
		  Set_Brightness(brightness);
 8001982:	4b07      	ldr	r3, [pc, #28]	; (80019a0 <main+0x150>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4618      	mov	r0, r3
 8001988:	f7ff fe5e 	bl	8001648 <Set_Brightness>
		  WS2812_Send();
 800198c:	f7ff fede 	bl	800174c <WS2812_Send>
	HAL_ADC_Start(&hadc1);
 8001990:	e79b      	b.n	80018ca <main+0x7a>
 8001992:	bf00      	nop
 8001994:	2000009c 	.word	0x2000009c
 8001998:	20001820 	.word	0x20001820
 800199c:	20000490 	.word	0x20000490
 80019a0:	200000b4 	.word	0x200000b4
 80019a4:	200000bc 	.word	0x200000bc
 80019a8:	200000c0 	.word	0x200000c0
 80019ac:	20000005 	.word	0x20000005
 80019b0:	200000b8 	.word	0x200000b8

080019b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b096      	sub	sp, #88	; 0x58
 80019b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019ba:	f107 0314 	add.w	r3, r7, #20
 80019be:	2244      	movs	r2, #68	; 0x44
 80019c0:	2100      	movs	r1, #0
 80019c2:	4618      	mov	r0, r3
 80019c4:	f007 ff4c 	bl	8009860 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019c8:	463b      	mov	r3, r7
 80019ca:	2200      	movs	r2, #0
 80019cc:	601a      	str	r2, [r3, #0]
 80019ce:	605a      	str	r2, [r3, #4]
 80019d0:	609a      	str	r2, [r3, #8]
 80019d2:	60da      	str	r2, [r3, #12]
 80019d4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80019d6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80019da:	f003 fcf7 	bl	80053cc <HAL_PWREx_ControlVoltageScaling>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d001      	beq.n	80019e8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80019e4:	f000 fb78 	bl	80020d8 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80019e8:	2302      	movs	r3, #2
 80019ea:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019f0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80019f2:	2310      	movs	r3, #16
 80019f4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019f6:	2302      	movs	r3, #2
 80019f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80019fa:	2302      	movs	r3, #2
 80019fc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80019fe:	2301      	movs	r3, #1
 8001a00:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001a02:	230a      	movs	r3, #10
 8001a04:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001a06:	2307      	movs	r3, #7
 8001a08:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001a0a:	2302      	movs	r3, #2
 8001a0c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001a0e:	2302      	movs	r3, #2
 8001a10:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a12:	f107 0314 	add.w	r3, r7, #20
 8001a16:	4618      	mov	r0, r3
 8001a18:	f003 fd2e 	bl	8005478 <HAL_RCC_OscConfig>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001a22:	f000 fb59 	bl	80020d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a26:	230f      	movs	r3, #15
 8001a28:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a32:	2300      	movs	r3, #0
 8001a34:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a36:	2300      	movs	r3, #0
 8001a38:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001a3a:	463b      	mov	r3, r7
 8001a3c:	2104      	movs	r1, #4
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f004 f900 	bl	8005c44 <HAL_RCC_ClockConfig>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001a4a:	f000 fb45 	bl	80020d8 <Error_Handler>
  }
}
 8001a4e:	bf00      	nop
 8001a50:	3758      	adds	r7, #88	; 0x58
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
	...

08001a58 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b08a      	sub	sp, #40	; 0x28
 8001a5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001a5e:	f107 031c 	add.w	r3, r7, #28
 8001a62:	2200      	movs	r2, #0
 8001a64:	601a      	str	r2, [r3, #0]
 8001a66:	605a      	str	r2, [r3, #4]
 8001a68:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001a6a:	1d3b      	adds	r3, r7, #4
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	601a      	str	r2, [r3, #0]
 8001a70:	605a      	str	r2, [r3, #4]
 8001a72:	609a      	str	r2, [r3, #8]
 8001a74:	60da      	str	r2, [r3, #12]
 8001a76:	611a      	str	r2, [r3, #16]
 8001a78:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001a7a:	4b2f      	ldr	r3, [pc, #188]	; (8001b38 <MX_ADC1_Init+0xe0>)
 8001a7c:	4a2f      	ldr	r2, [pc, #188]	; (8001b3c <MX_ADC1_Init+0xe4>)
 8001a7e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001a80:	4b2d      	ldr	r3, [pc, #180]	; (8001b38 <MX_ADC1_Init+0xe0>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001a86:	4b2c      	ldr	r3, [pc, #176]	; (8001b38 <MX_ADC1_Init+0xe0>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a8c:	4b2a      	ldr	r3, [pc, #168]	; (8001b38 <MX_ADC1_Init+0xe0>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001a92:	4b29      	ldr	r3, [pc, #164]	; (8001b38 <MX_ADC1_Init+0xe0>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001a98:	4b27      	ldr	r3, [pc, #156]	; (8001b38 <MX_ADC1_Init+0xe0>)
 8001a9a:	2204      	movs	r2, #4
 8001a9c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001a9e:	4b26      	ldr	r3, [pc, #152]	; (8001b38 <MX_ADC1_Init+0xe0>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001aa4:	4b24      	ldr	r3, [pc, #144]	; (8001b38 <MX_ADC1_Init+0xe0>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001aaa:	4b23      	ldr	r3, [pc, #140]	; (8001b38 <MX_ADC1_Init+0xe0>)
 8001aac:	2201      	movs	r2, #1
 8001aae:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001ab0:	4b21      	ldr	r3, [pc, #132]	; (8001b38 <MX_ADC1_Init+0xe0>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001ab8:	4b1f      	ldr	r3, [pc, #124]	; (8001b38 <MX_ADC1_Init+0xe0>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001abe:	4b1e      	ldr	r3, [pc, #120]	; (8001b38 <MX_ADC1_Init+0xe0>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001ac4:	4b1c      	ldr	r3, [pc, #112]	; (8001b38 <MX_ADC1_Init+0xe0>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001acc:	4b1a      	ldr	r3, [pc, #104]	; (8001b38 <MX_ADC1_Init+0xe0>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001ad2:	4b19      	ldr	r3, [pc, #100]	; (8001b38 <MX_ADC1_Init+0xe0>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001ada:	4817      	ldr	r0, [pc, #92]	; (8001b38 <MX_ADC1_Init+0xe0>)
 8001adc:	f001 f8ec 	bl	8002cb8 <HAL_ADC_Init>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d001      	beq.n	8001aea <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8001ae6:	f000 faf7 	bl	80020d8 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001aea:	2300      	movs	r3, #0
 8001aec:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001aee:	f107 031c 	add.w	r3, r7, #28
 8001af2:	4619      	mov	r1, r3
 8001af4:	4810      	ldr	r0, [pc, #64]	; (8001b38 <MX_ADC1_Init+0xe0>)
 8001af6:	f002 f84d 	bl	8003b94 <HAL_ADCEx_MultiModeConfigChannel>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d001      	beq.n	8001b04 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001b00:	f000 faea 	bl	80020d8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001b04:	4b0e      	ldr	r3, [pc, #56]	; (8001b40 <MX_ADC1_Init+0xe8>)
 8001b06:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001b08:	2306      	movs	r3, #6
 8001b0a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001b10:	237f      	movs	r3, #127	; 0x7f
 8001b12:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001b14:	2304      	movs	r3, #4
 8001b16:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b1c:	1d3b      	adds	r3, r7, #4
 8001b1e:	4619      	mov	r1, r3
 8001b20:	4805      	ldr	r0, [pc, #20]	; (8001b38 <MX_ADC1_Init+0xe0>)
 8001b22:	f001 fbbf 	bl	80032a4 <HAL_ADC_ConfigChannel>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8001b2c:	f000 fad4 	bl	80020d8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001b30:	bf00      	nop
 8001b32:	3728      	adds	r7, #40	; 0x28
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	20000490 	.word	0x20000490
 8001b3c:	50040000 	.word	0x50040000
 8001b40:	04300002 	.word	0x04300002

08001b44 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b48:	4b1b      	ldr	r3, [pc, #108]	; (8001bb8 <MX_I2C1_Init+0x74>)
 8001b4a:	4a1c      	ldr	r2, [pc, #112]	; (8001bbc <MX_I2C1_Init+0x78>)
 8001b4c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8001b4e:	4b1a      	ldr	r3, [pc, #104]	; (8001bb8 <MX_I2C1_Init+0x74>)
 8001b50:	4a1b      	ldr	r2, [pc, #108]	; (8001bc0 <MX_I2C1_Init+0x7c>)
 8001b52:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001b54:	4b18      	ldr	r3, [pc, #96]	; (8001bb8 <MX_I2C1_Init+0x74>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b5a:	4b17      	ldr	r3, [pc, #92]	; (8001bb8 <MX_I2C1_Init+0x74>)
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b60:	4b15      	ldr	r3, [pc, #84]	; (8001bb8 <MX_I2C1_Init+0x74>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001b66:	4b14      	ldr	r3, [pc, #80]	; (8001bb8 <MX_I2C1_Init+0x74>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001b6c:	4b12      	ldr	r3, [pc, #72]	; (8001bb8 <MX_I2C1_Init+0x74>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b72:	4b11      	ldr	r3, [pc, #68]	; (8001bb8 <MX_I2C1_Init+0x74>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b78:	4b0f      	ldr	r3, [pc, #60]	; (8001bb8 <MX_I2C1_Init+0x74>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b7e:	480e      	ldr	r0, [pc, #56]	; (8001bb8 <MX_I2C1_Init+0x74>)
 8001b80:	f002 fe1a 	bl	80047b8 <HAL_I2C_Init>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001b8a:	f000 faa5 	bl	80020d8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001b8e:	2100      	movs	r1, #0
 8001b90:	4809      	ldr	r0, [pc, #36]	; (8001bb8 <MX_I2C1_Init+0x74>)
 8001b92:	f003 fb75 	bl	8005280 <HAL_I2CEx_ConfigAnalogFilter>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d001      	beq.n	8001ba0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001b9c:	f000 fa9c 	bl	80020d8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001ba0:	2100      	movs	r1, #0
 8001ba2:	4805      	ldr	r0, [pc, #20]	; (8001bb8 <MX_I2C1_Init+0x74>)
 8001ba4:	f003 fbb7 	bl	8005316 <HAL_I2CEx_ConfigDigitalFilter>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001bae:	f000 fa93 	bl	80020d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001bb2:	bf00      	nop
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	200002b4 	.word	0x200002b4
 8001bbc:	40005400 	.word	0x40005400
 8001bc0:	10909cec 	.word	0x10909cec

08001bc4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b08e      	sub	sp, #56	; 0x38
 8001bc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bce:	2200      	movs	r2, #0
 8001bd0:	601a      	str	r2, [r3, #0]
 8001bd2:	605a      	str	r2, [r3, #4]
 8001bd4:	609a      	str	r2, [r3, #8]
 8001bd6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bd8:	f107 031c 	add.w	r3, r7, #28
 8001bdc:	2200      	movs	r2, #0
 8001bde:	601a      	str	r2, [r3, #0]
 8001be0:	605a      	str	r2, [r3, #4]
 8001be2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001be4:	463b      	mov	r3, r7
 8001be6:	2200      	movs	r2, #0
 8001be8:	601a      	str	r2, [r3, #0]
 8001bea:	605a      	str	r2, [r3, #4]
 8001bec:	609a      	str	r2, [r3, #8]
 8001bee:	60da      	str	r2, [r3, #12]
 8001bf0:	611a      	str	r2, [r3, #16]
 8001bf2:	615a      	str	r2, [r3, #20]
 8001bf4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001bf6:	4b2d      	ldr	r3, [pc, #180]	; (8001cac <MX_TIM2_Init+0xe8>)
 8001bf8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001bfc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001bfe:	4b2b      	ldr	r3, [pc, #172]	; (8001cac <MX_TIM2_Init+0xe8>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c04:	4b29      	ldr	r3, [pc, #164]	; (8001cac <MX_TIM2_Init+0xe8>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 79;
 8001c0a:	4b28      	ldr	r3, [pc, #160]	; (8001cac <MX_TIM2_Init+0xe8>)
 8001c0c:	224f      	movs	r2, #79	; 0x4f
 8001c0e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c10:	4b26      	ldr	r3, [pc, #152]	; (8001cac <MX_TIM2_Init+0xe8>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c16:	4b25      	ldr	r3, [pc, #148]	; (8001cac <MX_TIM2_Init+0xe8>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c1c:	4823      	ldr	r0, [pc, #140]	; (8001cac <MX_TIM2_Init+0xe8>)
 8001c1e:	f004 fed3 	bl	80069c8 <HAL_TIM_Base_Init>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d001      	beq.n	8001c2c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001c28:	f000 fa56 	bl	80020d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c30:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c32:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c36:	4619      	mov	r1, r3
 8001c38:	481c      	ldr	r0, [pc, #112]	; (8001cac <MX_TIM2_Init+0xe8>)
 8001c3a:	f005 fba9 	bl	8007390 <HAL_TIM_ConfigClockSource>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d001      	beq.n	8001c48 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001c44:	f000 fa48 	bl	80020d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001c48:	4818      	ldr	r0, [pc, #96]	; (8001cac <MX_TIM2_Init+0xe8>)
 8001c4a:	f004 ff14 	bl	8006a76 <HAL_TIM_PWM_Init>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d001      	beq.n	8001c58 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001c54:	f000 fa40 	bl	80020d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c60:	f107 031c 	add.w	r3, r7, #28
 8001c64:	4619      	mov	r1, r3
 8001c66:	4811      	ldr	r0, [pc, #68]	; (8001cac <MX_TIM2_Init+0xe8>)
 8001c68:	f006 f970 	bl	8007f4c <HAL_TIMEx_MasterConfigSynchronization>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d001      	beq.n	8001c76 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001c72:	f000 fa31 	bl	80020d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c76:	2360      	movs	r3, #96	; 0x60
 8001c78:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c82:	2300      	movs	r3, #0
 8001c84:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c86:	463b      	mov	r3, r7
 8001c88:	2200      	movs	r2, #0
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	4807      	ldr	r0, [pc, #28]	; (8001cac <MX_TIM2_Init+0xe8>)
 8001c8e:	f005 fa6b 	bl	8007168 <HAL_TIM_PWM_ConfigChannel>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d001      	beq.n	8001c9c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001c98:	f000 fa1e 	bl	80020d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001c9c:	4803      	ldr	r0, [pc, #12]	; (8001cac <MX_TIM2_Init+0xe8>)
 8001c9e:	f000 fb79 	bl	8002394 <HAL_TIM_MspPostInit>

}
 8001ca2:	bf00      	nop
 8001ca4:	3738      	adds	r7, #56	; 0x38
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	200018a8 	.word	0x200018a8

08001cb0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001cb4:	4b14      	ldr	r3, [pc, #80]	; (8001d08 <MX_USART1_UART_Init+0x58>)
 8001cb6:	4a15      	ldr	r2, [pc, #84]	; (8001d0c <MX_USART1_UART_Init+0x5c>)
 8001cb8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001cba:	4b13      	ldr	r3, [pc, #76]	; (8001d08 <MX_USART1_UART_Init+0x58>)
 8001cbc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001cc0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001cc2:	4b11      	ldr	r3, [pc, #68]	; (8001d08 <MX_USART1_UART_Init+0x58>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001cc8:	4b0f      	ldr	r3, [pc, #60]	; (8001d08 <MX_USART1_UART_Init+0x58>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001cce:	4b0e      	ldr	r3, [pc, #56]	; (8001d08 <MX_USART1_UART_Init+0x58>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001cd4:	4b0c      	ldr	r3, [pc, #48]	; (8001d08 <MX_USART1_UART_Init+0x58>)
 8001cd6:	220c      	movs	r2, #12
 8001cd8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cda:	4b0b      	ldr	r3, [pc, #44]	; (8001d08 <MX_USART1_UART_Init+0x58>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ce0:	4b09      	ldr	r3, [pc, #36]	; (8001d08 <MX_USART1_UART_Init+0x58>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ce6:	4b08      	ldr	r3, [pc, #32]	; (8001d08 <MX_USART1_UART_Init+0x58>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001cec:	4b06      	ldr	r3, [pc, #24]	; (8001d08 <MX_USART1_UART_Init+0x58>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001cf2:	4805      	ldr	r0, [pc, #20]	; (8001d08 <MX_USART1_UART_Init+0x58>)
 8001cf4:	f006 f9b2 	bl	800805c <HAL_UART_Init>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001cfe:	f000 f9eb 	bl	80020d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d02:	bf00      	nop
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	20001820 	.word	0x20001820
 8001d0c:	40013800 	.word	0x40013800

08001d10 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d14:	4b14      	ldr	r3, [pc, #80]	; (8001d68 <MX_USART2_UART_Init+0x58>)
 8001d16:	4a15      	ldr	r2, [pc, #84]	; (8001d6c <MX_USART2_UART_Init+0x5c>)
 8001d18:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001d1a:	4b13      	ldr	r3, [pc, #76]	; (8001d68 <MX_USART2_UART_Init+0x58>)
 8001d1c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001d20:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d22:	4b11      	ldr	r3, [pc, #68]	; (8001d68 <MX_USART2_UART_Init+0x58>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d28:	4b0f      	ldr	r3, [pc, #60]	; (8001d68 <MX_USART2_UART_Init+0x58>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d2e:	4b0e      	ldr	r3, [pc, #56]	; (8001d68 <MX_USART2_UART_Init+0x58>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d34:	4b0c      	ldr	r3, [pc, #48]	; (8001d68 <MX_USART2_UART_Init+0x58>)
 8001d36:	220c      	movs	r2, #12
 8001d38:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d3a:	4b0b      	ldr	r3, [pc, #44]	; (8001d68 <MX_USART2_UART_Init+0x58>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d40:	4b09      	ldr	r3, [pc, #36]	; (8001d68 <MX_USART2_UART_Init+0x58>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d46:	4b08      	ldr	r3, [pc, #32]	; (8001d68 <MX_USART2_UART_Init+0x58>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d4c:	4b06      	ldr	r3, [pc, #24]	; (8001d68 <MX_USART2_UART_Init+0x58>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d52:	4805      	ldr	r0, [pc, #20]	; (8001d68 <MX_USART2_UART_Init+0x58>)
 8001d54:	f006 f982 	bl	800805c <HAL_UART_Init>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d001      	beq.n	8001d62 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001d5e:	f000 f9bb 	bl	80020d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d62:	bf00      	nop
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	200018f8 	.word	0x200018f8
 8001d6c:	40004400 	.word	0x40004400

08001d70 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001d76:	4b0c      	ldr	r3, [pc, #48]	; (8001da8 <MX_DMA_Init+0x38>)
 8001d78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d7a:	4a0b      	ldr	r2, [pc, #44]	; (8001da8 <MX_DMA_Init+0x38>)
 8001d7c:	f043 0301 	orr.w	r3, r3, #1
 8001d80:	6493      	str	r3, [r2, #72]	; 0x48
 8001d82:	4b09      	ldr	r3, [pc, #36]	; (8001da8 <MX_DMA_Init+0x38>)
 8001d84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d86:	f003 0301 	and.w	r3, r3, #1
 8001d8a:	607b      	str	r3, [r7, #4]
 8001d8c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 1, 0);
 8001d8e:	2200      	movs	r2, #0
 8001d90:	2101      	movs	r1, #1
 8001d92:	200f      	movs	r0, #15
 8001d94:	f002 f889 	bl	8003eaa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001d98:	200f      	movs	r0, #15
 8001d9a:	f002 f8a2 	bl	8003ee2 <HAL_NVIC_EnableIRQ>

}
 8001d9e:	bf00      	nop
 8001da0:	3708      	adds	r7, #8
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	40021000 	.word	0x40021000

08001dac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b08a      	sub	sp, #40	; 0x28
 8001db0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db2:	f107 0314 	add.w	r3, r7, #20
 8001db6:	2200      	movs	r2, #0
 8001db8:	601a      	str	r2, [r3, #0]
 8001dba:	605a      	str	r2, [r3, #4]
 8001dbc:	609a      	str	r2, [r3, #8]
 8001dbe:	60da      	str	r2, [r3, #12]
 8001dc0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dc2:	4b2b      	ldr	r3, [pc, #172]	; (8001e70 <MX_GPIO_Init+0xc4>)
 8001dc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dc6:	4a2a      	ldr	r2, [pc, #168]	; (8001e70 <MX_GPIO_Init+0xc4>)
 8001dc8:	f043 0304 	orr.w	r3, r3, #4
 8001dcc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dce:	4b28      	ldr	r3, [pc, #160]	; (8001e70 <MX_GPIO_Init+0xc4>)
 8001dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dd2:	f003 0304 	and.w	r3, r3, #4
 8001dd6:	613b      	str	r3, [r7, #16]
 8001dd8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001dda:	4b25      	ldr	r3, [pc, #148]	; (8001e70 <MX_GPIO_Init+0xc4>)
 8001ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dde:	4a24      	ldr	r2, [pc, #144]	; (8001e70 <MX_GPIO_Init+0xc4>)
 8001de0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001de4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001de6:	4b22      	ldr	r3, [pc, #136]	; (8001e70 <MX_GPIO_Init+0xc4>)
 8001de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dee:	60fb      	str	r3, [r7, #12]
 8001df0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001df2:	4b1f      	ldr	r3, [pc, #124]	; (8001e70 <MX_GPIO_Init+0xc4>)
 8001df4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001df6:	4a1e      	ldr	r2, [pc, #120]	; (8001e70 <MX_GPIO_Init+0xc4>)
 8001df8:	f043 0301 	orr.w	r3, r3, #1
 8001dfc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dfe:	4b1c      	ldr	r3, [pc, #112]	; (8001e70 <MX_GPIO_Init+0xc4>)
 8001e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e02:	f003 0301 	and.w	r3, r3, #1
 8001e06:	60bb      	str	r3, [r7, #8]
 8001e08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e0a:	4b19      	ldr	r3, [pc, #100]	; (8001e70 <MX_GPIO_Init+0xc4>)
 8001e0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e0e:	4a18      	ldr	r2, [pc, #96]	; (8001e70 <MX_GPIO_Init+0xc4>)
 8001e10:	f043 0302 	orr.w	r3, r3, #2
 8001e14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e16:	4b16      	ldr	r3, [pc, #88]	; (8001e70 <MX_GPIO_Init+0xc4>)
 8001e18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e1a:	f003 0302 	and.w	r3, r3, #2
 8001e1e:	607b      	str	r3, [r7, #4]
 8001e20:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6, GPIO_PIN_RESET);
 8001e22:	2200      	movs	r2, #0
 8001e24:	2160      	movs	r1, #96	; 0x60
 8001e26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e2a:	f002 fcad 	bl	8004788 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001e2e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001e34:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001e38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001e3e:	f107 0314 	add.w	r3, r7, #20
 8001e42:	4619      	mov	r1, r3
 8001e44:	480b      	ldr	r0, [pc, #44]	; (8001e74 <MX_GPIO_Init+0xc8>)
 8001e46:	f002 fadd 	bl	8004404 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA6 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6;
 8001e4a:	2360      	movs	r3, #96	; 0x60
 8001e4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e52:	2300      	movs	r3, #0
 8001e54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e56:	2300      	movs	r3, #0
 8001e58:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e5a:	f107 0314 	add.w	r3, r7, #20
 8001e5e:	4619      	mov	r1, r3
 8001e60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e64:	f002 face 	bl	8004404 <HAL_GPIO_Init>

}
 8001e68:	bf00      	nop
 8001e6a:	3728      	adds	r7, #40	; 0x28
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	40021000 	.word	0x40021000
 8001e74:	48000800 	.word	0x48000800

08001e78 <HAL_UART_RxCpltCallback>:
uint32_t raw = 0;
uint8_t ths, hund, tens, ones;
uint32_t val;
//UART handling ESP->STM
//called when something is received (via interrupt receive)
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
	//data just received is in receive_word[5]
	//Handle GET/SEND requests
	if(receive_word[0] == 'G'){ //if first char of buf is G, it is a GET REQUEST
 8001e80:	4b7b      	ldr	r3, [pc, #492]	; (8002070 <HAL_UART_RxCpltCallback+0x1f8>)
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	2b47      	cmp	r3, #71	; 0x47
 8001e86:	d170      	bne.n	8001f6a <HAL_UART_RxCpltCallback+0xf2>
		raw = 0;
 8001e88:	4b7a      	ldr	r3, [pc, #488]	; (8002074 <HAL_UART_RxCpltCallback+0x1fc>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	601a      	str	r2, [r3, #0]
		if(receive_word[1] == 'M'){ //GET MOISTURE SENSOR VAL
 8001e8e:	4b78      	ldr	r3, [pc, #480]	; (8002070 <HAL_UART_RxCpltCallback+0x1f8>)
 8001e90:	785b      	ldrb	r3, [r3, #1]
 8001e92:	2b4d      	cmp	r3, #77	; 0x4d
 8001e94:	d104      	bne.n	8001ea0 <HAL_UART_RxCpltCallback+0x28>
			//return moisture sensor value in 4 bytes
			raw = raw_moist;
 8001e96:	4b78      	ldr	r3, [pc, #480]	; (8002078 <HAL_UART_RxCpltCallback+0x200>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a76      	ldr	r2, [pc, #472]	; (8002074 <HAL_UART_RxCpltCallback+0x1fc>)
 8001e9c:	6013      	str	r3, [r2, #0]
 8001e9e:	e01c      	b.n	8001eda <HAL_UART_RxCpltCallback+0x62>
		}else if(receive_word[1] == 'L'){
 8001ea0:	4b73      	ldr	r3, [pc, #460]	; (8002070 <HAL_UART_RxCpltCallback+0x1f8>)
 8001ea2:	785b      	ldrb	r3, [r3, #1]
 8001ea4:	2b4c      	cmp	r3, #76	; 0x4c
 8001ea6:	d118      	bne.n	8001eda <HAL_UART_RxCpltCallback+0x62>
			if(receive_word[2] == 'U' && receive_word[3] == 'X'){//GET AMBIENT LIGHT SENSOR VAL
 8001ea8:	4b71      	ldr	r3, [pc, #452]	; (8002070 <HAL_UART_RxCpltCallback+0x1f8>)
 8001eaa:	789b      	ldrb	r3, [r3, #2]
 8001eac:	2b55      	cmp	r3, #85	; 0x55
 8001eae:	d108      	bne.n	8001ec2 <HAL_UART_RxCpltCallback+0x4a>
 8001eb0:	4b6f      	ldr	r3, [pc, #444]	; (8002070 <HAL_UART_RxCpltCallback+0x1f8>)
 8001eb2:	78db      	ldrb	r3, [r3, #3]
 8001eb4:	2b58      	cmp	r3, #88	; 0x58
 8001eb6:	d104      	bne.n	8001ec2 <HAL_UART_RxCpltCallback+0x4a>
				//return ambient light sensor val in 4 bytes
				raw = raw_lux;
 8001eb8:	4b70      	ldr	r3, [pc, #448]	; (800207c <HAL_UART_RxCpltCallback+0x204>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a6d      	ldr	r2, [pc, #436]	; (8002074 <HAL_UART_RxCpltCallback+0x1fc>)
 8001ebe:	6013      	str	r3, [r2, #0]
 8001ec0:	e00b      	b.n	8001eda <HAL_UART_RxCpltCallback+0x62>
			}else if(receive_word[2] == 'E' && receive_word[3] == 'D'){
 8001ec2:	4b6b      	ldr	r3, [pc, #428]	; (8002070 <HAL_UART_RxCpltCallback+0x1f8>)
 8001ec4:	789b      	ldrb	r3, [r3, #2]
 8001ec6:	2b45      	cmp	r3, #69	; 0x45
 8001ec8:	d107      	bne.n	8001eda <HAL_UART_RxCpltCallback+0x62>
 8001eca:	4b69      	ldr	r3, [pc, #420]	; (8002070 <HAL_UART_RxCpltCallback+0x1f8>)
 8001ecc:	78db      	ldrb	r3, [r3, #3]
 8001ece:	2b44      	cmp	r3, #68	; 0x44
 8001ed0:	d103      	bne.n	8001eda <HAL_UART_RxCpltCallback+0x62>
				//return cur brightness val in 4 bytes
				raw = brightness;
 8001ed2:	4b6b      	ldr	r3, [pc, #428]	; (8002080 <HAL_UART_RxCpltCallback+0x208>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a67      	ldr	r2, [pc, #412]	; (8002074 <HAL_UART_RxCpltCallback+0x1fc>)
 8001ed8:	6013      	str	r3, [r2, #0]
			}
		}
		//turn raw 32_bit num into string
		send_word[0] = raw/1000 + 48;
 8001eda:	4b66      	ldr	r3, [pc, #408]	; (8002074 <HAL_UART_RxCpltCallback+0x1fc>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a69      	ldr	r2, [pc, #420]	; (8002084 <HAL_UART_RxCpltCallback+0x20c>)
 8001ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ee4:	099b      	lsrs	r3, r3, #6
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	3330      	adds	r3, #48	; 0x30
 8001eea:	b2da      	uxtb	r2, r3
 8001eec:	4b66      	ldr	r3, [pc, #408]	; (8002088 <HAL_UART_RxCpltCallback+0x210>)
 8001eee:	701a      	strb	r2, [r3, #0]
		send_word[1] = (raw%1000)/100 + 48;
 8001ef0:	4b60      	ldr	r3, [pc, #384]	; (8002074 <HAL_UART_RxCpltCallback+0x1fc>)
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	4b63      	ldr	r3, [pc, #396]	; (8002084 <HAL_UART_RxCpltCallback+0x20c>)
 8001ef6:	fba3 1302 	umull	r1, r3, r3, r2
 8001efa:	099b      	lsrs	r3, r3, #6
 8001efc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001f00:	fb01 f303 	mul.w	r3, r1, r3
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	4a61      	ldr	r2, [pc, #388]	; (800208c <HAL_UART_RxCpltCallback+0x214>)
 8001f08:	fba2 2303 	umull	r2, r3, r2, r3
 8001f0c:	095b      	lsrs	r3, r3, #5
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	3330      	adds	r3, #48	; 0x30
 8001f12:	b2da      	uxtb	r2, r3
 8001f14:	4b5c      	ldr	r3, [pc, #368]	; (8002088 <HAL_UART_RxCpltCallback+0x210>)
 8001f16:	705a      	strb	r2, [r3, #1]
		send_word[2] = (raw%100)/10 + 48;
 8001f18:	4b56      	ldr	r3, [pc, #344]	; (8002074 <HAL_UART_RxCpltCallback+0x1fc>)
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	4b5b      	ldr	r3, [pc, #364]	; (800208c <HAL_UART_RxCpltCallback+0x214>)
 8001f1e:	fba3 1302 	umull	r1, r3, r3, r2
 8001f22:	095b      	lsrs	r3, r3, #5
 8001f24:	2164      	movs	r1, #100	; 0x64
 8001f26:	fb01 f303 	mul.w	r3, r1, r3
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	4a58      	ldr	r2, [pc, #352]	; (8002090 <HAL_UART_RxCpltCallback+0x218>)
 8001f2e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f32:	08db      	lsrs	r3, r3, #3
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	3330      	adds	r3, #48	; 0x30
 8001f38:	b2da      	uxtb	r2, r3
 8001f3a:	4b53      	ldr	r3, [pc, #332]	; (8002088 <HAL_UART_RxCpltCallback+0x210>)
 8001f3c:	709a      	strb	r2, [r3, #2]
		send_word[3] = raw%10 + 48;
 8001f3e:	4b4d      	ldr	r3, [pc, #308]	; (8002074 <HAL_UART_RxCpltCallback+0x1fc>)
 8001f40:	6819      	ldr	r1, [r3, #0]
 8001f42:	4b53      	ldr	r3, [pc, #332]	; (8002090 <HAL_UART_RxCpltCallback+0x218>)
 8001f44:	fba3 2301 	umull	r2, r3, r3, r1
 8001f48:	08da      	lsrs	r2, r3, #3
 8001f4a:	4613      	mov	r3, r2
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	4413      	add	r3, r2
 8001f50:	005b      	lsls	r3, r3, #1
 8001f52:	1aca      	subs	r2, r1, r3
 8001f54:	b2d3      	uxtb	r3, r2
 8001f56:	3330      	adds	r3, #48	; 0x30
 8001f58:	b2da      	uxtb	r2, r3
 8001f5a:	4b4b      	ldr	r3, [pc, #300]	; (8002088 <HAL_UART_RxCpltCallback+0x210>)
 8001f5c:	70da      	strb	r2, [r3, #3]
		//send back the requested data
		HAL_UART_Transmit_IT(&huart1, send_word, 5);
 8001f5e:	2205      	movs	r2, #5
 8001f60:	4949      	ldr	r1, [pc, #292]	; (8002088 <HAL_UART_RxCpltCallback+0x210>)
 8001f62:	484c      	ldr	r0, [pc, #304]	; (8002094 <HAL_UART_RxCpltCallback+0x21c>)
 8001f64:	f006 f8c8 	bl	80080f8 <HAL_UART_Transmit_IT>
	}else{
		//if valid command isn't received, send back an empty word
		HAL_UART_Transmit_IT(&huart1, empty_word, 5); //send back the response
	}

}
 8001f68:	e07e      	b.n	8002068 <HAL_UART_RxCpltCallback+0x1f0>
	}else if(receive_word[0] == 'S'){ //if first char of buf is S, it is a SEND REQUEST
 8001f6a:	4b41      	ldr	r3, [pc, #260]	; (8002070 <HAL_UART_RxCpltCallback+0x1f8>)
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	2b53      	cmp	r3, #83	; 0x53
 8001f70:	d175      	bne.n	800205e <HAL_UART_RxCpltCallback+0x1e6>
		if(receive_word[1] == 'W'){ //SEND WATER COMMANDS
 8001f72:	4b3f      	ldr	r3, [pc, #252]	; (8002070 <HAL_UART_RxCpltCallback+0x1f8>)
 8001f74:	785b      	ldrb	r3, [r3, #1]
 8001f76:	2b57      	cmp	r3, #87	; 0x57
 8001f78:	d127      	bne.n	8001fca <HAL_UART_RxCpltCallback+0x152>
			if(receive_word[2] == 'O' && receive_word[3] == 'N'){ //WATER ON
 8001f7a:	4b3d      	ldr	r3, [pc, #244]	; (8002070 <HAL_UART_RxCpltCallback+0x1f8>)
 8001f7c:	789b      	ldrb	r3, [r3, #2]
 8001f7e:	2b4f      	cmp	r3, #79	; 0x4f
 8001f80:	d10f      	bne.n	8001fa2 <HAL_UART_RxCpltCallback+0x12a>
 8001f82:	4b3b      	ldr	r3, [pc, #236]	; (8002070 <HAL_UART_RxCpltCallback+0x1f8>)
 8001f84:	78db      	ldrb	r3, [r3, #3]
 8001f86:	2b4e      	cmp	r3, #78	; 0x4e
 8001f88:	d10b      	bne.n	8001fa2 <HAL_UART_RxCpltCallback+0x12a>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	2140      	movs	r1, #64	; 0x40
 8001f8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f92:	f002 fbf9 	bl	8004788 <HAL_GPIO_WritePin>
				HAL_UART_Transmit_IT(&huart1, done_word, 5);
 8001f96:	2205      	movs	r2, #5
 8001f98:	493f      	ldr	r1, [pc, #252]	; (8002098 <HAL_UART_RxCpltCallback+0x220>)
 8001f9a:	483e      	ldr	r0, [pc, #248]	; (8002094 <HAL_UART_RxCpltCallback+0x21c>)
 8001f9c:	f006 f8ac 	bl	80080f8 <HAL_UART_Transmit_IT>
}
 8001fa0:	e062      	b.n	8002068 <HAL_UART_RxCpltCallback+0x1f0>
			}else if(receive_word[2] == 'O' && receive_word[3] == 'F'){ //WATER OFF
 8001fa2:	4b33      	ldr	r3, [pc, #204]	; (8002070 <HAL_UART_RxCpltCallback+0x1f8>)
 8001fa4:	789b      	ldrb	r3, [r3, #2]
 8001fa6:	2b4f      	cmp	r3, #79	; 0x4f
 8001fa8:	d15e      	bne.n	8002068 <HAL_UART_RxCpltCallback+0x1f0>
 8001faa:	4b31      	ldr	r3, [pc, #196]	; (8002070 <HAL_UART_RxCpltCallback+0x1f8>)
 8001fac:	78db      	ldrb	r3, [r3, #3]
 8001fae:	2b46      	cmp	r3, #70	; 0x46
 8001fb0:	d15a      	bne.n	8002068 <HAL_UART_RxCpltCallback+0x1f0>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	2140      	movs	r1, #64	; 0x40
 8001fb6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fba:	f002 fbe5 	bl	8004788 <HAL_GPIO_WritePin>
				HAL_UART_Transmit_IT(&huart1, done_word, 5);
 8001fbe:	2205      	movs	r2, #5
 8001fc0:	4935      	ldr	r1, [pc, #212]	; (8002098 <HAL_UART_RxCpltCallback+0x220>)
 8001fc2:	4834      	ldr	r0, [pc, #208]	; (8002094 <HAL_UART_RxCpltCallback+0x21c>)
 8001fc4:	f006 f898 	bl	80080f8 <HAL_UART_Transmit_IT>
}
 8001fc8:	e04e      	b.n	8002068 <HAL_UART_RxCpltCallback+0x1f0>
		}else if(receive_word[1] == 'L'){ //SEND LED COMMANDS
 8001fca:	4b29      	ldr	r3, [pc, #164]	; (8002070 <HAL_UART_RxCpltCallback+0x1f8>)
 8001fcc:	785b      	ldrb	r3, [r3, #1]
 8001fce:	2b4c      	cmp	r3, #76	; 0x4c
 8001fd0:	d14a      	bne.n	8002068 <HAL_UART_RxCpltCallback+0x1f0>
			if(receive_word[2] == 'M'){ //MODE SETTING COMMANDS
 8001fd2:	4b27      	ldr	r3, [pc, #156]	; (8002070 <HAL_UART_RxCpltCallback+0x1f8>)
 8001fd4:	789b      	ldrb	r3, [r3, #2]
 8001fd6:	2b4d      	cmp	r3, #77	; 0x4d
 8001fd8:	d119      	bne.n	800200e <HAL_UART_RxCpltCallback+0x196>
				if(receive_word[3] == 'M'){ //MANUAL MODE
 8001fda:	4b25      	ldr	r3, [pc, #148]	; (8002070 <HAL_UART_RxCpltCallback+0x1f8>)
 8001fdc:	78db      	ldrb	r3, [r3, #3]
 8001fde:	2b4d      	cmp	r3, #77	; 0x4d
 8001fe0:	d108      	bne.n	8001ff4 <HAL_UART_RxCpltCallback+0x17c>
					auto_brightness_flag = 0;
 8001fe2:	4b2e      	ldr	r3, [pc, #184]	; (800209c <HAL_UART_RxCpltCallback+0x224>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_IT(&huart1, done_word, 5);
 8001fe8:	2205      	movs	r2, #5
 8001fea:	492b      	ldr	r1, [pc, #172]	; (8002098 <HAL_UART_RxCpltCallback+0x220>)
 8001fec:	4829      	ldr	r0, [pc, #164]	; (8002094 <HAL_UART_RxCpltCallback+0x21c>)
 8001fee:	f006 f883 	bl	80080f8 <HAL_UART_Transmit_IT>
}
 8001ff2:	e039      	b.n	8002068 <HAL_UART_RxCpltCallback+0x1f0>
				}else if(receive_word[3] == 'A'){ //AUTOMATIC MODE
 8001ff4:	4b1e      	ldr	r3, [pc, #120]	; (8002070 <HAL_UART_RxCpltCallback+0x1f8>)
 8001ff6:	78db      	ldrb	r3, [r3, #3]
 8001ff8:	2b41      	cmp	r3, #65	; 0x41
 8001ffa:	d135      	bne.n	8002068 <HAL_UART_RxCpltCallback+0x1f0>
					auto_brightness_flag = 1;
 8001ffc:	4b27      	ldr	r3, [pc, #156]	; (800209c <HAL_UART_RxCpltCallback+0x224>)
 8001ffe:	2201      	movs	r2, #1
 8002000:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_IT(&huart1, done_word, 5);
 8002002:	2205      	movs	r2, #5
 8002004:	4924      	ldr	r1, [pc, #144]	; (8002098 <HAL_UART_RxCpltCallback+0x220>)
 8002006:	4823      	ldr	r0, [pc, #140]	; (8002094 <HAL_UART_RxCpltCallback+0x21c>)
 8002008:	f006 f876 	bl	80080f8 <HAL_UART_Transmit_IT>
}
 800200c:	e02c      	b.n	8002068 <HAL_UART_RxCpltCallback+0x1f0>
				if(auto_brightness_flag == 0){
 800200e:	4b23      	ldr	r3, [pc, #140]	; (800209c <HAL_UART_RxCpltCallback+0x224>)
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d11d      	bne.n	8002052 <HAL_UART_RxCpltCallback+0x1da>
					tens = receive_word[2] - 48;
 8002016:	4b16      	ldr	r3, [pc, #88]	; (8002070 <HAL_UART_RxCpltCallback+0x1f8>)
 8002018:	789b      	ldrb	r3, [r3, #2]
 800201a:	3b30      	subs	r3, #48	; 0x30
 800201c:	b2da      	uxtb	r2, r3
 800201e:	4b20      	ldr	r3, [pc, #128]	; (80020a0 <HAL_UART_RxCpltCallback+0x228>)
 8002020:	701a      	strb	r2, [r3, #0]
					ones = receive_word[3] - 48;
 8002022:	4b13      	ldr	r3, [pc, #76]	; (8002070 <HAL_UART_RxCpltCallback+0x1f8>)
 8002024:	78db      	ldrb	r3, [r3, #3]
 8002026:	3b30      	subs	r3, #48	; 0x30
 8002028:	b2da      	uxtb	r2, r3
 800202a:	4b1e      	ldr	r3, [pc, #120]	; (80020a4 <HAL_UART_RxCpltCallback+0x22c>)
 800202c:	701a      	strb	r2, [r3, #0]
					val = tens*10 + ones;
 800202e:	4b1c      	ldr	r3, [pc, #112]	; (80020a0 <HAL_UART_RxCpltCallback+0x228>)
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	461a      	mov	r2, r3
 8002034:	4613      	mov	r3, r2
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	4413      	add	r3, r2
 800203a:	005b      	lsls	r3, r3, #1
 800203c:	461a      	mov	r2, r3
 800203e:	4b19      	ldr	r3, [pc, #100]	; (80020a4 <HAL_UART_RxCpltCallback+0x22c>)
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	4413      	add	r3, r2
 8002044:	461a      	mov	r2, r3
 8002046:	4b18      	ldr	r3, [pc, #96]	; (80020a8 <HAL_UART_RxCpltCallback+0x230>)
 8002048:	601a      	str	r2, [r3, #0]
					new_brightness = val;
 800204a:	4b17      	ldr	r3, [pc, #92]	; (80020a8 <HAL_UART_RxCpltCallback+0x230>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a17      	ldr	r2, [pc, #92]	; (80020ac <HAL_UART_RxCpltCallback+0x234>)
 8002050:	6013      	str	r3, [r2, #0]
				HAL_UART_Transmit_IT(&huart1, done_word, 5);
 8002052:	2205      	movs	r2, #5
 8002054:	4910      	ldr	r1, [pc, #64]	; (8002098 <HAL_UART_RxCpltCallback+0x220>)
 8002056:	480f      	ldr	r0, [pc, #60]	; (8002094 <HAL_UART_RxCpltCallback+0x21c>)
 8002058:	f006 f84e 	bl	80080f8 <HAL_UART_Transmit_IT>
}
 800205c:	e004      	b.n	8002068 <HAL_UART_RxCpltCallback+0x1f0>
		HAL_UART_Transmit_IT(&huart1, empty_word, 5); //send back the response
 800205e:	2205      	movs	r2, #5
 8002060:	4913      	ldr	r1, [pc, #76]	; (80020b0 <HAL_UART_RxCpltCallback+0x238>)
 8002062:	480c      	ldr	r0, [pc, #48]	; (8002094 <HAL_UART_RxCpltCallback+0x21c>)
 8002064:	f006 f848 	bl	80080f8 <HAL_UART_Transmit_IT>
}
 8002068:	bf00      	nop
 800206a:	3708      	adds	r7, #8
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	2000009c 	.word	0x2000009c
 8002074:	200000c4 	.word	0x200000c4
 8002078:	200000bc 	.word	0x200000bc
 800207c:	200000c0 	.word	0x200000c0
 8002080:	200000b4 	.word	0x200000b4
 8002084:	10624dd3 	.word	0x10624dd3
 8002088:	200000a4 	.word	0x200000a4
 800208c:	51eb851f 	.word	0x51eb851f
 8002090:	cccccccd 	.word	0xcccccccd
 8002094:	20001820 	.word	0x20001820
 8002098:	20000000 	.word	0x20000000
 800209c:	20000005 	.word	0x20000005
 80020a0:	200018a4 	.word	0x200018a4
 80020a4:	200002b0 	.word	0x200002b0
 80020a8:	2000181c 	.word	0x2000181c
 80020ac:	200000b8 	.word	0x200000b8
 80020b0:	200000ac 	.word	0x200000ac

080020b4 <HAL_UART_TxCpltCallback>:

//called when something is sent (via interrupt transmit)
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, receive_word, 5); //start the receive for the next word
 80020bc:	2205      	movs	r2, #5
 80020be:	4904      	ldr	r1, [pc, #16]	; (80020d0 <HAL_UART_TxCpltCallback+0x1c>)
 80020c0:	4804      	ldr	r0, [pc, #16]	; (80020d4 <HAL_UART_TxCpltCallback+0x20>)
 80020c2:	f006 f887 	bl	80081d4 <HAL_UART_Receive_IT>
}
 80020c6:	bf00      	nop
 80020c8:	3708      	adds	r7, #8
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	2000009c 	.word	0x2000009c
 80020d4:	20001820 	.word	0x20001820

080020d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020dc:	b672      	cpsid	i
}
 80020de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020e0:	e7fe      	b.n	80020e0 <Error_Handler+0x8>
	...

080020e4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020ea:	4b20      	ldr	r3, [pc, #128]	; (800216c <HAL_MspInit+0x88>)
 80020ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020ee:	4a1f      	ldr	r2, [pc, #124]	; (800216c <HAL_MspInit+0x88>)
 80020f0:	f043 0301 	orr.w	r3, r3, #1
 80020f4:	6613      	str	r3, [r2, #96]	; 0x60
 80020f6:	4b1d      	ldr	r3, [pc, #116]	; (800216c <HAL_MspInit+0x88>)
 80020f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020fa:	f003 0301 	and.w	r3, r3, #1
 80020fe:	607b      	str	r3, [r7, #4]
 8002100:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002102:	4b1a      	ldr	r3, [pc, #104]	; (800216c <HAL_MspInit+0x88>)
 8002104:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002106:	4a19      	ldr	r2, [pc, #100]	; (800216c <HAL_MspInit+0x88>)
 8002108:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800210c:	6593      	str	r3, [r2, #88]	; 0x58
 800210e:	4b17      	ldr	r3, [pc, #92]	; (800216c <HAL_MspInit+0x88>)
 8002110:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002112:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002116:	603b      	str	r3, [r7, #0]
 8002118:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 1, 0);
 800211a:	2200      	movs	r2, #0
 800211c:	2101      	movs	r1, #1
 800211e:	f06f 000b 	mvn.w	r0, #11
 8002122:	f001 fec2 	bl	8003eaa <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 1, 0);
 8002126:	2200      	movs	r2, #0
 8002128:	2101      	movs	r1, #1
 800212a:	f06f 000a 	mvn.w	r0, #10
 800212e:	f001 febc 	bl	8003eaa <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 1, 0);
 8002132:	2200      	movs	r2, #0
 8002134:	2101      	movs	r1, #1
 8002136:	f06f 0009 	mvn.w	r0, #9
 800213a:	f001 feb6 	bl	8003eaa <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 1, 0);
 800213e:	2200      	movs	r2, #0
 8002140:	2101      	movs	r1, #1
 8002142:	f06f 0004 	mvn.w	r0, #4
 8002146:	f001 feb0 	bl	8003eaa <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 1, 0);
 800214a:	2200      	movs	r2, #0
 800214c:	2101      	movs	r1, #1
 800214e:	f06f 0003 	mvn.w	r0, #3
 8002152:	f001 feaa 	bl	8003eaa <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 1, 0);
 8002156:	2200      	movs	r2, #0
 8002158:	2101      	movs	r1, #1
 800215a:	f06f 0001 	mvn.w	r0, #1
 800215e:	f001 fea4 	bl	8003eaa <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002162:	bf00      	nop
 8002164:	3708      	adds	r7, #8
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	40021000 	.word	0x40021000

08002170 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b0ac      	sub	sp, #176	; 0xb0
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002178:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800217c:	2200      	movs	r2, #0
 800217e:	601a      	str	r2, [r3, #0]
 8002180:	605a      	str	r2, [r3, #4]
 8002182:	609a      	str	r2, [r3, #8]
 8002184:	60da      	str	r2, [r3, #12]
 8002186:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002188:	f107 0314 	add.w	r3, r7, #20
 800218c:	2288      	movs	r2, #136	; 0x88
 800218e:	2100      	movs	r1, #0
 8002190:	4618      	mov	r0, r3
 8002192:	f007 fb65 	bl	8009860 <memset>
  if(hadc->Instance==ADC1)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a27      	ldr	r2, [pc, #156]	; (8002238 <HAL_ADC_MspInit+0xc8>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d146      	bne.n	800222e <HAL_ADC_MspInit+0xbe>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80021a0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80021a4:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80021a6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80021aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80021ae:	2302      	movs	r3, #2
 80021b0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80021b2:	2301      	movs	r3, #1
 80021b4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80021b6:	2308      	movs	r3, #8
 80021b8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80021ba:	2307      	movs	r3, #7
 80021bc:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80021be:	2302      	movs	r3, #2
 80021c0:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80021c2:	2302      	movs	r3, #2
 80021c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80021c6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80021ca:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021cc:	f107 0314 	add.w	r3, r7, #20
 80021d0:	4618      	mov	r0, r3
 80021d2:	f003 ff3d 	bl	8006050 <HAL_RCCEx_PeriphCLKConfig>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d001      	beq.n	80021e0 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80021dc:	f7ff ff7c 	bl	80020d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80021e0:	4b16      	ldr	r3, [pc, #88]	; (800223c <HAL_ADC_MspInit+0xcc>)
 80021e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021e4:	4a15      	ldr	r2, [pc, #84]	; (800223c <HAL_ADC_MspInit+0xcc>)
 80021e6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80021ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021ec:	4b13      	ldr	r3, [pc, #76]	; (800223c <HAL_ADC_MspInit+0xcc>)
 80021ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021f4:	613b      	str	r3, [r7, #16]
 80021f6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021f8:	4b10      	ldr	r3, [pc, #64]	; (800223c <HAL_ADC_MspInit+0xcc>)
 80021fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021fc:	4a0f      	ldr	r2, [pc, #60]	; (800223c <HAL_ADC_MspInit+0xcc>)
 80021fe:	f043 0304 	orr.w	r3, r3, #4
 8002202:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002204:	4b0d      	ldr	r3, [pc, #52]	; (800223c <HAL_ADC_MspInit+0xcc>)
 8002206:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002208:	f003 0304 	and.w	r3, r3, #4
 800220c:	60fb      	str	r3, [r7, #12]
 800220e:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002210:	2301      	movs	r3, #1
 8002212:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002216:	230b      	movs	r3, #11
 8002218:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221c:	2300      	movs	r3, #0
 800221e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002222:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002226:	4619      	mov	r1, r3
 8002228:	4805      	ldr	r0, [pc, #20]	; (8002240 <HAL_ADC_MspInit+0xd0>)
 800222a:	f002 f8eb 	bl	8004404 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800222e:	bf00      	nop
 8002230:	37b0      	adds	r7, #176	; 0xb0
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	50040000 	.word	0x50040000
 800223c:	40021000 	.word	0x40021000
 8002240:	48000800 	.word	0x48000800

08002244 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b0ac      	sub	sp, #176	; 0xb0
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800224c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002250:	2200      	movs	r2, #0
 8002252:	601a      	str	r2, [r3, #0]
 8002254:	605a      	str	r2, [r3, #4]
 8002256:	609a      	str	r2, [r3, #8]
 8002258:	60da      	str	r2, [r3, #12]
 800225a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800225c:	f107 0314 	add.w	r3, r7, #20
 8002260:	2288      	movs	r2, #136	; 0x88
 8002262:	2100      	movs	r1, #0
 8002264:	4618      	mov	r0, r3
 8002266:	f007 fafb 	bl	8009860 <memset>
  if(hi2c->Instance==I2C1)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a21      	ldr	r2, [pc, #132]	; (80022f4 <HAL_I2C_MspInit+0xb0>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d13a      	bne.n	80022ea <HAL_I2C_MspInit+0xa6>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002274:	2340      	movs	r3, #64	; 0x40
 8002276:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002278:	2300      	movs	r3, #0
 800227a:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800227c:	f107 0314 	add.w	r3, r7, #20
 8002280:	4618      	mov	r0, r3
 8002282:	f003 fee5 	bl	8006050 <HAL_RCCEx_PeriphCLKConfig>
 8002286:	4603      	mov	r3, r0
 8002288:	2b00      	cmp	r3, #0
 800228a:	d001      	beq.n	8002290 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800228c:	f7ff ff24 	bl	80020d8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002290:	4b19      	ldr	r3, [pc, #100]	; (80022f8 <HAL_I2C_MspInit+0xb4>)
 8002292:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002294:	4a18      	ldr	r2, [pc, #96]	; (80022f8 <HAL_I2C_MspInit+0xb4>)
 8002296:	f043 0302 	orr.w	r3, r3, #2
 800229a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800229c:	4b16      	ldr	r3, [pc, #88]	; (80022f8 <HAL_I2C_MspInit+0xb4>)
 800229e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022a0:	f003 0302 	and.w	r3, r3, #2
 80022a4:	613b      	str	r3, [r7, #16]
 80022a6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80022a8:	23c0      	movs	r3, #192	; 0xc0
 80022aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022ae:	2312      	movs	r3, #18
 80022b0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b4:	2300      	movs	r3, #0
 80022b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022ba:	2303      	movs	r3, #3
 80022bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80022c0:	2304      	movs	r3, #4
 80022c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022c6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80022ca:	4619      	mov	r1, r3
 80022cc:	480b      	ldr	r0, [pc, #44]	; (80022fc <HAL_I2C_MspInit+0xb8>)
 80022ce:	f002 f899 	bl	8004404 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80022d2:	4b09      	ldr	r3, [pc, #36]	; (80022f8 <HAL_I2C_MspInit+0xb4>)
 80022d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022d6:	4a08      	ldr	r2, [pc, #32]	; (80022f8 <HAL_I2C_MspInit+0xb4>)
 80022d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80022dc:	6593      	str	r3, [r2, #88]	; 0x58
 80022de:	4b06      	ldr	r3, [pc, #24]	; (80022f8 <HAL_I2C_MspInit+0xb4>)
 80022e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022e6:	60fb      	str	r3, [r7, #12]
 80022e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80022ea:	bf00      	nop
 80022ec:	37b0      	adds	r7, #176	; 0xb0
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	40005400 	.word	0x40005400
 80022f8:	40021000 	.word	0x40021000
 80022fc:	48000400 	.word	0x48000400

08002300 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b084      	sub	sp, #16
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002310:	d136      	bne.n	8002380 <HAL_TIM_Base_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002312:	4b1d      	ldr	r3, [pc, #116]	; (8002388 <HAL_TIM_Base_MspInit+0x88>)
 8002314:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002316:	4a1c      	ldr	r2, [pc, #112]	; (8002388 <HAL_TIM_Base_MspInit+0x88>)
 8002318:	f043 0301 	orr.w	r3, r3, #1
 800231c:	6593      	str	r3, [r2, #88]	; 0x58
 800231e:	4b1a      	ldr	r3, [pc, #104]	; (8002388 <HAL_TIM_Base_MspInit+0x88>)
 8002320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002322:	f003 0301 	and.w	r3, r3, #1
 8002326:	60fb      	str	r3, [r7, #12]
 8002328:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 800232a:	4b18      	ldr	r3, [pc, #96]	; (800238c <HAL_TIM_Base_MspInit+0x8c>)
 800232c:	4a18      	ldr	r2, [pc, #96]	; (8002390 <HAL_TIM_Base_MspInit+0x90>)
 800232e:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Request = DMA_REQUEST_4;
 8002330:	4b16      	ldr	r3, [pc, #88]	; (800238c <HAL_TIM_Base_MspInit+0x8c>)
 8002332:	2204      	movs	r2, #4
 8002334:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002336:	4b15      	ldr	r3, [pc, #84]	; (800238c <HAL_TIM_Base_MspInit+0x8c>)
 8002338:	2210      	movs	r2, #16
 800233a:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800233c:	4b13      	ldr	r3, [pc, #76]	; (800238c <HAL_TIM_Base_MspInit+0x8c>)
 800233e:	2200      	movs	r2, #0
 8002340:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002342:	4b12      	ldr	r3, [pc, #72]	; (800238c <HAL_TIM_Base_MspInit+0x8c>)
 8002344:	2280      	movs	r2, #128	; 0x80
 8002346:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002348:	4b10      	ldr	r3, [pc, #64]	; (800238c <HAL_TIM_Base_MspInit+0x8c>)
 800234a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800234e:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002350:	4b0e      	ldr	r3, [pc, #56]	; (800238c <HAL_TIM_Base_MspInit+0x8c>)
 8002352:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002356:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 8002358:	4b0c      	ldr	r3, [pc, #48]	; (800238c <HAL_TIM_Base_MspInit+0x8c>)
 800235a:	2200      	movs	r2, #0
 800235c:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800235e:	4b0b      	ldr	r3, [pc, #44]	; (800238c <HAL_TIM_Base_MspInit+0x8c>)
 8002360:	2200      	movs	r2, #0
 8002362:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8002364:	4809      	ldr	r0, [pc, #36]	; (800238c <HAL_TIM_Base_MspInit+0x8c>)
 8002366:	f001 fdd7 	bl	8003f18 <HAL_DMA_Init>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d001      	beq.n	8002374 <HAL_TIM_Base_MspInit+0x74>
    {
      Error_Handler();
 8002370:	f7ff feb2 	bl	80020d8 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	4a05      	ldr	r2, [pc, #20]	; (800238c <HAL_TIM_Base_MspInit+0x8c>)
 8002378:	625a      	str	r2, [r3, #36]	; 0x24
 800237a:	4a04      	ldr	r2, [pc, #16]	; (800238c <HAL_TIM_Base_MspInit+0x8c>)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002380:	bf00      	nop
 8002382:	3710      	adds	r7, #16
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}
 8002388:	40021000 	.word	0x40021000
 800238c:	200000d8 	.word	0x200000d8
 8002390:	40020058 	.word	0x40020058

08002394 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b088      	sub	sp, #32
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800239c:	f107 030c 	add.w	r3, r7, #12
 80023a0:	2200      	movs	r2, #0
 80023a2:	601a      	str	r2, [r3, #0]
 80023a4:	605a      	str	r2, [r3, #4]
 80023a6:	609a      	str	r2, [r3, #8]
 80023a8:	60da      	str	r2, [r3, #12]
 80023aa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023b4:	d11c      	bne.n	80023f0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023b6:	4b10      	ldr	r3, [pc, #64]	; (80023f8 <HAL_TIM_MspPostInit+0x64>)
 80023b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023ba:	4a0f      	ldr	r2, [pc, #60]	; (80023f8 <HAL_TIM_MspPostInit+0x64>)
 80023bc:	f043 0301 	orr.w	r3, r3, #1
 80023c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023c2:	4b0d      	ldr	r3, [pc, #52]	; (80023f8 <HAL_TIM_MspPostInit+0x64>)
 80023c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023c6:	f003 0301 	and.w	r3, r3, #1
 80023ca:	60bb      	str	r3, [r7, #8]
 80023cc:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80023ce:	2301      	movs	r3, #1
 80023d0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023d2:	2302      	movs	r3, #2
 80023d4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d6:	2300      	movs	r3, #0
 80023d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023da:	2300      	movs	r3, #0
 80023dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80023de:	2301      	movs	r3, #1
 80023e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023e2:	f107 030c 	add.w	r3, r7, #12
 80023e6:	4619      	mov	r1, r3
 80023e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023ec:	f002 f80a 	bl	8004404 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80023f0:	bf00      	nop
 80023f2:	3720      	adds	r7, #32
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	40021000 	.word	0x40021000

080023fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b0ae      	sub	sp, #184	; 0xb8
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002404:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002408:	2200      	movs	r2, #0
 800240a:	601a      	str	r2, [r3, #0]
 800240c:	605a      	str	r2, [r3, #4]
 800240e:	609a      	str	r2, [r3, #8]
 8002410:	60da      	str	r2, [r3, #12]
 8002412:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002414:	f107 031c 	add.w	r3, r7, #28
 8002418:	2288      	movs	r2, #136	; 0x88
 800241a:	2100      	movs	r1, #0
 800241c:	4618      	mov	r0, r3
 800241e:	f007 fa1f 	bl	8009860 <memset>
  if(huart->Instance==USART1)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a4b      	ldr	r2, [pc, #300]	; (8002554 <HAL_UART_MspInit+0x158>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d145      	bne.n	80024b8 <HAL_UART_MspInit+0xbc>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800242c:	2301      	movs	r3, #1
 800242e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002430:	2300      	movs	r3, #0
 8002432:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002434:	f107 031c 	add.w	r3, r7, #28
 8002438:	4618      	mov	r0, r3
 800243a:	f003 fe09 	bl	8006050 <HAL_RCCEx_PeriphCLKConfig>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d001      	beq.n	8002448 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002444:	f7ff fe48 	bl	80020d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002448:	4b43      	ldr	r3, [pc, #268]	; (8002558 <HAL_UART_MspInit+0x15c>)
 800244a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800244c:	4a42      	ldr	r2, [pc, #264]	; (8002558 <HAL_UART_MspInit+0x15c>)
 800244e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002452:	6613      	str	r3, [r2, #96]	; 0x60
 8002454:	4b40      	ldr	r3, [pc, #256]	; (8002558 <HAL_UART_MspInit+0x15c>)
 8002456:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002458:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800245c:	61bb      	str	r3, [r7, #24]
 800245e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002460:	4b3d      	ldr	r3, [pc, #244]	; (8002558 <HAL_UART_MspInit+0x15c>)
 8002462:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002464:	4a3c      	ldr	r2, [pc, #240]	; (8002558 <HAL_UART_MspInit+0x15c>)
 8002466:	f043 0301 	orr.w	r3, r3, #1
 800246a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800246c:	4b3a      	ldr	r3, [pc, #232]	; (8002558 <HAL_UART_MspInit+0x15c>)
 800246e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002470:	f003 0301 	and.w	r3, r3, #1
 8002474:	617b      	str	r3, [r7, #20]
 8002476:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002478:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800247c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002480:	2302      	movs	r3, #2
 8002482:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002486:	2300      	movs	r3, #0
 8002488:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800248c:	2303      	movs	r3, #3
 800248e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002492:	2307      	movs	r3, #7
 8002494:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002498:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800249c:	4619      	mov	r1, r3
 800249e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024a2:	f001 ffaf 	bl	8004404 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 80024a6:	2200      	movs	r2, #0
 80024a8:	2101      	movs	r1, #1
 80024aa:	2025      	movs	r0, #37	; 0x25
 80024ac:	f001 fcfd 	bl	8003eaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80024b0:	2025      	movs	r0, #37	; 0x25
 80024b2:	f001 fd16 	bl	8003ee2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80024b6:	e048      	b.n	800254a <HAL_UART_MspInit+0x14e>
  else if(huart->Instance==USART2)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a27      	ldr	r2, [pc, #156]	; (800255c <HAL_UART_MspInit+0x160>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d143      	bne.n	800254a <HAL_UART_MspInit+0x14e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80024c2:	2302      	movs	r3, #2
 80024c4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80024c6:	2300      	movs	r3, #0
 80024c8:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80024ca:	f107 031c 	add.w	r3, r7, #28
 80024ce:	4618      	mov	r0, r3
 80024d0:	f003 fdbe 	bl	8006050 <HAL_RCCEx_PeriphCLKConfig>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d001      	beq.n	80024de <HAL_UART_MspInit+0xe2>
      Error_Handler();
 80024da:	f7ff fdfd 	bl	80020d8 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80024de:	4b1e      	ldr	r3, [pc, #120]	; (8002558 <HAL_UART_MspInit+0x15c>)
 80024e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024e2:	4a1d      	ldr	r2, [pc, #116]	; (8002558 <HAL_UART_MspInit+0x15c>)
 80024e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024e8:	6593      	str	r3, [r2, #88]	; 0x58
 80024ea:	4b1b      	ldr	r3, [pc, #108]	; (8002558 <HAL_UART_MspInit+0x15c>)
 80024ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024f2:	613b      	str	r3, [r7, #16]
 80024f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024f6:	4b18      	ldr	r3, [pc, #96]	; (8002558 <HAL_UART_MspInit+0x15c>)
 80024f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024fa:	4a17      	ldr	r2, [pc, #92]	; (8002558 <HAL_UART_MspInit+0x15c>)
 80024fc:	f043 0301 	orr.w	r3, r3, #1
 8002500:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002502:	4b15      	ldr	r3, [pc, #84]	; (8002558 <HAL_UART_MspInit+0x15c>)
 8002504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002506:	f003 0301 	and.w	r3, r3, #1
 800250a:	60fb      	str	r3, [r7, #12]
 800250c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800250e:	230c      	movs	r3, #12
 8002510:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002514:	2302      	movs	r3, #2
 8002516:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800251a:	2300      	movs	r3, #0
 800251c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002520:	2303      	movs	r3, #3
 8002522:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002526:	2307      	movs	r3, #7
 8002528:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800252c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002530:	4619      	mov	r1, r3
 8002532:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002536:	f001 ff65 	bl	8004404 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 800253a:	2200      	movs	r2, #0
 800253c:	2101      	movs	r1, #1
 800253e:	2026      	movs	r0, #38	; 0x26
 8002540:	f001 fcb3 	bl	8003eaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002544:	2026      	movs	r0, #38	; 0x26
 8002546:	f001 fccc 	bl	8003ee2 <HAL_NVIC_EnableIRQ>
}
 800254a:	bf00      	nop
 800254c:	37b8      	adds	r7, #184	; 0xb8
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	40013800 	.word	0x40013800
 8002558:	40021000 	.word	0x40021000
 800255c:	40004400 	.word	0x40004400

08002560 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002560:	b480      	push	{r7}
 8002562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002564:	e7fe      	b.n	8002564 <NMI_Handler+0x4>

08002566 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002566:	b480      	push	{r7}
 8002568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800256a:	e7fe      	b.n	800256a <HardFault_Handler+0x4>

0800256c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002570:	e7fe      	b.n	8002570 <MemManage_Handler+0x4>

08002572 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002572:	b480      	push	{r7}
 8002574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002576:	e7fe      	b.n	8002576 <BusFault_Handler+0x4>

08002578 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002578:	b480      	push	{r7}
 800257a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800257c:	e7fe      	b.n	800257c <UsageFault_Handler+0x4>

0800257e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800257e:	b480      	push	{r7}
 8002580:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002582:	bf00      	nop
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr

0800258c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800258c:	b480      	push	{r7}
 800258e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002590:	bf00      	nop
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr

0800259a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800259a:	b480      	push	{r7}
 800259c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800259e:	bf00      	nop
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr

080025a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025ac:	f000 f95c 	bl	8002868 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025b0:	bf00      	nop
 80025b2:	bd80      	pop	{r7, pc}

080025b4 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 80025b8:	4802      	ldr	r0, [pc, #8]	; (80025c4 <DMA1_Channel5_IRQHandler+0x10>)
 80025ba:	f001 fe44 	bl	8004246 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80025be:	bf00      	nop
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	200000d8 	.word	0x200000d8

080025c8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80025cc:	4802      	ldr	r0, [pc, #8]	; (80025d8 <USART1_IRQHandler+0x10>)
 80025ce:	f005 fe57 	bl	8008280 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80025d2:	bf00      	nop
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	20001820 	.word	0x20001820

080025dc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80025e0:	4802      	ldr	r0, [pc, #8]	; (80025ec <USART2_IRQHandler+0x10>)
 80025e2:	f005 fe4d 	bl	8008280 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80025e6:	bf00      	nop
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	200018f8 	.word	0x200018f8

080025f0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b086      	sub	sp, #24
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	60f8      	str	r0, [r7, #12]
 80025f8:	60b9      	str	r1, [r7, #8]
 80025fa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025fc:	2300      	movs	r3, #0
 80025fe:	617b      	str	r3, [r7, #20]
 8002600:	e00a      	b.n	8002618 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002602:	f3af 8000 	nop.w
 8002606:	4601      	mov	r1, r0
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	1c5a      	adds	r2, r3, #1
 800260c:	60ba      	str	r2, [r7, #8]
 800260e:	b2ca      	uxtb	r2, r1
 8002610:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	3301      	adds	r3, #1
 8002616:	617b      	str	r3, [r7, #20]
 8002618:	697a      	ldr	r2, [r7, #20]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	429a      	cmp	r2, r3
 800261e:	dbf0      	blt.n	8002602 <_read+0x12>
	}

return len;
 8002620:	687b      	ldr	r3, [r7, #4]
}
 8002622:	4618      	mov	r0, r3
 8002624:	3718      	adds	r7, #24
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}

0800262a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800262a:	b580      	push	{r7, lr}
 800262c:	b086      	sub	sp, #24
 800262e:	af00      	add	r7, sp, #0
 8002630:	60f8      	str	r0, [r7, #12]
 8002632:	60b9      	str	r1, [r7, #8]
 8002634:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002636:	2300      	movs	r3, #0
 8002638:	617b      	str	r3, [r7, #20]
 800263a:	e009      	b.n	8002650 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	1c5a      	adds	r2, r3, #1
 8002640:	60ba      	str	r2, [r7, #8]
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	4618      	mov	r0, r3
 8002646:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	3301      	adds	r3, #1
 800264e:	617b      	str	r3, [r7, #20]
 8002650:	697a      	ldr	r2, [r7, #20]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	429a      	cmp	r2, r3
 8002656:	dbf1      	blt.n	800263c <_write+0x12>
	}
	return len;
 8002658:	687b      	ldr	r3, [r7, #4]
}
 800265a:	4618      	mov	r0, r3
 800265c:	3718      	adds	r7, #24
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}

08002662 <_close>:

int _close(int file)
{
 8002662:	b480      	push	{r7}
 8002664:	b083      	sub	sp, #12
 8002666:	af00      	add	r7, sp, #0
 8002668:	6078      	str	r0, [r7, #4]
	return -1;
 800266a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800266e:	4618      	mov	r0, r3
 8002670:	370c      	adds	r7, #12
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr

0800267a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800267a:	b480      	push	{r7}
 800267c:	b083      	sub	sp, #12
 800267e:	af00      	add	r7, sp, #0
 8002680:	6078      	str	r0, [r7, #4]
 8002682:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800268a:	605a      	str	r2, [r3, #4]
	return 0;
 800268c:	2300      	movs	r3, #0
}
 800268e:	4618      	mov	r0, r3
 8002690:	370c      	adds	r7, #12
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr

0800269a <_isatty>:

int _isatty(int file)
{
 800269a:	b480      	push	{r7}
 800269c:	b083      	sub	sp, #12
 800269e:	af00      	add	r7, sp, #0
 80026a0:	6078      	str	r0, [r7, #4]
	return 1;
 80026a2:	2301      	movs	r3, #1
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	370c      	adds	r7, #12
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr

080026b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b085      	sub	sp, #20
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	60f8      	str	r0, [r7, #12]
 80026b8:	60b9      	str	r1, [r7, #8]
 80026ba:	607a      	str	r2, [r7, #4]
	return 0;
 80026bc:	2300      	movs	r3, #0
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3714      	adds	r7, #20
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr
	...

080026cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b086      	sub	sp, #24
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026d4:	4a14      	ldr	r2, [pc, #80]	; (8002728 <_sbrk+0x5c>)
 80026d6:	4b15      	ldr	r3, [pc, #84]	; (800272c <_sbrk+0x60>)
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026e0:	4b13      	ldr	r3, [pc, #76]	; (8002730 <_sbrk+0x64>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d102      	bne.n	80026ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026e8:	4b11      	ldr	r3, [pc, #68]	; (8002730 <_sbrk+0x64>)
 80026ea:	4a12      	ldr	r2, [pc, #72]	; (8002734 <_sbrk+0x68>)
 80026ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026ee:	4b10      	ldr	r3, [pc, #64]	; (8002730 <_sbrk+0x64>)
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4413      	add	r3, r2
 80026f6:	693a      	ldr	r2, [r7, #16]
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d207      	bcs.n	800270c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026fc:	f007 f886 	bl	800980c <__errno>
 8002700:	4603      	mov	r3, r0
 8002702:	220c      	movs	r2, #12
 8002704:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002706:	f04f 33ff 	mov.w	r3, #4294967295
 800270a:	e009      	b.n	8002720 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800270c:	4b08      	ldr	r3, [pc, #32]	; (8002730 <_sbrk+0x64>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002712:	4b07      	ldr	r3, [pc, #28]	; (8002730 <_sbrk+0x64>)
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4413      	add	r3, r2
 800271a:	4a05      	ldr	r2, [pc, #20]	; (8002730 <_sbrk+0x64>)
 800271c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800271e:	68fb      	ldr	r3, [r7, #12]
}
 8002720:	4618      	mov	r0, r3
 8002722:	3718      	adds	r7, #24
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}
 8002728:	20018000 	.word	0x20018000
 800272c:	00000400 	.word	0x00000400
 8002730:	200000c8 	.word	0x200000c8
 8002734:	20001990 	.word	0x20001990

08002738 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002738:	b480      	push	{r7}
 800273a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800273c:	4b06      	ldr	r3, [pc, #24]	; (8002758 <SystemInit+0x20>)
 800273e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002742:	4a05      	ldr	r2, [pc, #20]	; (8002758 <SystemInit+0x20>)
 8002744:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002748:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800274c:	bf00      	nop
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr
 8002756:	bf00      	nop
 8002758:	e000ed00 	.word	0xe000ed00

0800275c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800275c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002794 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002760:	f7ff ffea 	bl	8002738 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002764:	480c      	ldr	r0, [pc, #48]	; (8002798 <LoopForever+0x6>)
  ldr r1, =_edata
 8002766:	490d      	ldr	r1, [pc, #52]	; (800279c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002768:	4a0d      	ldr	r2, [pc, #52]	; (80027a0 <LoopForever+0xe>)
  movs r3, #0
 800276a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800276c:	e002      	b.n	8002774 <LoopCopyDataInit>

0800276e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800276e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002770:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002772:	3304      	adds	r3, #4

08002774 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002774:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002776:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002778:	d3f9      	bcc.n	800276e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800277a:	4a0a      	ldr	r2, [pc, #40]	; (80027a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800277c:	4c0a      	ldr	r4, [pc, #40]	; (80027a8 <LoopForever+0x16>)
  movs r3, #0
 800277e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002780:	e001      	b.n	8002786 <LoopFillZerobss>

08002782 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002782:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002784:	3204      	adds	r2, #4

08002786 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002786:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002788:	d3fb      	bcc.n	8002782 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800278a:	f007 f845 	bl	8009818 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800278e:	f7ff f85f 	bl	8001850 <main>

08002792 <LoopForever>:

LoopForever:
    b LoopForever
 8002792:	e7fe      	b.n	8002792 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002794:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002798:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800279c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80027a0:	0800bc20 	.word	0x0800bc20
  ldr r2, =_sbss
 80027a4:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80027a8:	20001990 	.word	0x20001990

080027ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80027ac:	e7fe      	b.n	80027ac <ADC1_2_IRQHandler>
	...

080027b0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b082      	sub	sp, #8
 80027b4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80027b6:	2300      	movs	r3, #0
 80027b8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027ba:	4b0c      	ldr	r3, [pc, #48]	; (80027ec <HAL_Init+0x3c>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a0b      	ldr	r2, [pc, #44]	; (80027ec <HAL_Init+0x3c>)
 80027c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027c4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027c6:	2003      	movs	r0, #3
 80027c8:	f001 fb64 	bl	8003e94 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80027cc:	2001      	movs	r0, #1
 80027ce:	f000 f80f 	bl	80027f0 <HAL_InitTick>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d002      	beq.n	80027de <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	71fb      	strb	r3, [r7, #7]
 80027dc:	e001      	b.n	80027e2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80027de:	f7ff fc81 	bl	80020e4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80027e2:	79fb      	ldrb	r3, [r7, #7]
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	3708      	adds	r7, #8
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	40022000 	.word	0x40022000

080027f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b084      	sub	sp, #16
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80027f8:	2300      	movs	r3, #0
 80027fa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80027fc:	4b17      	ldr	r3, [pc, #92]	; (800285c <HAL_InitTick+0x6c>)
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d023      	beq.n	800284c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002804:	4b16      	ldr	r3, [pc, #88]	; (8002860 <HAL_InitTick+0x70>)
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	4b14      	ldr	r3, [pc, #80]	; (800285c <HAL_InitTick+0x6c>)
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	4619      	mov	r1, r3
 800280e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002812:	fbb3 f3f1 	udiv	r3, r3, r1
 8002816:	fbb2 f3f3 	udiv	r3, r2, r3
 800281a:	4618      	mov	r0, r3
 800281c:	f001 fb6f 	bl	8003efe <HAL_SYSTICK_Config>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d10f      	bne.n	8002846 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2b0f      	cmp	r3, #15
 800282a:	d809      	bhi.n	8002840 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800282c:	2200      	movs	r2, #0
 800282e:	6879      	ldr	r1, [r7, #4]
 8002830:	f04f 30ff 	mov.w	r0, #4294967295
 8002834:	f001 fb39 	bl	8003eaa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002838:	4a0a      	ldr	r2, [pc, #40]	; (8002864 <HAL_InitTick+0x74>)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6013      	str	r3, [r2, #0]
 800283e:	e007      	b.n	8002850 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	73fb      	strb	r3, [r7, #15]
 8002844:	e004      	b.n	8002850 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	73fb      	strb	r3, [r7, #15]
 800284a:	e001      	b.n	8002850 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002850:	7bfb      	ldrb	r3, [r7, #15]
}
 8002852:	4618      	mov	r0, r3
 8002854:	3710      	adds	r7, #16
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	20000010 	.word	0x20000010
 8002860:	20000008 	.word	0x20000008
 8002864:	2000000c 	.word	0x2000000c

08002868 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002868:	b480      	push	{r7}
 800286a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800286c:	4b06      	ldr	r3, [pc, #24]	; (8002888 <HAL_IncTick+0x20>)
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	461a      	mov	r2, r3
 8002872:	4b06      	ldr	r3, [pc, #24]	; (800288c <HAL_IncTick+0x24>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4413      	add	r3, r2
 8002878:	4a04      	ldr	r2, [pc, #16]	; (800288c <HAL_IncTick+0x24>)
 800287a:	6013      	str	r3, [r2, #0]
}
 800287c:	bf00      	nop
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr
 8002886:	bf00      	nop
 8002888:	20000010 	.word	0x20000010
 800288c:	2000197c 	.word	0x2000197c

08002890 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002890:	b480      	push	{r7}
 8002892:	af00      	add	r7, sp, #0
  return uwTick;
 8002894:	4b03      	ldr	r3, [pc, #12]	; (80028a4 <HAL_GetTick+0x14>)
 8002896:	681b      	ldr	r3, [r3, #0]
}
 8002898:	4618      	mov	r0, r3
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr
 80028a2:	bf00      	nop
 80028a4:	2000197c 	.word	0x2000197c

080028a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b084      	sub	sp, #16
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028b0:	f7ff ffee 	bl	8002890 <HAL_GetTick>
 80028b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028c0:	d005      	beq.n	80028ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80028c2:	4b0a      	ldr	r3, [pc, #40]	; (80028ec <HAL_Delay+0x44>)
 80028c4:	781b      	ldrb	r3, [r3, #0]
 80028c6:	461a      	mov	r2, r3
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	4413      	add	r3, r2
 80028cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80028ce:	bf00      	nop
 80028d0:	f7ff ffde 	bl	8002890 <HAL_GetTick>
 80028d4:	4602      	mov	r2, r0
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	68fa      	ldr	r2, [r7, #12]
 80028dc:	429a      	cmp	r2, r3
 80028de:	d8f7      	bhi.n	80028d0 <HAL_Delay+0x28>
  {
  }
}
 80028e0:	bf00      	nop
 80028e2:	bf00      	nop
 80028e4:	3710      	adds	r7, #16
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	20000010 	.word	0x20000010

080028f0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b083      	sub	sp, #12
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	431a      	orrs	r2, r3
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	609a      	str	r2, [r3, #8]
}
 800290a:	bf00      	nop
 800290c:	370c      	adds	r7, #12
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr

08002916 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002916:	b480      	push	{r7}
 8002918:	b083      	sub	sp, #12
 800291a:	af00      	add	r7, sp, #0
 800291c:	6078      	str	r0, [r7, #4]
 800291e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	431a      	orrs	r2, r3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	609a      	str	r2, [r3, #8]
}
 8002930:	bf00      	nop
 8002932:	370c      	adds	r7, #12
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr

0800293c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800293c:	b480      	push	{r7}
 800293e:	b083      	sub	sp, #12
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800294c:	4618      	mov	r0, r3
 800294e:	370c      	adds	r7, #12
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr

08002958 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002958:	b480      	push	{r7}
 800295a:	b087      	sub	sp, #28
 800295c:	af00      	add	r7, sp, #0
 800295e:	60f8      	str	r0, [r7, #12]
 8002960:	60b9      	str	r1, [r7, #8]
 8002962:	607a      	str	r2, [r7, #4]
 8002964:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	3360      	adds	r3, #96	; 0x60
 800296a:	461a      	mov	r2, r3
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	4413      	add	r3, r2
 8002972:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	4b08      	ldr	r3, [pc, #32]	; (800299c <LL_ADC_SetOffset+0x44>)
 800297a:	4013      	ands	r3, r2
 800297c:	687a      	ldr	r2, [r7, #4]
 800297e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002982:	683a      	ldr	r2, [r7, #0]
 8002984:	430a      	orrs	r2, r1
 8002986:	4313      	orrs	r3, r2
 8002988:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002990:	bf00      	nop
 8002992:	371c      	adds	r7, #28
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr
 800299c:	03fff000 	.word	0x03fff000

080029a0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b085      	sub	sp, #20
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	3360      	adds	r3, #96	; 0x60
 80029ae:	461a      	mov	r2, r3
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	4413      	add	r3, r2
 80029b6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3714      	adds	r7, #20
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr

080029cc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b087      	sub	sp, #28
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	60f8      	str	r0, [r7, #12]
 80029d4:	60b9      	str	r1, [r7, #8]
 80029d6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	3360      	adds	r3, #96	; 0x60
 80029dc:	461a      	mov	r2, r3
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	4413      	add	r3, r2
 80029e4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	431a      	orrs	r2, r3
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80029f6:	bf00      	nop
 80029f8:	371c      	adds	r7, #28
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr

08002a02 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002a02:	b480      	push	{r7}
 8002a04:	b083      	sub	sp, #12
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	68db      	ldr	r3, [r3, #12]
 8002a0e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d101      	bne.n	8002a1a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002a16:	2301      	movs	r3, #1
 8002a18:	e000      	b.n	8002a1c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002a1a:	2300      	movs	r3, #0
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	370c      	adds	r7, #12
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr

08002a28 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b087      	sub	sp, #28
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	60f8      	str	r0, [r7, #12]
 8002a30:	60b9      	str	r1, [r7, #8]
 8002a32:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	3330      	adds	r3, #48	; 0x30
 8002a38:	461a      	mov	r2, r3
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	0a1b      	lsrs	r3, r3, #8
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	f003 030c 	and.w	r3, r3, #12
 8002a44:	4413      	add	r3, r2
 8002a46:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	f003 031f 	and.w	r3, r3, #31
 8002a52:	211f      	movs	r1, #31
 8002a54:	fa01 f303 	lsl.w	r3, r1, r3
 8002a58:	43db      	mvns	r3, r3
 8002a5a:	401a      	ands	r2, r3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	0e9b      	lsrs	r3, r3, #26
 8002a60:	f003 011f 	and.w	r1, r3, #31
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	f003 031f 	and.w	r3, r3, #31
 8002a6a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a6e:	431a      	orrs	r2, r3
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002a74:	bf00      	nop
 8002a76:	371c      	adds	r7, #28
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr

08002a80 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b087      	sub	sp, #28
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	60f8      	str	r0, [r7, #12]
 8002a88:	60b9      	str	r1, [r7, #8]
 8002a8a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	3314      	adds	r3, #20
 8002a90:	461a      	mov	r2, r3
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	0e5b      	lsrs	r3, r3, #25
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	f003 0304 	and.w	r3, r3, #4
 8002a9c:	4413      	add	r3, r2
 8002a9e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	0d1b      	lsrs	r3, r3, #20
 8002aa8:	f003 031f 	and.w	r3, r3, #31
 8002aac:	2107      	movs	r1, #7
 8002aae:	fa01 f303 	lsl.w	r3, r1, r3
 8002ab2:	43db      	mvns	r3, r3
 8002ab4:	401a      	ands	r2, r3
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	0d1b      	lsrs	r3, r3, #20
 8002aba:	f003 031f 	and.w	r3, r3, #31
 8002abe:	6879      	ldr	r1, [r7, #4]
 8002ac0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ac4:	431a      	orrs	r2, r3
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002aca:	bf00      	nop
 8002acc:	371c      	adds	r7, #28
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr
	...

08002ad8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b085      	sub	sp, #20
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	60f8      	str	r0, [r7, #12]
 8002ae0:	60b9      	str	r1, [r7, #8]
 8002ae2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002af0:	43db      	mvns	r3, r3
 8002af2:	401a      	ands	r2, r3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	f003 0318 	and.w	r3, r3, #24
 8002afa:	4908      	ldr	r1, [pc, #32]	; (8002b1c <LL_ADC_SetChannelSingleDiff+0x44>)
 8002afc:	40d9      	lsrs	r1, r3
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	400b      	ands	r3, r1
 8002b02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b06:	431a      	orrs	r2, r3
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002b0e:	bf00      	nop
 8002b10:	3714      	adds	r7, #20
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr
 8002b1a:	bf00      	nop
 8002b1c:	0007ffff 	.word	0x0007ffff

08002b20 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b083      	sub	sp, #12
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	f003 031f 	and.w	r3, r3, #31
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	370c      	adds	r7, #12
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr

08002b3c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	370c      	adds	r7, #12
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr

08002b58 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002b68:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002b6c:	687a      	ldr	r2, [r7, #4]
 8002b6e:	6093      	str	r3, [r2, #8]
}
 8002b70:	bf00      	nop
 8002b72:	370c      	adds	r7, #12
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr

08002b7c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b083      	sub	sp, #12
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b90:	d101      	bne.n	8002b96 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002b92:	2301      	movs	r3, #1
 8002b94:	e000      	b.n	8002b98 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002b96:	2300      	movs	r3, #0
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	370c      	adds	r7, #12
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr

08002ba4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002bb4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002bb8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002bc0:	bf00      	nop
 8002bc2:	370c      	adds	r7, #12
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr

08002bcc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b083      	sub	sp, #12
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bdc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002be0:	d101      	bne.n	8002be6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002be2:	2301      	movs	r3, #1
 8002be4:	e000      	b.n	8002be8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002be6:	2300      	movs	r3, #0
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	370c      	adds	r7, #12
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr

08002bf4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b083      	sub	sp, #12
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002c04:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002c08:	f043 0201 	orr.w	r2, r3, #1
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002c10:	bf00      	nop
 8002c12:	370c      	adds	r7, #12
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr

08002c1c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	f003 0301 	and.w	r3, r3, #1
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d101      	bne.n	8002c34 <LL_ADC_IsEnabled+0x18>
 8002c30:	2301      	movs	r3, #1
 8002c32:	e000      	b.n	8002c36 <LL_ADC_IsEnabled+0x1a>
 8002c34:	2300      	movs	r3, #0
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	370c      	adds	r7, #12
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr

08002c42 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002c42:	b480      	push	{r7}
 8002c44:	b083      	sub	sp, #12
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002c52:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002c56:	f043 0204 	orr.w	r2, r3, #4
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002c5e:	bf00      	nop
 8002c60:	370c      	adds	r7, #12
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr

08002c6a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002c6a:	b480      	push	{r7}
 8002c6c:	b083      	sub	sp, #12
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	f003 0304 	and.w	r3, r3, #4
 8002c7a:	2b04      	cmp	r3, #4
 8002c7c:	d101      	bne.n	8002c82 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e000      	b.n	8002c84 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002c82:	2300      	movs	r3, #0
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	370c      	adds	r7, #12
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr

08002c90 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	f003 0308 	and.w	r3, r3, #8
 8002ca0:	2b08      	cmp	r3, #8
 8002ca2:	d101      	bne.n	8002ca8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e000      	b.n	8002caa <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002ca8:	2300      	movs	r3, #0
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	370c      	adds	r7, #12
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr
	...

08002cb8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002cb8:	b590      	push	{r4, r7, lr}
 8002cba:	b089      	sub	sp, #36	; 0x24
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d101      	bne.n	8002cd2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e136      	b.n	8002f40 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	691b      	ldr	r3, [r3, #16]
 8002cd6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d109      	bne.n	8002cf4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f7ff fa45 	bl	8002170 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f7ff ff3f 	bl	8002b7c <LL_ADC_IsDeepPowerDownEnabled>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d004      	beq.n	8002d0e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f7ff ff25 	bl	8002b58 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4618      	mov	r0, r3
 8002d14:	f7ff ff5a 	bl	8002bcc <LL_ADC_IsInternalRegulatorEnabled>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d115      	bne.n	8002d4a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4618      	mov	r0, r3
 8002d24:	f7ff ff3e 	bl	8002ba4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002d28:	4b87      	ldr	r3, [pc, #540]	; (8002f48 <HAL_ADC_Init+0x290>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	099b      	lsrs	r3, r3, #6
 8002d2e:	4a87      	ldr	r2, [pc, #540]	; (8002f4c <HAL_ADC_Init+0x294>)
 8002d30:	fba2 2303 	umull	r2, r3, r2, r3
 8002d34:	099b      	lsrs	r3, r3, #6
 8002d36:	3301      	adds	r3, #1
 8002d38:	005b      	lsls	r3, r3, #1
 8002d3a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002d3c:	e002      	b.n	8002d44 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	3b01      	subs	r3, #1
 8002d42:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d1f9      	bne.n	8002d3e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f7ff ff3c 	bl	8002bcc <LL_ADC_IsInternalRegulatorEnabled>
 8002d54:	4603      	mov	r3, r0
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d10d      	bne.n	8002d76 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d5e:	f043 0210 	orr.w	r2, r3, #16
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d6a:	f043 0201 	orr.w	r2, r3, #1
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f7ff ff75 	bl	8002c6a <LL_ADC_REG_IsConversionOngoing>
 8002d80:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d86:	f003 0310 	and.w	r3, r3, #16
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	f040 80cf 	bne.w	8002f2e <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	f040 80cb 	bne.w	8002f2e <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d9c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002da0:	f043 0202 	orr.w	r2, r3, #2
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4618      	mov	r0, r3
 8002dae:	f7ff ff35 	bl	8002c1c <LL_ADC_IsEnabled>
 8002db2:	4603      	mov	r3, r0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d115      	bne.n	8002de4 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002db8:	4865      	ldr	r0, [pc, #404]	; (8002f50 <HAL_ADC_Init+0x298>)
 8002dba:	f7ff ff2f 	bl	8002c1c <LL_ADC_IsEnabled>
 8002dbe:	4604      	mov	r4, r0
 8002dc0:	4864      	ldr	r0, [pc, #400]	; (8002f54 <HAL_ADC_Init+0x29c>)
 8002dc2:	f7ff ff2b 	bl	8002c1c <LL_ADC_IsEnabled>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	431c      	orrs	r4, r3
 8002dca:	4863      	ldr	r0, [pc, #396]	; (8002f58 <HAL_ADC_Init+0x2a0>)
 8002dcc:	f7ff ff26 	bl	8002c1c <LL_ADC_IsEnabled>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	4323      	orrs	r3, r4
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d105      	bne.n	8002de4 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	4619      	mov	r1, r3
 8002dde:	485f      	ldr	r0, [pc, #380]	; (8002f5c <HAL_ADC_Init+0x2a4>)
 8002de0:	f7ff fd86 	bl	80028f0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	7e5b      	ldrb	r3, [r3, #25]
 8002de8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002dee:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002df4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002dfa:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e02:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002e04:	4313      	orrs	r3, r2
 8002e06:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d106      	bne.n	8002e20 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e16:	3b01      	subs	r3, #1
 8002e18:	045b      	lsls	r3, r3, #17
 8002e1a:	69ba      	ldr	r2, [r7, #24]
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d009      	beq.n	8002e3c <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e2c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e34:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002e36:	69ba      	ldr	r2, [r7, #24]
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	68da      	ldr	r2, [r3, #12]
 8002e42:	4b47      	ldr	r3, [pc, #284]	; (8002f60 <HAL_ADC_Init+0x2a8>)
 8002e44:	4013      	ands	r3, r2
 8002e46:	687a      	ldr	r2, [r7, #4]
 8002e48:	6812      	ldr	r2, [r2, #0]
 8002e4a:	69b9      	ldr	r1, [r7, #24]
 8002e4c:	430b      	orrs	r3, r1
 8002e4e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4618      	mov	r0, r3
 8002e56:	f7ff ff08 	bl	8002c6a <LL_ADC_REG_IsConversionOngoing>
 8002e5a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4618      	mov	r0, r3
 8002e62:	f7ff ff15 	bl	8002c90 <LL_ADC_INJ_IsConversionOngoing>
 8002e66:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d13d      	bne.n	8002eea <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d13a      	bne.n	8002eea <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002e78:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002e80:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002e82:	4313      	orrs	r3, r2
 8002e84:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e90:	f023 0302 	bic.w	r3, r3, #2
 8002e94:	687a      	ldr	r2, [r7, #4]
 8002e96:	6812      	ldr	r2, [r2, #0]
 8002e98:	69b9      	ldr	r1, [r7, #24]
 8002e9a:	430b      	orrs	r3, r1
 8002e9c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d118      	bne.n	8002eda <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	691b      	ldr	r3, [r3, #16]
 8002eae:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002eb2:	f023 0304 	bic.w	r3, r3, #4
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002ebe:	4311      	orrs	r1, r2
 8002ec0:	687a      	ldr	r2, [r7, #4]
 8002ec2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002ec4:	4311      	orrs	r1, r2
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002eca:	430a      	orrs	r2, r1
 8002ecc:	431a      	orrs	r2, r3
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f042 0201 	orr.w	r2, r2, #1
 8002ed6:	611a      	str	r2, [r3, #16]
 8002ed8:	e007      	b.n	8002eea <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	691a      	ldr	r2, [r3, #16]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f022 0201 	bic.w	r2, r2, #1
 8002ee8:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	691b      	ldr	r3, [r3, #16]
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d10c      	bne.n	8002f0c <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef8:	f023 010f 	bic.w	r1, r3, #15
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	69db      	ldr	r3, [r3, #28]
 8002f00:	1e5a      	subs	r2, r3, #1
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	430a      	orrs	r2, r1
 8002f08:	631a      	str	r2, [r3, #48]	; 0x30
 8002f0a:	e007      	b.n	8002f1c <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f022 020f 	bic.w	r2, r2, #15
 8002f1a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f20:	f023 0303 	bic.w	r3, r3, #3
 8002f24:	f043 0201 	orr.w	r2, r3, #1
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	655a      	str	r2, [r3, #84]	; 0x54
 8002f2c:	e007      	b.n	8002f3e <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f32:	f043 0210 	orr.w	r2, r3, #16
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002f3e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3724      	adds	r7, #36	; 0x24
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd90      	pop	{r4, r7, pc}
 8002f48:	20000008 	.word	0x20000008
 8002f4c:	053e2d63 	.word	0x053e2d63
 8002f50:	50040000 	.word	0x50040000
 8002f54:	50040100 	.word	0x50040100
 8002f58:	50040200 	.word	0x50040200
 8002f5c:	50040300 	.word	0x50040300
 8002f60:	fff0c007 	.word	0xfff0c007

08002f64 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b086      	sub	sp, #24
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f6c:	4857      	ldr	r0, [pc, #348]	; (80030cc <HAL_ADC_Start+0x168>)
 8002f6e:	f7ff fdd7 	bl	8002b20 <LL_ADC_GetMultimode>
 8002f72:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f7ff fe76 	bl	8002c6a <LL_ADC_REG_IsConversionOngoing>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	f040 809c 	bne.w	80030be <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d101      	bne.n	8002f94 <HAL_ADC_Start+0x30>
 8002f90:	2302      	movs	r3, #2
 8002f92:	e097      	b.n	80030c4 <HAL_ADC_Start+0x160>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2201      	movs	r2, #1
 8002f98:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	f000 fd71 	bl	8003a84 <ADC_Enable>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002fa6:	7dfb      	ldrb	r3, [r7, #23]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	f040 8083 	bne.w	80030b4 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fb2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002fb6:	f023 0301 	bic.w	r3, r3, #1
 8002fba:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a42      	ldr	r2, [pc, #264]	; (80030d0 <HAL_ADC_Start+0x16c>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d002      	beq.n	8002fd2 <HAL_ADC_Start+0x6e>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	e000      	b.n	8002fd4 <HAL_ADC_Start+0x70>
 8002fd2:	4b40      	ldr	r3, [pc, #256]	; (80030d4 <HAL_ADC_Start+0x170>)
 8002fd4:	687a      	ldr	r2, [r7, #4]
 8002fd6:	6812      	ldr	r2, [r2, #0]
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d002      	beq.n	8002fe2 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d105      	bne.n	8002fee <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fe6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ff2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ff6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ffa:	d106      	bne.n	800300a <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003000:	f023 0206 	bic.w	r2, r3, #6
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	659a      	str	r2, [r3, #88]	; 0x58
 8003008:	e002      	b.n	8003010 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2200      	movs	r2, #0
 800300e:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	221c      	movs	r2, #28
 8003016:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2200      	movs	r2, #0
 800301c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a2a      	ldr	r2, [pc, #168]	; (80030d0 <HAL_ADC_Start+0x16c>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d002      	beq.n	8003030 <HAL_ADC_Start+0xcc>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	e000      	b.n	8003032 <HAL_ADC_Start+0xce>
 8003030:	4b28      	ldr	r3, [pc, #160]	; (80030d4 <HAL_ADC_Start+0x170>)
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	6812      	ldr	r2, [r2, #0]
 8003036:	4293      	cmp	r3, r2
 8003038:	d008      	beq.n	800304c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d005      	beq.n	800304c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	2b05      	cmp	r3, #5
 8003044:	d002      	beq.n	800304c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	2b09      	cmp	r3, #9
 800304a:	d114      	bne.n	8003076 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	68db      	ldr	r3, [r3, #12]
 8003052:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003056:	2b00      	cmp	r3, #0
 8003058:	d007      	beq.n	800306a <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800305e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003062:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4618      	mov	r0, r3
 8003070:	f7ff fde7 	bl	8002c42 <LL_ADC_REG_StartConversion>
 8003074:	e025      	b.n	80030c2 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800307a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a12      	ldr	r2, [pc, #72]	; (80030d0 <HAL_ADC_Start+0x16c>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d002      	beq.n	8003092 <HAL_ADC_Start+0x12e>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	e000      	b.n	8003094 <HAL_ADC_Start+0x130>
 8003092:	4b10      	ldr	r3, [pc, #64]	; (80030d4 <HAL_ADC_Start+0x170>)
 8003094:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	68db      	ldr	r3, [r3, #12]
 800309a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d00f      	beq.n	80030c2 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030a6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80030aa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	655a      	str	r2, [r3, #84]	; 0x54
 80030b2:	e006      	b.n	80030c2 <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2200      	movs	r2, #0
 80030b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80030bc:	e001      	b.n	80030c2 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80030be:	2302      	movs	r3, #2
 80030c0:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80030c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3718      	adds	r7, #24
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}
 80030cc:	50040300 	.word	0x50040300
 80030d0:	50040100 	.word	0x50040100
 80030d4:	50040000 	.word	0x50040000

080030d8 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b088      	sub	sp, #32
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
 80030e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80030e2:	4866      	ldr	r0, [pc, #408]	; (800327c <HAL_ADC_PollForConversion+0x1a4>)
 80030e4:	f7ff fd1c 	bl	8002b20 <LL_ADC_GetMultimode>
 80030e8:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	695b      	ldr	r3, [r3, #20]
 80030ee:	2b08      	cmp	r3, #8
 80030f0:	d102      	bne.n	80030f8 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80030f2:	2308      	movs	r3, #8
 80030f4:	61fb      	str	r3, [r7, #28]
 80030f6:	e02a      	b.n	800314e <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d005      	beq.n	800310a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	2b05      	cmp	r3, #5
 8003102:	d002      	beq.n	800310a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	2b09      	cmp	r3, #9
 8003108:	d111      	bne.n	800312e <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	f003 0301 	and.w	r3, r3, #1
 8003114:	2b00      	cmp	r3, #0
 8003116:	d007      	beq.n	8003128 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800311c:	f043 0220 	orr.w	r2, r3, #32
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	e0a4      	b.n	8003272 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003128:	2304      	movs	r3, #4
 800312a:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800312c:	e00f      	b.n	800314e <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800312e:	4853      	ldr	r0, [pc, #332]	; (800327c <HAL_ADC_PollForConversion+0x1a4>)
 8003130:	f7ff fd04 	bl	8002b3c <LL_ADC_GetMultiDMATransfer>
 8003134:	4603      	mov	r3, r0
 8003136:	2b00      	cmp	r3, #0
 8003138:	d007      	beq.n	800314a <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800313e:	f043 0220 	orr.w	r2, r3, #32
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e093      	b.n	8003272 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800314a:	2304      	movs	r3, #4
 800314c:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800314e:	f7ff fb9f 	bl	8002890 <HAL_GetTick>
 8003152:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003154:	e021      	b.n	800319a <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800315c:	d01d      	beq.n	800319a <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800315e:	f7ff fb97 	bl	8002890 <HAL_GetTick>
 8003162:	4602      	mov	r2, r0
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	1ad3      	subs	r3, r2, r3
 8003168:	683a      	ldr	r2, [r7, #0]
 800316a:	429a      	cmp	r2, r3
 800316c:	d302      	bcc.n	8003174 <HAL_ADC_PollForConversion+0x9c>
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d112      	bne.n	800319a <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	69fb      	ldr	r3, [r7, #28]
 800317c:	4013      	ands	r3, r2
 800317e:	2b00      	cmp	r3, #0
 8003180:	d10b      	bne.n	800319a <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003186:	f043 0204 	orr.w	r2, r3, #4
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2200      	movs	r2, #0
 8003192:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	e06b      	b.n	8003272 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	4013      	ands	r3, r2
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d0d6      	beq.n	8003156 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ac:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4618      	mov	r0, r3
 80031ba:	f7ff fc22 	bl	8002a02 <LL_ADC_REG_IsTriggerSourceSWStart>
 80031be:	4603      	mov	r3, r0
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d01c      	beq.n	80031fe <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	7e5b      	ldrb	r3, [r3, #25]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d118      	bne.n	80031fe <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0308 	and.w	r3, r3, #8
 80031d6:	2b08      	cmp	r3, #8
 80031d8:	d111      	bne.n	80031fe <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d105      	bne.n	80031fe <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031f6:	f043 0201 	orr.w	r2, r3, #1
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a1f      	ldr	r2, [pc, #124]	; (8003280 <HAL_ADC_PollForConversion+0x1a8>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d002      	beq.n	800320e <HAL_ADC_PollForConversion+0x136>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	e000      	b.n	8003210 <HAL_ADC_PollForConversion+0x138>
 800320e:	4b1d      	ldr	r3, [pc, #116]	; (8003284 <HAL_ADC_PollForConversion+0x1ac>)
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	6812      	ldr	r2, [r2, #0]
 8003214:	4293      	cmp	r3, r2
 8003216:	d008      	beq.n	800322a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d005      	beq.n	800322a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	2b05      	cmp	r3, #5
 8003222:	d002      	beq.n	800322a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	2b09      	cmp	r3, #9
 8003228:	d104      	bne.n	8003234 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	61bb      	str	r3, [r7, #24]
 8003232:	e00c      	b.n	800324e <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a11      	ldr	r2, [pc, #68]	; (8003280 <HAL_ADC_PollForConversion+0x1a8>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d002      	beq.n	8003244 <HAL_ADC_PollForConversion+0x16c>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	e000      	b.n	8003246 <HAL_ADC_PollForConversion+0x16e>
 8003244:	4b0f      	ldr	r3, [pc, #60]	; (8003284 <HAL_ADC_PollForConversion+0x1ac>)
 8003246:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800324e:	69fb      	ldr	r3, [r7, #28]
 8003250:	2b08      	cmp	r3, #8
 8003252:	d104      	bne.n	800325e <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	2208      	movs	r2, #8
 800325a:	601a      	str	r2, [r3, #0]
 800325c:	e008      	b.n	8003270 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800325e:	69bb      	ldr	r3, [r7, #24]
 8003260:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003264:	2b00      	cmp	r3, #0
 8003266:	d103      	bne.n	8003270 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	220c      	movs	r2, #12
 800326e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8003270:	2300      	movs	r3, #0
}
 8003272:	4618      	mov	r0, r3
 8003274:	3720      	adds	r7, #32
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop
 800327c:	50040300 	.word	0x50040300
 8003280:	50040100 	.word	0x50040100
 8003284:	50040000 	.word	0x50040000

08003288 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003288:	b480      	push	{r7}
 800328a:	b083      	sub	sp, #12
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003296:	4618      	mov	r0, r3
 8003298:	370c      	adds	r7, #12
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr
	...

080032a4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b0b6      	sub	sp, #216	; 0xd8
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032ae:	2300      	movs	r3, #0
 80032b0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80032b4:	2300      	movs	r3, #0
 80032b6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d101      	bne.n	80032c6 <HAL_ADC_ConfigChannel+0x22>
 80032c2:	2302      	movs	r3, #2
 80032c4:	e3c7      	b.n	8003a56 <HAL_ADC_ConfigChannel+0x7b2>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2201      	movs	r2, #1
 80032ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4618      	mov	r0, r3
 80032d4:	f7ff fcc9 	bl	8002c6a <LL_ADC_REG_IsConversionOngoing>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	f040 83a8 	bne.w	8003a30 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	2b05      	cmp	r3, #5
 80032e6:	d824      	bhi.n	8003332 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	3b02      	subs	r3, #2
 80032ee:	2b03      	cmp	r3, #3
 80032f0:	d81b      	bhi.n	800332a <HAL_ADC_ConfigChannel+0x86>
 80032f2:	a201      	add	r2, pc, #4	; (adr r2, 80032f8 <HAL_ADC_ConfigChannel+0x54>)
 80032f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032f8:	08003309 	.word	0x08003309
 80032fc:	08003311 	.word	0x08003311
 8003300:	08003319 	.word	0x08003319
 8003304:	08003321 	.word	0x08003321
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	220c      	movs	r2, #12
 800330c:	605a      	str	r2, [r3, #4]
          break;
 800330e:	e011      	b.n	8003334 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	2212      	movs	r2, #18
 8003314:	605a      	str	r2, [r3, #4]
          break;
 8003316:	e00d      	b.n	8003334 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	2218      	movs	r2, #24
 800331c:	605a      	str	r2, [r3, #4]
          break;
 800331e:	e009      	b.n	8003334 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003326:	605a      	str	r2, [r3, #4]
          break;
 8003328:	e004      	b.n	8003334 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	2206      	movs	r2, #6
 800332e:	605a      	str	r2, [r3, #4]
          break;
 8003330:	e000      	b.n	8003334 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8003332:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6818      	ldr	r0, [r3, #0]
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	6859      	ldr	r1, [r3, #4]
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	461a      	mov	r2, r3
 8003342:	f7ff fb71 	bl	8002a28 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4618      	mov	r0, r3
 800334c:	f7ff fc8d 	bl	8002c6a <LL_ADC_REG_IsConversionOngoing>
 8003350:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4618      	mov	r0, r3
 800335a:	f7ff fc99 	bl	8002c90 <LL_ADC_INJ_IsConversionOngoing>
 800335e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003362:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003366:	2b00      	cmp	r3, #0
 8003368:	f040 81a6 	bne.w	80036b8 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800336c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003370:	2b00      	cmp	r3, #0
 8003372:	f040 81a1 	bne.w	80036b8 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6818      	ldr	r0, [r3, #0]
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	6819      	ldr	r1, [r3, #0]
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	461a      	mov	r2, r3
 8003384:	f7ff fb7c 	bl	8002a80 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	695a      	ldr	r2, [r3, #20]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	68db      	ldr	r3, [r3, #12]
 8003392:	08db      	lsrs	r3, r3, #3
 8003394:	f003 0303 	and.w	r3, r3, #3
 8003398:	005b      	lsls	r3, r3, #1
 800339a:	fa02 f303 	lsl.w	r3, r2, r3
 800339e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	691b      	ldr	r3, [r3, #16]
 80033a6:	2b04      	cmp	r3, #4
 80033a8:	d00a      	beq.n	80033c0 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6818      	ldr	r0, [r3, #0]
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	6919      	ldr	r1, [r3, #16]
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80033ba:	f7ff facd 	bl	8002958 <LL_ADC_SetOffset>
 80033be:	e17b      	b.n	80036b8 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	2100      	movs	r1, #0
 80033c6:	4618      	mov	r0, r3
 80033c8:	f7ff faea 	bl	80029a0 <LL_ADC_GetOffsetChannel>
 80033cc:	4603      	mov	r3, r0
 80033ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d10a      	bne.n	80033ec <HAL_ADC_ConfigChannel+0x148>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	2100      	movs	r1, #0
 80033dc:	4618      	mov	r0, r3
 80033de:	f7ff fadf 	bl	80029a0 <LL_ADC_GetOffsetChannel>
 80033e2:	4603      	mov	r3, r0
 80033e4:	0e9b      	lsrs	r3, r3, #26
 80033e6:	f003 021f 	and.w	r2, r3, #31
 80033ea:	e01e      	b.n	800342a <HAL_ADC_ConfigChannel+0x186>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	2100      	movs	r1, #0
 80033f2:	4618      	mov	r0, r3
 80033f4:	f7ff fad4 	bl	80029a0 <LL_ADC_GetOffsetChannel>
 80033f8:	4603      	mov	r3, r0
 80033fa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033fe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003402:	fa93 f3a3 	rbit	r3, r3
 8003406:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800340a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800340e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003412:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003416:	2b00      	cmp	r3, #0
 8003418:	d101      	bne.n	800341e <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 800341a:	2320      	movs	r3, #32
 800341c:	e004      	b.n	8003428 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 800341e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003422:	fab3 f383 	clz	r3, r3
 8003426:	b2db      	uxtb	r3, r3
 8003428:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003432:	2b00      	cmp	r3, #0
 8003434:	d105      	bne.n	8003442 <HAL_ADC_ConfigChannel+0x19e>
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	0e9b      	lsrs	r3, r3, #26
 800343c:	f003 031f 	and.w	r3, r3, #31
 8003440:	e018      	b.n	8003474 <HAL_ADC_ConfigChannel+0x1d0>
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800344a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800344e:	fa93 f3a3 	rbit	r3, r3
 8003452:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003456:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800345a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800345e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003462:	2b00      	cmp	r3, #0
 8003464:	d101      	bne.n	800346a <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8003466:	2320      	movs	r3, #32
 8003468:	e004      	b.n	8003474 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 800346a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800346e:	fab3 f383 	clz	r3, r3
 8003472:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003474:	429a      	cmp	r2, r3
 8003476:	d106      	bne.n	8003486 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	2200      	movs	r2, #0
 800347e:	2100      	movs	r1, #0
 8003480:	4618      	mov	r0, r3
 8003482:	f7ff faa3 	bl	80029cc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	2101      	movs	r1, #1
 800348c:	4618      	mov	r0, r3
 800348e:	f7ff fa87 	bl	80029a0 <LL_ADC_GetOffsetChannel>
 8003492:	4603      	mov	r3, r0
 8003494:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003498:	2b00      	cmp	r3, #0
 800349a:	d10a      	bne.n	80034b2 <HAL_ADC_ConfigChannel+0x20e>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	2101      	movs	r1, #1
 80034a2:	4618      	mov	r0, r3
 80034a4:	f7ff fa7c 	bl	80029a0 <LL_ADC_GetOffsetChannel>
 80034a8:	4603      	mov	r3, r0
 80034aa:	0e9b      	lsrs	r3, r3, #26
 80034ac:	f003 021f 	and.w	r2, r3, #31
 80034b0:	e01e      	b.n	80034f0 <HAL_ADC_ConfigChannel+0x24c>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	2101      	movs	r1, #1
 80034b8:	4618      	mov	r0, r3
 80034ba:	f7ff fa71 	bl	80029a0 <LL_ADC_GetOffsetChannel>
 80034be:	4603      	mov	r3, r0
 80034c0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034c4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80034c8:	fa93 f3a3 	rbit	r3, r3
 80034cc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80034d0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80034d4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80034d8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d101      	bne.n	80034e4 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 80034e0:	2320      	movs	r3, #32
 80034e2:	e004      	b.n	80034ee <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 80034e4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80034e8:	fab3 f383 	clz	r3, r3
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d105      	bne.n	8003508 <HAL_ADC_ConfigChannel+0x264>
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	0e9b      	lsrs	r3, r3, #26
 8003502:	f003 031f 	and.w	r3, r3, #31
 8003506:	e018      	b.n	800353a <HAL_ADC_ConfigChannel+0x296>
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003510:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003514:	fa93 f3a3 	rbit	r3, r3
 8003518:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800351c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003520:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003524:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003528:	2b00      	cmp	r3, #0
 800352a:	d101      	bne.n	8003530 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 800352c:	2320      	movs	r3, #32
 800352e:	e004      	b.n	800353a <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8003530:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003534:	fab3 f383 	clz	r3, r3
 8003538:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800353a:	429a      	cmp	r2, r3
 800353c:	d106      	bne.n	800354c <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	2200      	movs	r2, #0
 8003544:	2101      	movs	r1, #1
 8003546:	4618      	mov	r0, r3
 8003548:	f7ff fa40 	bl	80029cc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	2102      	movs	r1, #2
 8003552:	4618      	mov	r0, r3
 8003554:	f7ff fa24 	bl	80029a0 <LL_ADC_GetOffsetChannel>
 8003558:	4603      	mov	r3, r0
 800355a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800355e:	2b00      	cmp	r3, #0
 8003560:	d10a      	bne.n	8003578 <HAL_ADC_ConfigChannel+0x2d4>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	2102      	movs	r1, #2
 8003568:	4618      	mov	r0, r3
 800356a:	f7ff fa19 	bl	80029a0 <LL_ADC_GetOffsetChannel>
 800356e:	4603      	mov	r3, r0
 8003570:	0e9b      	lsrs	r3, r3, #26
 8003572:	f003 021f 	and.w	r2, r3, #31
 8003576:	e01e      	b.n	80035b6 <HAL_ADC_ConfigChannel+0x312>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	2102      	movs	r1, #2
 800357e:	4618      	mov	r0, r3
 8003580:	f7ff fa0e 	bl	80029a0 <LL_ADC_GetOffsetChannel>
 8003584:	4603      	mov	r3, r0
 8003586:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800358a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800358e:	fa93 f3a3 	rbit	r3, r3
 8003592:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003596:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800359a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800359e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d101      	bne.n	80035aa <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 80035a6:	2320      	movs	r3, #32
 80035a8:	e004      	b.n	80035b4 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80035aa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80035ae:	fab3 f383 	clz	r3, r3
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d105      	bne.n	80035ce <HAL_ADC_ConfigChannel+0x32a>
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	0e9b      	lsrs	r3, r3, #26
 80035c8:	f003 031f 	and.w	r3, r3, #31
 80035cc:	e016      	b.n	80035fc <HAL_ADC_ConfigChannel+0x358>
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80035da:	fa93 f3a3 	rbit	r3, r3
 80035de:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80035e0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80035e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80035e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d101      	bne.n	80035f2 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 80035ee:	2320      	movs	r3, #32
 80035f0:	e004      	b.n	80035fc <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 80035f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80035f6:	fab3 f383 	clz	r3, r3
 80035fa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d106      	bne.n	800360e <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	2200      	movs	r2, #0
 8003606:	2102      	movs	r1, #2
 8003608:	4618      	mov	r0, r3
 800360a:	f7ff f9df 	bl	80029cc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	2103      	movs	r1, #3
 8003614:	4618      	mov	r0, r3
 8003616:	f7ff f9c3 	bl	80029a0 <LL_ADC_GetOffsetChannel>
 800361a:	4603      	mov	r3, r0
 800361c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003620:	2b00      	cmp	r3, #0
 8003622:	d10a      	bne.n	800363a <HAL_ADC_ConfigChannel+0x396>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	2103      	movs	r1, #3
 800362a:	4618      	mov	r0, r3
 800362c:	f7ff f9b8 	bl	80029a0 <LL_ADC_GetOffsetChannel>
 8003630:	4603      	mov	r3, r0
 8003632:	0e9b      	lsrs	r3, r3, #26
 8003634:	f003 021f 	and.w	r2, r3, #31
 8003638:	e017      	b.n	800366a <HAL_ADC_ConfigChannel+0x3c6>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	2103      	movs	r1, #3
 8003640:	4618      	mov	r0, r3
 8003642:	f7ff f9ad 	bl	80029a0 <LL_ADC_GetOffsetChannel>
 8003646:	4603      	mov	r3, r0
 8003648:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800364a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800364c:	fa93 f3a3 	rbit	r3, r3
 8003650:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003652:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003654:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003656:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003658:	2b00      	cmp	r3, #0
 800365a:	d101      	bne.n	8003660 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 800365c:	2320      	movs	r3, #32
 800365e:	e003      	b.n	8003668 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8003660:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003662:	fab3 f383 	clz	r3, r3
 8003666:	b2db      	uxtb	r3, r3
 8003668:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003672:	2b00      	cmp	r3, #0
 8003674:	d105      	bne.n	8003682 <HAL_ADC_ConfigChannel+0x3de>
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	0e9b      	lsrs	r3, r3, #26
 800367c:	f003 031f 	and.w	r3, r3, #31
 8003680:	e011      	b.n	80036a6 <HAL_ADC_ConfigChannel+0x402>
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003688:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800368a:	fa93 f3a3 	rbit	r3, r3
 800368e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003690:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003692:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003694:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003696:	2b00      	cmp	r3, #0
 8003698:	d101      	bne.n	800369e <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 800369a:	2320      	movs	r3, #32
 800369c:	e003      	b.n	80036a6 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 800369e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036a0:	fab3 f383 	clz	r3, r3
 80036a4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80036a6:	429a      	cmp	r2, r3
 80036a8:	d106      	bne.n	80036b8 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	2200      	movs	r2, #0
 80036b0:	2103      	movs	r1, #3
 80036b2:	4618      	mov	r0, r3
 80036b4:	f7ff f98a 	bl	80029cc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4618      	mov	r0, r3
 80036be:	f7ff faad 	bl	8002c1c <LL_ADC_IsEnabled>
 80036c2:	4603      	mov	r3, r0
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	f040 813f 	bne.w	8003948 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6818      	ldr	r0, [r3, #0]
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	6819      	ldr	r1, [r3, #0]
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	68db      	ldr	r3, [r3, #12]
 80036d6:	461a      	mov	r2, r3
 80036d8:	f7ff f9fe 	bl	8002ad8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	4a8e      	ldr	r2, [pc, #568]	; (800391c <HAL_ADC_ConfigChannel+0x678>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	f040 8130 	bne.w	8003948 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d10b      	bne.n	8003710 <HAL_ADC_ConfigChannel+0x46c>
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	0e9b      	lsrs	r3, r3, #26
 80036fe:	3301      	adds	r3, #1
 8003700:	f003 031f 	and.w	r3, r3, #31
 8003704:	2b09      	cmp	r3, #9
 8003706:	bf94      	ite	ls
 8003708:	2301      	movls	r3, #1
 800370a:	2300      	movhi	r3, #0
 800370c:	b2db      	uxtb	r3, r3
 800370e:	e019      	b.n	8003744 <HAL_ADC_ConfigChannel+0x4a0>
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003716:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003718:	fa93 f3a3 	rbit	r3, r3
 800371c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800371e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003720:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003722:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003724:	2b00      	cmp	r3, #0
 8003726:	d101      	bne.n	800372c <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8003728:	2320      	movs	r3, #32
 800372a:	e003      	b.n	8003734 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 800372c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800372e:	fab3 f383 	clz	r3, r3
 8003732:	b2db      	uxtb	r3, r3
 8003734:	3301      	adds	r3, #1
 8003736:	f003 031f 	and.w	r3, r3, #31
 800373a:	2b09      	cmp	r3, #9
 800373c:	bf94      	ite	ls
 800373e:	2301      	movls	r3, #1
 8003740:	2300      	movhi	r3, #0
 8003742:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003744:	2b00      	cmp	r3, #0
 8003746:	d079      	beq.n	800383c <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003750:	2b00      	cmp	r3, #0
 8003752:	d107      	bne.n	8003764 <HAL_ADC_ConfigChannel+0x4c0>
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	0e9b      	lsrs	r3, r3, #26
 800375a:	3301      	adds	r3, #1
 800375c:	069b      	lsls	r3, r3, #26
 800375e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003762:	e015      	b.n	8003790 <HAL_ADC_ConfigChannel+0x4ec>
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800376a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800376c:	fa93 f3a3 	rbit	r3, r3
 8003770:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003772:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003774:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003776:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003778:	2b00      	cmp	r3, #0
 800377a:	d101      	bne.n	8003780 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 800377c:	2320      	movs	r3, #32
 800377e:	e003      	b.n	8003788 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8003780:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003782:	fab3 f383 	clz	r3, r3
 8003786:	b2db      	uxtb	r3, r3
 8003788:	3301      	adds	r3, #1
 800378a:	069b      	lsls	r3, r3, #26
 800378c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003798:	2b00      	cmp	r3, #0
 800379a:	d109      	bne.n	80037b0 <HAL_ADC_ConfigChannel+0x50c>
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	0e9b      	lsrs	r3, r3, #26
 80037a2:	3301      	adds	r3, #1
 80037a4:	f003 031f 	and.w	r3, r3, #31
 80037a8:	2101      	movs	r1, #1
 80037aa:	fa01 f303 	lsl.w	r3, r1, r3
 80037ae:	e017      	b.n	80037e0 <HAL_ADC_ConfigChannel+0x53c>
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037b8:	fa93 f3a3 	rbit	r3, r3
 80037bc:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80037be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037c0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80037c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d101      	bne.n	80037cc <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 80037c8:	2320      	movs	r3, #32
 80037ca:	e003      	b.n	80037d4 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 80037cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037ce:	fab3 f383 	clz	r3, r3
 80037d2:	b2db      	uxtb	r3, r3
 80037d4:	3301      	adds	r3, #1
 80037d6:	f003 031f 	and.w	r3, r3, #31
 80037da:	2101      	movs	r1, #1
 80037dc:	fa01 f303 	lsl.w	r3, r1, r3
 80037e0:	ea42 0103 	orr.w	r1, r2, r3
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d10a      	bne.n	8003806 <HAL_ADC_ConfigChannel+0x562>
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	0e9b      	lsrs	r3, r3, #26
 80037f6:	3301      	adds	r3, #1
 80037f8:	f003 021f 	and.w	r2, r3, #31
 80037fc:	4613      	mov	r3, r2
 80037fe:	005b      	lsls	r3, r3, #1
 8003800:	4413      	add	r3, r2
 8003802:	051b      	lsls	r3, r3, #20
 8003804:	e018      	b.n	8003838 <HAL_ADC_ConfigChannel+0x594>
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800380c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800380e:	fa93 f3a3 	rbit	r3, r3
 8003812:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003814:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003816:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003818:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800381a:	2b00      	cmp	r3, #0
 800381c:	d101      	bne.n	8003822 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 800381e:	2320      	movs	r3, #32
 8003820:	e003      	b.n	800382a <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8003822:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003824:	fab3 f383 	clz	r3, r3
 8003828:	b2db      	uxtb	r3, r3
 800382a:	3301      	adds	r3, #1
 800382c:	f003 021f 	and.w	r2, r3, #31
 8003830:	4613      	mov	r3, r2
 8003832:	005b      	lsls	r3, r3, #1
 8003834:	4413      	add	r3, r2
 8003836:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003838:	430b      	orrs	r3, r1
 800383a:	e080      	b.n	800393e <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003844:	2b00      	cmp	r3, #0
 8003846:	d107      	bne.n	8003858 <HAL_ADC_ConfigChannel+0x5b4>
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	0e9b      	lsrs	r3, r3, #26
 800384e:	3301      	adds	r3, #1
 8003850:	069b      	lsls	r3, r3, #26
 8003852:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003856:	e015      	b.n	8003884 <HAL_ADC_ConfigChannel+0x5e0>
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800385e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003860:	fa93 f3a3 	rbit	r3, r3
 8003864:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003868:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800386a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800386c:	2b00      	cmp	r3, #0
 800386e:	d101      	bne.n	8003874 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8003870:	2320      	movs	r3, #32
 8003872:	e003      	b.n	800387c <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8003874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003876:	fab3 f383 	clz	r3, r3
 800387a:	b2db      	uxtb	r3, r3
 800387c:	3301      	adds	r3, #1
 800387e:	069b      	lsls	r3, r3, #26
 8003880:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800388c:	2b00      	cmp	r3, #0
 800388e:	d109      	bne.n	80038a4 <HAL_ADC_ConfigChannel+0x600>
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	0e9b      	lsrs	r3, r3, #26
 8003896:	3301      	adds	r3, #1
 8003898:	f003 031f 	and.w	r3, r3, #31
 800389c:	2101      	movs	r1, #1
 800389e:	fa01 f303 	lsl.w	r3, r1, r3
 80038a2:	e017      	b.n	80038d4 <HAL_ADC_ConfigChannel+0x630>
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038aa:	6a3b      	ldr	r3, [r7, #32]
 80038ac:	fa93 f3a3 	rbit	r3, r3
 80038b0:	61fb      	str	r3, [r7, #28]
  return result;
 80038b2:	69fb      	ldr	r3, [r7, #28]
 80038b4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80038b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d101      	bne.n	80038c0 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 80038bc:	2320      	movs	r3, #32
 80038be:	e003      	b.n	80038c8 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 80038c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c2:	fab3 f383 	clz	r3, r3
 80038c6:	b2db      	uxtb	r3, r3
 80038c8:	3301      	adds	r3, #1
 80038ca:	f003 031f 	and.w	r3, r3, #31
 80038ce:	2101      	movs	r1, #1
 80038d0:	fa01 f303 	lsl.w	r3, r1, r3
 80038d4:	ea42 0103 	orr.w	r1, r2, r3
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d10d      	bne.n	8003900 <HAL_ADC_ConfigChannel+0x65c>
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	0e9b      	lsrs	r3, r3, #26
 80038ea:	3301      	adds	r3, #1
 80038ec:	f003 021f 	and.w	r2, r3, #31
 80038f0:	4613      	mov	r3, r2
 80038f2:	005b      	lsls	r3, r3, #1
 80038f4:	4413      	add	r3, r2
 80038f6:	3b1e      	subs	r3, #30
 80038f8:	051b      	lsls	r3, r3, #20
 80038fa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80038fe:	e01d      	b.n	800393c <HAL_ADC_ConfigChannel+0x698>
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	fa93 f3a3 	rbit	r3, r3
 800390c:	613b      	str	r3, [r7, #16]
  return result;
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003912:	69bb      	ldr	r3, [r7, #24]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d103      	bne.n	8003920 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8003918:	2320      	movs	r3, #32
 800391a:	e005      	b.n	8003928 <HAL_ADC_ConfigChannel+0x684>
 800391c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003920:	69bb      	ldr	r3, [r7, #24]
 8003922:	fab3 f383 	clz	r3, r3
 8003926:	b2db      	uxtb	r3, r3
 8003928:	3301      	adds	r3, #1
 800392a:	f003 021f 	and.w	r2, r3, #31
 800392e:	4613      	mov	r3, r2
 8003930:	005b      	lsls	r3, r3, #1
 8003932:	4413      	add	r3, r2
 8003934:	3b1e      	subs	r3, #30
 8003936:	051b      	lsls	r3, r3, #20
 8003938:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800393c:	430b      	orrs	r3, r1
 800393e:	683a      	ldr	r2, [r7, #0]
 8003940:	6892      	ldr	r2, [r2, #8]
 8003942:	4619      	mov	r1, r3
 8003944:	f7ff f89c 	bl	8002a80 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	4b44      	ldr	r3, [pc, #272]	; (8003a60 <HAL_ADC_ConfigChannel+0x7bc>)
 800394e:	4013      	ands	r3, r2
 8003950:	2b00      	cmp	r3, #0
 8003952:	d07a      	beq.n	8003a4a <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003954:	4843      	ldr	r0, [pc, #268]	; (8003a64 <HAL_ADC_ConfigChannel+0x7c0>)
 8003956:	f7fe fff1 	bl	800293c <LL_ADC_GetCommonPathInternalCh>
 800395a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a41      	ldr	r2, [pc, #260]	; (8003a68 <HAL_ADC_ConfigChannel+0x7c4>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d12c      	bne.n	80039c2 <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003968:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800396c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003970:	2b00      	cmp	r3, #0
 8003972:	d126      	bne.n	80039c2 <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a3c      	ldr	r2, [pc, #240]	; (8003a6c <HAL_ADC_ConfigChannel+0x7c8>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d004      	beq.n	8003988 <HAL_ADC_ConfigChannel+0x6e4>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a3b      	ldr	r2, [pc, #236]	; (8003a70 <HAL_ADC_ConfigChannel+0x7cc>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d15d      	bne.n	8003a44 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003988:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800398c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003990:	4619      	mov	r1, r3
 8003992:	4834      	ldr	r0, [pc, #208]	; (8003a64 <HAL_ADC_ConfigChannel+0x7c0>)
 8003994:	f7fe ffbf 	bl	8002916 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003998:	4b36      	ldr	r3, [pc, #216]	; (8003a74 <HAL_ADC_ConfigChannel+0x7d0>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	099b      	lsrs	r3, r3, #6
 800399e:	4a36      	ldr	r2, [pc, #216]	; (8003a78 <HAL_ADC_ConfigChannel+0x7d4>)
 80039a0:	fba2 2303 	umull	r2, r3, r2, r3
 80039a4:	099b      	lsrs	r3, r3, #6
 80039a6:	1c5a      	adds	r2, r3, #1
 80039a8:	4613      	mov	r3, r2
 80039aa:	005b      	lsls	r3, r3, #1
 80039ac:	4413      	add	r3, r2
 80039ae:	009b      	lsls	r3, r3, #2
 80039b0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80039b2:	e002      	b.n	80039ba <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	3b01      	subs	r3, #1
 80039b8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d1f9      	bne.n	80039b4 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80039c0:	e040      	b.n	8003a44 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a2d      	ldr	r2, [pc, #180]	; (8003a7c <HAL_ADC_ConfigChannel+0x7d8>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d118      	bne.n	80039fe <HAL_ADC_ConfigChannel+0x75a>
 80039cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80039d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d112      	bne.n	80039fe <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a23      	ldr	r2, [pc, #140]	; (8003a6c <HAL_ADC_ConfigChannel+0x7c8>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d004      	beq.n	80039ec <HAL_ADC_ConfigChannel+0x748>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a22      	ldr	r2, [pc, #136]	; (8003a70 <HAL_ADC_ConfigChannel+0x7cc>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d12d      	bne.n	8003a48 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80039ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80039f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039f4:	4619      	mov	r1, r3
 80039f6:	481b      	ldr	r0, [pc, #108]	; (8003a64 <HAL_ADC_ConfigChannel+0x7c0>)
 80039f8:	f7fe ff8d 	bl	8002916 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80039fc:	e024      	b.n	8003a48 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a1f      	ldr	r2, [pc, #124]	; (8003a80 <HAL_ADC_ConfigChannel+0x7dc>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d120      	bne.n	8003a4a <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003a08:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003a0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d11a      	bne.n	8003a4a <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a14      	ldr	r2, [pc, #80]	; (8003a6c <HAL_ADC_ConfigChannel+0x7c8>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d115      	bne.n	8003a4a <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003a1e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003a22:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003a26:	4619      	mov	r1, r3
 8003a28:	480e      	ldr	r0, [pc, #56]	; (8003a64 <HAL_ADC_ConfigChannel+0x7c0>)
 8003a2a:	f7fe ff74 	bl	8002916 <LL_ADC_SetCommonPathInternalCh>
 8003a2e:	e00c      	b.n	8003a4a <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a34:	f043 0220 	orr.w	r2, r3, #32
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003a42:	e002      	b.n	8003a4a <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003a44:	bf00      	nop
 8003a46:	e000      	b.n	8003a4a <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003a48:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003a52:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	37d8      	adds	r7, #216	; 0xd8
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}
 8003a5e:	bf00      	nop
 8003a60:	80080000 	.word	0x80080000
 8003a64:	50040300 	.word	0x50040300
 8003a68:	c7520000 	.word	0xc7520000
 8003a6c:	50040000 	.word	0x50040000
 8003a70:	50040200 	.word	0x50040200
 8003a74:	20000008 	.word	0x20000008
 8003a78:	053e2d63 	.word	0x053e2d63
 8003a7c:	cb840000 	.word	0xcb840000
 8003a80:	80000001 	.word	0x80000001

08003a84 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b084      	sub	sp, #16
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4618      	mov	r0, r3
 8003a92:	f7ff f8c3 	bl	8002c1c <LL_ADC_IsEnabled>
 8003a96:	4603      	mov	r3, r0
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d14d      	bne.n	8003b38 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	689a      	ldr	r2, [r3, #8]
 8003aa2:	4b28      	ldr	r3, [pc, #160]	; (8003b44 <ADC_Enable+0xc0>)
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d00d      	beq.n	8003ac6 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aae:	f043 0210 	orr.w	r2, r3, #16
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aba:	f043 0201 	orr.w	r2, r3, #1
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e039      	b.n	8003b3a <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4618      	mov	r0, r3
 8003acc:	f7ff f892 	bl	8002bf4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003ad0:	f7fe fede 	bl	8002890 <HAL_GetTick>
 8003ad4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003ad6:	e028      	b.n	8003b2a <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4618      	mov	r0, r3
 8003ade:	f7ff f89d 	bl	8002c1c <LL_ADC_IsEnabled>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d104      	bne.n	8003af2 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4618      	mov	r0, r3
 8003aee:	f7ff f881 	bl	8002bf4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003af2:	f7fe fecd 	bl	8002890 <HAL_GetTick>
 8003af6:	4602      	mov	r2, r0
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	1ad3      	subs	r3, r2, r3
 8003afc:	2b02      	cmp	r3, #2
 8003afe:	d914      	bls.n	8003b2a <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f003 0301 	and.w	r3, r3, #1
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d00d      	beq.n	8003b2a <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b12:	f043 0210 	orr.w	r2, r3, #16
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b1e:	f043 0201 	orr.w	r2, r3, #1
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e007      	b.n	8003b3a <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 0301 	and.w	r3, r3, #1
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d1cf      	bne.n	8003ad8 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003b38:	2300      	movs	r3, #0
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3710      	adds	r7, #16
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	bf00      	nop
 8003b44:	8000003f 	.word	0x8000003f

08003b48 <LL_ADC_IsEnabled>:
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b083      	sub	sp, #12
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	f003 0301 	and.w	r3, r3, #1
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d101      	bne.n	8003b60 <LL_ADC_IsEnabled+0x18>
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	e000      	b.n	8003b62 <LL_ADC_IsEnabled+0x1a>
 8003b60:	2300      	movs	r3, #0
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	370c      	adds	r7, #12
 8003b66:	46bd      	mov	sp, r7
 8003b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6c:	4770      	bx	lr

08003b6e <LL_ADC_REG_IsConversionOngoing>:
{
 8003b6e:	b480      	push	{r7}
 8003b70:	b083      	sub	sp, #12
 8003b72:	af00      	add	r7, sp, #0
 8003b74:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	f003 0304 	and.w	r3, r3, #4
 8003b7e:	2b04      	cmp	r3, #4
 8003b80:	d101      	bne.n	8003b86 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003b82:	2301      	movs	r3, #1
 8003b84:	e000      	b.n	8003b88 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003b86:	2300      	movs	r3, #0
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	370c      	adds	r7, #12
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b92:	4770      	bx	lr

08003b94 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003b94:	b590      	push	{r4, r7, lr}
 8003b96:	b09f      	sub	sp, #124	; 0x7c
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	d101      	bne.n	8003bb2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003bae:	2302      	movs	r3, #2
 8003bb0:	e093      	b.n	8003cda <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8003bba:	2300      	movs	r3, #0
 8003bbc:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a47      	ldr	r2, [pc, #284]	; (8003ce4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d102      	bne.n	8003bd2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003bcc:	4b46      	ldr	r3, [pc, #280]	; (8003ce8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003bce:	60bb      	str	r3, [r7, #8]
 8003bd0:	e001      	b.n	8003bd6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d10b      	bne.n	8003bf4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003be0:	f043 0220 	orr.w	r2, r3, #32
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2200      	movs	r2, #0
 8003bec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e072      	b.n	8003cda <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f7ff ffb9 	bl	8003b6e <LL_ADC_REG_IsConversionOngoing>
 8003bfc:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4618      	mov	r0, r3
 8003c04:	f7ff ffb3 	bl	8003b6e <LL_ADC_REG_IsConversionOngoing>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d154      	bne.n	8003cb8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003c0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d151      	bne.n	8003cb8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003c14:	4b35      	ldr	r3, [pc, #212]	; (8003cec <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8003c16:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d02c      	beq.n	8003c7a <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003c20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	6859      	ldr	r1, [r3, #4]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003c32:	035b      	lsls	r3, r3, #13
 8003c34:	430b      	orrs	r3, r1
 8003c36:	431a      	orrs	r2, r3
 8003c38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c3a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003c3c:	4829      	ldr	r0, [pc, #164]	; (8003ce4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003c3e:	f7ff ff83 	bl	8003b48 <LL_ADC_IsEnabled>
 8003c42:	4604      	mov	r4, r0
 8003c44:	4828      	ldr	r0, [pc, #160]	; (8003ce8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003c46:	f7ff ff7f 	bl	8003b48 <LL_ADC_IsEnabled>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	431c      	orrs	r4, r3
 8003c4e:	4828      	ldr	r0, [pc, #160]	; (8003cf0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003c50:	f7ff ff7a 	bl	8003b48 <LL_ADC_IsEnabled>
 8003c54:	4603      	mov	r3, r0
 8003c56:	4323      	orrs	r3, r4
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d137      	bne.n	8003ccc <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003c5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003c64:	f023 030f 	bic.w	r3, r3, #15
 8003c68:	683a      	ldr	r2, [r7, #0]
 8003c6a:	6811      	ldr	r1, [r2, #0]
 8003c6c:	683a      	ldr	r2, [r7, #0]
 8003c6e:	6892      	ldr	r2, [r2, #8]
 8003c70:	430a      	orrs	r2, r1
 8003c72:	431a      	orrs	r2, r3
 8003c74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c76:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003c78:	e028      	b.n	8003ccc <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003c7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c84:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003c86:	4817      	ldr	r0, [pc, #92]	; (8003ce4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003c88:	f7ff ff5e 	bl	8003b48 <LL_ADC_IsEnabled>
 8003c8c:	4604      	mov	r4, r0
 8003c8e:	4816      	ldr	r0, [pc, #88]	; (8003ce8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003c90:	f7ff ff5a 	bl	8003b48 <LL_ADC_IsEnabled>
 8003c94:	4603      	mov	r3, r0
 8003c96:	431c      	orrs	r4, r3
 8003c98:	4815      	ldr	r0, [pc, #84]	; (8003cf0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003c9a:	f7ff ff55 	bl	8003b48 <LL_ADC_IsEnabled>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	4323      	orrs	r3, r4
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d112      	bne.n	8003ccc <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003ca6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003cae:	f023 030f 	bic.w	r3, r3, #15
 8003cb2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003cb4:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003cb6:	e009      	b.n	8003ccc <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cbc:	f043 0220 	orr.w	r2, r3, #32
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003cca:	e000      	b.n	8003cce <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003ccc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003cd6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	377c      	adds	r7, #124	; 0x7c
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd90      	pop	{r4, r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	50040000 	.word	0x50040000
 8003ce8:	50040100 	.word	0x50040100
 8003cec:	50040300 	.word	0x50040300
 8003cf0:	50040200 	.word	0x50040200

08003cf4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b085      	sub	sp, #20
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	f003 0307 	and.w	r3, r3, #7
 8003d02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d04:	4b0c      	ldr	r3, [pc, #48]	; (8003d38 <__NVIC_SetPriorityGrouping+0x44>)
 8003d06:	68db      	ldr	r3, [r3, #12]
 8003d08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d0a:	68ba      	ldr	r2, [r7, #8]
 8003d0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003d10:	4013      	ands	r3, r2
 8003d12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003d1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003d20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d26:	4a04      	ldr	r2, [pc, #16]	; (8003d38 <__NVIC_SetPriorityGrouping+0x44>)
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	60d3      	str	r3, [r2, #12]
}
 8003d2c:	bf00      	nop
 8003d2e:	3714      	adds	r7, #20
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr
 8003d38:	e000ed00 	.word	0xe000ed00

08003d3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d40:	4b04      	ldr	r3, [pc, #16]	; (8003d54 <__NVIC_GetPriorityGrouping+0x18>)
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	0a1b      	lsrs	r3, r3, #8
 8003d46:	f003 0307 	and.w	r3, r3, #7
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d52:	4770      	bx	lr
 8003d54:	e000ed00 	.word	0xe000ed00

08003d58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b083      	sub	sp, #12
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	4603      	mov	r3, r0
 8003d60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	db0b      	blt.n	8003d82 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d6a:	79fb      	ldrb	r3, [r7, #7]
 8003d6c:	f003 021f 	and.w	r2, r3, #31
 8003d70:	4907      	ldr	r1, [pc, #28]	; (8003d90 <__NVIC_EnableIRQ+0x38>)
 8003d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d76:	095b      	lsrs	r3, r3, #5
 8003d78:	2001      	movs	r0, #1
 8003d7a:	fa00 f202 	lsl.w	r2, r0, r2
 8003d7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003d82:	bf00      	nop
 8003d84:	370c      	adds	r7, #12
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr
 8003d8e:	bf00      	nop
 8003d90:	e000e100 	.word	0xe000e100

08003d94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b083      	sub	sp, #12
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	6039      	str	r1, [r7, #0]
 8003d9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003da0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	db0a      	blt.n	8003dbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	b2da      	uxtb	r2, r3
 8003dac:	490c      	ldr	r1, [pc, #48]	; (8003de0 <__NVIC_SetPriority+0x4c>)
 8003dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003db2:	0112      	lsls	r2, r2, #4
 8003db4:	b2d2      	uxtb	r2, r2
 8003db6:	440b      	add	r3, r1
 8003db8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003dbc:	e00a      	b.n	8003dd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	b2da      	uxtb	r2, r3
 8003dc2:	4908      	ldr	r1, [pc, #32]	; (8003de4 <__NVIC_SetPriority+0x50>)
 8003dc4:	79fb      	ldrb	r3, [r7, #7]
 8003dc6:	f003 030f 	and.w	r3, r3, #15
 8003dca:	3b04      	subs	r3, #4
 8003dcc:	0112      	lsls	r2, r2, #4
 8003dce:	b2d2      	uxtb	r2, r2
 8003dd0:	440b      	add	r3, r1
 8003dd2:	761a      	strb	r2, [r3, #24]
}
 8003dd4:	bf00      	nop
 8003dd6:	370c      	adds	r7, #12
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dde:	4770      	bx	lr
 8003de0:	e000e100 	.word	0xe000e100
 8003de4:	e000ed00 	.word	0xe000ed00

08003de8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b089      	sub	sp, #36	; 0x24
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	60f8      	str	r0, [r7, #12]
 8003df0:	60b9      	str	r1, [r7, #8]
 8003df2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	f003 0307 	and.w	r3, r3, #7
 8003dfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003dfc:	69fb      	ldr	r3, [r7, #28]
 8003dfe:	f1c3 0307 	rsb	r3, r3, #7
 8003e02:	2b04      	cmp	r3, #4
 8003e04:	bf28      	it	cs
 8003e06:	2304      	movcs	r3, #4
 8003e08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e0a:	69fb      	ldr	r3, [r7, #28]
 8003e0c:	3304      	adds	r3, #4
 8003e0e:	2b06      	cmp	r3, #6
 8003e10:	d902      	bls.n	8003e18 <NVIC_EncodePriority+0x30>
 8003e12:	69fb      	ldr	r3, [r7, #28]
 8003e14:	3b03      	subs	r3, #3
 8003e16:	e000      	b.n	8003e1a <NVIC_EncodePriority+0x32>
 8003e18:	2300      	movs	r3, #0
 8003e1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e1c:	f04f 32ff 	mov.w	r2, #4294967295
 8003e20:	69bb      	ldr	r3, [r7, #24]
 8003e22:	fa02 f303 	lsl.w	r3, r2, r3
 8003e26:	43da      	mvns	r2, r3
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	401a      	ands	r2, r3
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e30:	f04f 31ff 	mov.w	r1, #4294967295
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	fa01 f303 	lsl.w	r3, r1, r3
 8003e3a:	43d9      	mvns	r1, r3
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e40:	4313      	orrs	r3, r2
         );
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3724      	adds	r7, #36	; 0x24
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr
	...

08003e50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b082      	sub	sp, #8
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	3b01      	subs	r3, #1
 8003e5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e60:	d301      	bcc.n	8003e66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003e62:	2301      	movs	r3, #1
 8003e64:	e00f      	b.n	8003e86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e66:	4a0a      	ldr	r2, [pc, #40]	; (8003e90 <SysTick_Config+0x40>)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	3b01      	subs	r3, #1
 8003e6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e6e:	210f      	movs	r1, #15
 8003e70:	f04f 30ff 	mov.w	r0, #4294967295
 8003e74:	f7ff ff8e 	bl	8003d94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e78:	4b05      	ldr	r3, [pc, #20]	; (8003e90 <SysTick_Config+0x40>)
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e7e:	4b04      	ldr	r3, [pc, #16]	; (8003e90 <SysTick_Config+0x40>)
 8003e80:	2207      	movs	r2, #7
 8003e82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e84:	2300      	movs	r3, #0
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3708      	adds	r7, #8
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	bf00      	nop
 8003e90:	e000e010 	.word	0xe000e010

08003e94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b082      	sub	sp, #8
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	f7ff ff29 	bl	8003cf4 <__NVIC_SetPriorityGrouping>
}
 8003ea2:	bf00      	nop
 8003ea4:	3708      	adds	r7, #8
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}

08003eaa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003eaa:	b580      	push	{r7, lr}
 8003eac:	b086      	sub	sp, #24
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	60b9      	str	r1, [r7, #8]
 8003eb4:	607a      	str	r2, [r7, #4]
 8003eb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003ebc:	f7ff ff3e 	bl	8003d3c <__NVIC_GetPriorityGrouping>
 8003ec0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ec2:	687a      	ldr	r2, [r7, #4]
 8003ec4:	68b9      	ldr	r1, [r7, #8]
 8003ec6:	6978      	ldr	r0, [r7, #20]
 8003ec8:	f7ff ff8e 	bl	8003de8 <NVIC_EncodePriority>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ed2:	4611      	mov	r1, r2
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f7ff ff5d 	bl	8003d94 <__NVIC_SetPriority>
}
 8003eda:	bf00      	nop
 8003edc:	3718      	adds	r7, #24
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}

08003ee2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ee2:	b580      	push	{r7, lr}
 8003ee4:	b082      	sub	sp, #8
 8003ee6:	af00      	add	r7, sp, #0
 8003ee8:	4603      	mov	r3, r0
 8003eea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003eec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f7ff ff31 	bl	8003d58 <__NVIC_EnableIRQ>
}
 8003ef6:	bf00      	nop
 8003ef8:	3708      	adds	r7, #8
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}

08003efe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003efe:	b580      	push	{r7, lr}
 8003f00:	b082      	sub	sp, #8
 8003f02:	af00      	add	r7, sp, #0
 8003f04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f7ff ffa2 	bl	8003e50 <SysTick_Config>
 8003f0c:	4603      	mov	r3, r0
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3708      	adds	r7, #8
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
	...

08003f18 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b085      	sub	sp, #20
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d101      	bne.n	8003f2a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e098      	b.n	800405c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	461a      	mov	r2, r3
 8003f30:	4b4d      	ldr	r3, [pc, #308]	; (8004068 <HAL_DMA_Init+0x150>)
 8003f32:	429a      	cmp	r2, r3
 8003f34:	d80f      	bhi.n	8003f56 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	4b4b      	ldr	r3, [pc, #300]	; (800406c <HAL_DMA_Init+0x154>)
 8003f3e:	4413      	add	r3, r2
 8003f40:	4a4b      	ldr	r2, [pc, #300]	; (8004070 <HAL_DMA_Init+0x158>)
 8003f42:	fba2 2303 	umull	r2, r3, r2, r3
 8003f46:	091b      	lsrs	r3, r3, #4
 8003f48:	009a      	lsls	r2, r3, #2
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	4a48      	ldr	r2, [pc, #288]	; (8004074 <HAL_DMA_Init+0x15c>)
 8003f52:	641a      	str	r2, [r3, #64]	; 0x40
 8003f54:	e00e      	b.n	8003f74 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	461a      	mov	r2, r3
 8003f5c:	4b46      	ldr	r3, [pc, #280]	; (8004078 <HAL_DMA_Init+0x160>)
 8003f5e:	4413      	add	r3, r2
 8003f60:	4a43      	ldr	r2, [pc, #268]	; (8004070 <HAL_DMA_Init+0x158>)
 8003f62:	fba2 2303 	umull	r2, r3, r2, r3
 8003f66:	091b      	lsrs	r3, r3, #4
 8003f68:	009a      	lsls	r2, r3, #2
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	4a42      	ldr	r2, [pc, #264]	; (800407c <HAL_DMA_Init+0x164>)
 8003f72:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2202      	movs	r2, #2
 8003f78:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003f8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f8e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003f98:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	691b      	ldr	r3, [r3, #16]
 8003f9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fa4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	699b      	ldr	r3, [r3, #24]
 8003faa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fb0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6a1b      	ldr	r3, [r3, #32]
 8003fb6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003fb8:	68fa      	ldr	r2, [r7, #12]
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	68fa      	ldr	r2, [r7, #12]
 8003fc4:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003fce:	d039      	beq.n	8004044 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd4:	4a27      	ldr	r2, [pc, #156]	; (8004074 <HAL_DMA_Init+0x15c>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d11a      	bne.n	8004010 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003fda:	4b29      	ldr	r3, [pc, #164]	; (8004080 <HAL_DMA_Init+0x168>)
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fe2:	f003 031c 	and.w	r3, r3, #28
 8003fe6:	210f      	movs	r1, #15
 8003fe8:	fa01 f303 	lsl.w	r3, r1, r3
 8003fec:	43db      	mvns	r3, r3
 8003fee:	4924      	ldr	r1, [pc, #144]	; (8004080 <HAL_DMA_Init+0x168>)
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003ff4:	4b22      	ldr	r3, [pc, #136]	; (8004080 <HAL_DMA_Init+0x168>)
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6859      	ldr	r1, [r3, #4]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004000:	f003 031c 	and.w	r3, r3, #28
 8004004:	fa01 f303 	lsl.w	r3, r1, r3
 8004008:	491d      	ldr	r1, [pc, #116]	; (8004080 <HAL_DMA_Init+0x168>)
 800400a:	4313      	orrs	r3, r2
 800400c:	600b      	str	r3, [r1, #0]
 800400e:	e019      	b.n	8004044 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004010:	4b1c      	ldr	r3, [pc, #112]	; (8004084 <HAL_DMA_Init+0x16c>)
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004018:	f003 031c 	and.w	r3, r3, #28
 800401c:	210f      	movs	r1, #15
 800401e:	fa01 f303 	lsl.w	r3, r1, r3
 8004022:	43db      	mvns	r3, r3
 8004024:	4917      	ldr	r1, [pc, #92]	; (8004084 <HAL_DMA_Init+0x16c>)
 8004026:	4013      	ands	r3, r2
 8004028:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800402a:	4b16      	ldr	r3, [pc, #88]	; (8004084 <HAL_DMA_Init+0x16c>)
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6859      	ldr	r1, [r3, #4]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004036:	f003 031c 	and.w	r3, r3, #28
 800403a:	fa01 f303 	lsl.w	r3, r1, r3
 800403e:	4911      	ldr	r1, [pc, #68]	; (8004084 <HAL_DMA_Init+0x16c>)
 8004040:	4313      	orrs	r3, r2
 8004042:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2200      	movs	r2, #0
 8004048:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2201      	movs	r2, #1
 800404e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2200      	movs	r2, #0
 8004056:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800405a:	2300      	movs	r3, #0
}
 800405c:	4618      	mov	r0, r3
 800405e:	3714      	adds	r7, #20
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr
 8004068:	40020407 	.word	0x40020407
 800406c:	bffdfff8 	.word	0xbffdfff8
 8004070:	cccccccd 	.word	0xcccccccd
 8004074:	40020000 	.word	0x40020000
 8004078:	bffdfbf8 	.word	0xbffdfbf8
 800407c:	40020400 	.word	0x40020400
 8004080:	400200a8 	.word	0x400200a8
 8004084:	400204a8 	.word	0x400204a8

08004088 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b086      	sub	sp, #24
 800408c:	af00      	add	r7, sp, #0
 800408e:	60f8      	str	r0, [r7, #12]
 8004090:	60b9      	str	r1, [r7, #8]
 8004092:	607a      	str	r2, [r7, #4]
 8004094:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004096:	2300      	movs	r3, #0
 8004098:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d101      	bne.n	80040a8 <HAL_DMA_Start_IT+0x20>
 80040a4:	2302      	movs	r3, #2
 80040a6:	e04b      	b.n	8004140 <HAL_DMA_Start_IT+0xb8>
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2201      	movs	r2, #1
 80040ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	d13a      	bne.n	8004132 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2202      	movs	r2, #2
 80040c0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2200      	movs	r2, #0
 80040c8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f022 0201 	bic.w	r2, r2, #1
 80040d8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	687a      	ldr	r2, [r7, #4]
 80040de:	68b9      	ldr	r1, [r7, #8]
 80040e0:	68f8      	ldr	r0, [r7, #12]
 80040e2:	f000 f95f 	bl	80043a4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d008      	beq.n	8004100 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f042 020e 	orr.w	r2, r2, #14
 80040fc:	601a      	str	r2, [r3, #0]
 80040fe:	e00f      	b.n	8004120 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f022 0204 	bic.w	r2, r2, #4
 800410e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f042 020a 	orr.w	r2, r2, #10
 800411e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f042 0201 	orr.w	r2, r2, #1
 800412e:	601a      	str	r2, [r3, #0]
 8004130:	e005      	b.n	800413e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2200      	movs	r2, #0
 8004136:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800413a:	2302      	movs	r3, #2
 800413c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800413e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004140:	4618      	mov	r0, r3
 8004142:	3718      	adds	r7, #24
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}

08004148 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004148:	b480      	push	{r7}
 800414a:	b085      	sub	sp, #20
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004150:	2300      	movs	r3, #0
 8004152:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800415a:	b2db      	uxtb	r3, r3
 800415c:	2b02      	cmp	r3, #2
 800415e:	d008      	beq.n	8004172 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2204      	movs	r2, #4
 8004164:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	e022      	b.n	80041b8 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f022 020e 	bic.w	r2, r2, #14
 8004180:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	681a      	ldr	r2, [r3, #0]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f022 0201 	bic.w	r2, r2, #1
 8004190:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004196:	f003 021c 	and.w	r2, r3, #28
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800419e:	2101      	movs	r1, #1
 80041a0:	fa01 f202 	lsl.w	r2, r1, r2
 80041a4:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2201      	movs	r2, #1
 80041aa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2200      	movs	r2, #0
 80041b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80041b6:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	3714      	adds	r7, #20
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr

080041c4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b084      	sub	sp, #16
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041cc:	2300      	movs	r3, #0
 80041ce:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80041d6:	b2db      	uxtb	r3, r3
 80041d8:	2b02      	cmp	r3, #2
 80041da:	d005      	beq.n	80041e8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2204      	movs	r2, #4
 80041e0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	73fb      	strb	r3, [r7, #15]
 80041e6:	e029      	b.n	800423c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f022 020e 	bic.w	r2, r2, #14
 80041f6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f022 0201 	bic.w	r2, r2, #1
 8004206:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800420c:	f003 021c 	and.w	r2, r3, #28
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004214:	2101      	movs	r1, #1
 8004216:	fa01 f202 	lsl.w	r2, r1, r2
 800421a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2201      	movs	r2, #1
 8004220:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2200      	movs	r2, #0
 8004228:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004230:	2b00      	cmp	r3, #0
 8004232:	d003      	beq.n	800423c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	4798      	blx	r3
    }
  }
  return status;
 800423c:	7bfb      	ldrb	r3, [r7, #15]
}
 800423e:	4618      	mov	r0, r3
 8004240:	3710      	adds	r7, #16
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}

08004246 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004246:	b580      	push	{r7, lr}
 8004248:	b084      	sub	sp, #16
 800424a:	af00      	add	r7, sp, #0
 800424c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004262:	f003 031c 	and.w	r3, r3, #28
 8004266:	2204      	movs	r2, #4
 8004268:	409a      	lsls	r2, r3
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	4013      	ands	r3, r2
 800426e:	2b00      	cmp	r3, #0
 8004270:	d026      	beq.n	80042c0 <HAL_DMA_IRQHandler+0x7a>
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	f003 0304 	and.w	r3, r3, #4
 8004278:	2b00      	cmp	r3, #0
 800427a:	d021      	beq.n	80042c0 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 0320 	and.w	r3, r3, #32
 8004286:	2b00      	cmp	r3, #0
 8004288:	d107      	bne.n	800429a <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f022 0204 	bic.w	r2, r2, #4
 8004298:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800429e:	f003 021c 	and.w	r2, r3, #28
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a6:	2104      	movs	r1, #4
 80042a8:	fa01 f202 	lsl.w	r2, r1, r2
 80042ac:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d071      	beq.n	800439a <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80042be:	e06c      	b.n	800439a <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042c4:	f003 031c 	and.w	r3, r3, #28
 80042c8:	2202      	movs	r2, #2
 80042ca:	409a      	lsls	r2, r3
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	4013      	ands	r3, r2
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d02e      	beq.n	8004332 <HAL_DMA_IRQHandler+0xec>
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	f003 0302 	and.w	r3, r3, #2
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d029      	beq.n	8004332 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 0320 	and.w	r3, r3, #32
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d10b      	bne.n	8004304 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f022 020a 	bic.w	r2, r2, #10
 80042fa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2201      	movs	r2, #1
 8004300:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004308:	f003 021c 	and.w	r2, r3, #28
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004310:	2102      	movs	r1, #2
 8004312:	fa01 f202 	lsl.w	r2, r1, r2
 8004316:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2200      	movs	r2, #0
 800431c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004324:	2b00      	cmp	r3, #0
 8004326:	d038      	beq.n	800439a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800432c:	6878      	ldr	r0, [r7, #4]
 800432e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004330:	e033      	b.n	800439a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004336:	f003 031c 	and.w	r3, r3, #28
 800433a:	2208      	movs	r2, #8
 800433c:	409a      	lsls	r2, r3
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	4013      	ands	r3, r2
 8004342:	2b00      	cmp	r3, #0
 8004344:	d02a      	beq.n	800439c <HAL_DMA_IRQHandler+0x156>
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	f003 0308 	and.w	r3, r3, #8
 800434c:	2b00      	cmp	r3, #0
 800434e:	d025      	beq.n	800439c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f022 020e 	bic.w	r2, r2, #14
 800435e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004364:	f003 021c 	and.w	r2, r3, #28
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800436c:	2101      	movs	r1, #1
 800436e:	fa01 f202 	lsl.w	r2, r1, r2
 8004372:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2201      	movs	r2, #1
 8004378:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2201      	movs	r2, #1
 800437e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2200      	movs	r2, #0
 8004386:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800438e:	2b00      	cmp	r3, #0
 8004390:	d004      	beq.n	800439c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800439a:	bf00      	nop
 800439c:	bf00      	nop
}
 800439e:	3710      	adds	r7, #16
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}

080043a4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b085      	sub	sp, #20
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	60f8      	str	r0, [r7, #12]
 80043ac:	60b9      	str	r1, [r7, #8]
 80043ae:	607a      	str	r2, [r7, #4]
 80043b0:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043b6:	f003 021c 	and.w	r2, r3, #28
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043be:	2101      	movs	r1, #1
 80043c0:	fa01 f202 	lsl.w	r2, r1, r2
 80043c4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	683a      	ldr	r2, [r7, #0]
 80043cc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	2b10      	cmp	r3, #16
 80043d4:	d108      	bne.n	80043e8 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	687a      	ldr	r2, [r7, #4]
 80043dc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	68ba      	ldr	r2, [r7, #8]
 80043e4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80043e6:	e007      	b.n	80043f8 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	68ba      	ldr	r2, [r7, #8]
 80043ee:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	687a      	ldr	r2, [r7, #4]
 80043f6:	60da      	str	r2, [r3, #12]
}
 80043f8:	bf00      	nop
 80043fa:	3714      	adds	r7, #20
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr

08004404 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004404:	b480      	push	{r7}
 8004406:	b087      	sub	sp, #28
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800440e:	2300      	movs	r3, #0
 8004410:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004412:	e17f      	b.n	8004714 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	2101      	movs	r1, #1
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	fa01 f303 	lsl.w	r3, r1, r3
 8004420:	4013      	ands	r3, r2
 8004422:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2b00      	cmp	r3, #0
 8004428:	f000 8171 	beq.w	800470e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	f003 0303 	and.w	r3, r3, #3
 8004434:	2b01      	cmp	r3, #1
 8004436:	d005      	beq.n	8004444 <HAL_GPIO_Init+0x40>
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	f003 0303 	and.w	r3, r3, #3
 8004440:	2b02      	cmp	r3, #2
 8004442:	d130      	bne.n	80044a6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	005b      	lsls	r3, r3, #1
 800444e:	2203      	movs	r2, #3
 8004450:	fa02 f303 	lsl.w	r3, r2, r3
 8004454:	43db      	mvns	r3, r3
 8004456:	693a      	ldr	r2, [r7, #16]
 8004458:	4013      	ands	r3, r2
 800445a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	68da      	ldr	r2, [r3, #12]
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	005b      	lsls	r3, r3, #1
 8004464:	fa02 f303 	lsl.w	r3, r2, r3
 8004468:	693a      	ldr	r2, [r7, #16]
 800446a:	4313      	orrs	r3, r2
 800446c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	693a      	ldr	r2, [r7, #16]
 8004472:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800447a:	2201      	movs	r2, #1
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	fa02 f303 	lsl.w	r3, r2, r3
 8004482:	43db      	mvns	r3, r3
 8004484:	693a      	ldr	r2, [r7, #16]
 8004486:	4013      	ands	r3, r2
 8004488:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	091b      	lsrs	r3, r3, #4
 8004490:	f003 0201 	and.w	r2, r3, #1
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	fa02 f303 	lsl.w	r3, r2, r3
 800449a:	693a      	ldr	r2, [r7, #16]
 800449c:	4313      	orrs	r3, r2
 800449e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	693a      	ldr	r2, [r7, #16]
 80044a4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	f003 0303 	and.w	r3, r3, #3
 80044ae:	2b03      	cmp	r3, #3
 80044b0:	d118      	bne.n	80044e4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044b6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80044b8:	2201      	movs	r2, #1
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	fa02 f303 	lsl.w	r3, r2, r3
 80044c0:	43db      	mvns	r3, r3
 80044c2:	693a      	ldr	r2, [r7, #16]
 80044c4:	4013      	ands	r3, r2
 80044c6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	08db      	lsrs	r3, r3, #3
 80044ce:	f003 0201 	and.w	r2, r3, #1
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	fa02 f303 	lsl.w	r3, r2, r3
 80044d8:	693a      	ldr	r2, [r7, #16]
 80044da:	4313      	orrs	r3, r2
 80044dc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	693a      	ldr	r2, [r7, #16]
 80044e2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	f003 0303 	and.w	r3, r3, #3
 80044ec:	2b03      	cmp	r3, #3
 80044ee:	d017      	beq.n	8004520 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	68db      	ldr	r3, [r3, #12]
 80044f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	005b      	lsls	r3, r3, #1
 80044fa:	2203      	movs	r2, #3
 80044fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004500:	43db      	mvns	r3, r3
 8004502:	693a      	ldr	r2, [r7, #16]
 8004504:	4013      	ands	r3, r2
 8004506:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	689a      	ldr	r2, [r3, #8]
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	005b      	lsls	r3, r3, #1
 8004510:	fa02 f303 	lsl.w	r3, r2, r3
 8004514:	693a      	ldr	r2, [r7, #16]
 8004516:	4313      	orrs	r3, r2
 8004518:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	693a      	ldr	r2, [r7, #16]
 800451e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	f003 0303 	and.w	r3, r3, #3
 8004528:	2b02      	cmp	r3, #2
 800452a:	d123      	bne.n	8004574 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	08da      	lsrs	r2, r3, #3
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	3208      	adds	r2, #8
 8004534:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004538:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	f003 0307 	and.w	r3, r3, #7
 8004540:	009b      	lsls	r3, r3, #2
 8004542:	220f      	movs	r2, #15
 8004544:	fa02 f303 	lsl.w	r3, r2, r3
 8004548:	43db      	mvns	r3, r3
 800454a:	693a      	ldr	r2, [r7, #16]
 800454c:	4013      	ands	r3, r2
 800454e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	691a      	ldr	r2, [r3, #16]
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	f003 0307 	and.w	r3, r3, #7
 800455a:	009b      	lsls	r3, r3, #2
 800455c:	fa02 f303 	lsl.w	r3, r2, r3
 8004560:	693a      	ldr	r2, [r7, #16]
 8004562:	4313      	orrs	r3, r2
 8004564:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	08da      	lsrs	r2, r3, #3
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	3208      	adds	r2, #8
 800456e:	6939      	ldr	r1, [r7, #16]
 8004570:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	005b      	lsls	r3, r3, #1
 800457e:	2203      	movs	r2, #3
 8004580:	fa02 f303 	lsl.w	r3, r2, r3
 8004584:	43db      	mvns	r3, r3
 8004586:	693a      	ldr	r2, [r7, #16]
 8004588:	4013      	ands	r3, r2
 800458a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	f003 0203 	and.w	r2, r3, #3
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	005b      	lsls	r3, r3, #1
 8004598:	fa02 f303 	lsl.w	r3, r2, r3
 800459c:	693a      	ldr	r2, [r7, #16]
 800459e:	4313      	orrs	r3, r2
 80045a0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	693a      	ldr	r2, [r7, #16]
 80045a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	f000 80ac 	beq.w	800470e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045b6:	4b5f      	ldr	r3, [pc, #380]	; (8004734 <HAL_GPIO_Init+0x330>)
 80045b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045ba:	4a5e      	ldr	r2, [pc, #376]	; (8004734 <HAL_GPIO_Init+0x330>)
 80045bc:	f043 0301 	orr.w	r3, r3, #1
 80045c0:	6613      	str	r3, [r2, #96]	; 0x60
 80045c2:	4b5c      	ldr	r3, [pc, #368]	; (8004734 <HAL_GPIO_Init+0x330>)
 80045c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045c6:	f003 0301 	and.w	r3, r3, #1
 80045ca:	60bb      	str	r3, [r7, #8]
 80045cc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80045ce:	4a5a      	ldr	r2, [pc, #360]	; (8004738 <HAL_GPIO_Init+0x334>)
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	089b      	lsrs	r3, r3, #2
 80045d4:	3302      	adds	r3, #2
 80045d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045da:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	f003 0303 	and.w	r3, r3, #3
 80045e2:	009b      	lsls	r3, r3, #2
 80045e4:	220f      	movs	r2, #15
 80045e6:	fa02 f303 	lsl.w	r3, r2, r3
 80045ea:	43db      	mvns	r3, r3
 80045ec:	693a      	ldr	r2, [r7, #16]
 80045ee:	4013      	ands	r3, r2
 80045f0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80045f8:	d025      	beq.n	8004646 <HAL_GPIO_Init+0x242>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	4a4f      	ldr	r2, [pc, #316]	; (800473c <HAL_GPIO_Init+0x338>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d01f      	beq.n	8004642 <HAL_GPIO_Init+0x23e>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	4a4e      	ldr	r2, [pc, #312]	; (8004740 <HAL_GPIO_Init+0x33c>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d019      	beq.n	800463e <HAL_GPIO_Init+0x23a>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	4a4d      	ldr	r2, [pc, #308]	; (8004744 <HAL_GPIO_Init+0x340>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d013      	beq.n	800463a <HAL_GPIO_Init+0x236>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	4a4c      	ldr	r2, [pc, #304]	; (8004748 <HAL_GPIO_Init+0x344>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d00d      	beq.n	8004636 <HAL_GPIO_Init+0x232>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	4a4b      	ldr	r2, [pc, #300]	; (800474c <HAL_GPIO_Init+0x348>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d007      	beq.n	8004632 <HAL_GPIO_Init+0x22e>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	4a4a      	ldr	r2, [pc, #296]	; (8004750 <HAL_GPIO_Init+0x34c>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d101      	bne.n	800462e <HAL_GPIO_Init+0x22a>
 800462a:	2306      	movs	r3, #6
 800462c:	e00c      	b.n	8004648 <HAL_GPIO_Init+0x244>
 800462e:	2307      	movs	r3, #7
 8004630:	e00a      	b.n	8004648 <HAL_GPIO_Init+0x244>
 8004632:	2305      	movs	r3, #5
 8004634:	e008      	b.n	8004648 <HAL_GPIO_Init+0x244>
 8004636:	2304      	movs	r3, #4
 8004638:	e006      	b.n	8004648 <HAL_GPIO_Init+0x244>
 800463a:	2303      	movs	r3, #3
 800463c:	e004      	b.n	8004648 <HAL_GPIO_Init+0x244>
 800463e:	2302      	movs	r3, #2
 8004640:	e002      	b.n	8004648 <HAL_GPIO_Init+0x244>
 8004642:	2301      	movs	r3, #1
 8004644:	e000      	b.n	8004648 <HAL_GPIO_Init+0x244>
 8004646:	2300      	movs	r3, #0
 8004648:	697a      	ldr	r2, [r7, #20]
 800464a:	f002 0203 	and.w	r2, r2, #3
 800464e:	0092      	lsls	r2, r2, #2
 8004650:	4093      	lsls	r3, r2
 8004652:	693a      	ldr	r2, [r7, #16]
 8004654:	4313      	orrs	r3, r2
 8004656:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004658:	4937      	ldr	r1, [pc, #220]	; (8004738 <HAL_GPIO_Init+0x334>)
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	089b      	lsrs	r3, r3, #2
 800465e:	3302      	adds	r3, #2
 8004660:	693a      	ldr	r2, [r7, #16]
 8004662:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004666:	4b3b      	ldr	r3, [pc, #236]	; (8004754 <HAL_GPIO_Init+0x350>)
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	43db      	mvns	r3, r3
 8004670:	693a      	ldr	r2, [r7, #16]
 8004672:	4013      	ands	r3, r2
 8004674:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800467e:	2b00      	cmp	r3, #0
 8004680:	d003      	beq.n	800468a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004682:	693a      	ldr	r2, [r7, #16]
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	4313      	orrs	r3, r2
 8004688:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800468a:	4a32      	ldr	r2, [pc, #200]	; (8004754 <HAL_GPIO_Init+0x350>)
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004690:	4b30      	ldr	r3, [pc, #192]	; (8004754 <HAL_GPIO_Init+0x350>)
 8004692:	68db      	ldr	r3, [r3, #12]
 8004694:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	43db      	mvns	r3, r3
 800469a:	693a      	ldr	r2, [r7, #16]
 800469c:	4013      	ands	r3, r2
 800469e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d003      	beq.n	80046b4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80046ac:	693a      	ldr	r2, [r7, #16]
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	4313      	orrs	r3, r2
 80046b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80046b4:	4a27      	ldr	r2, [pc, #156]	; (8004754 <HAL_GPIO_Init+0x350>)
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80046ba:	4b26      	ldr	r3, [pc, #152]	; (8004754 <HAL_GPIO_Init+0x350>)
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	43db      	mvns	r3, r3
 80046c4:	693a      	ldr	r2, [r7, #16]
 80046c6:	4013      	ands	r3, r2
 80046c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d003      	beq.n	80046de <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80046d6:	693a      	ldr	r2, [r7, #16]
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	4313      	orrs	r3, r2
 80046dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80046de:	4a1d      	ldr	r2, [pc, #116]	; (8004754 <HAL_GPIO_Init+0x350>)
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80046e4:	4b1b      	ldr	r3, [pc, #108]	; (8004754 <HAL_GPIO_Init+0x350>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	43db      	mvns	r3, r3
 80046ee:	693a      	ldr	r2, [r7, #16]
 80046f0:	4013      	ands	r3, r2
 80046f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d003      	beq.n	8004708 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8004700:	693a      	ldr	r2, [r7, #16]
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	4313      	orrs	r3, r2
 8004706:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004708:	4a12      	ldr	r2, [pc, #72]	; (8004754 <HAL_GPIO_Init+0x350>)
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	3301      	adds	r3, #1
 8004712:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	681a      	ldr	r2, [r3, #0]
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	fa22 f303 	lsr.w	r3, r2, r3
 800471e:	2b00      	cmp	r3, #0
 8004720:	f47f ae78 	bne.w	8004414 <HAL_GPIO_Init+0x10>
  }
}
 8004724:	bf00      	nop
 8004726:	bf00      	nop
 8004728:	371c      	adds	r7, #28
 800472a:	46bd      	mov	sp, r7
 800472c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004730:	4770      	bx	lr
 8004732:	bf00      	nop
 8004734:	40021000 	.word	0x40021000
 8004738:	40010000 	.word	0x40010000
 800473c:	48000400 	.word	0x48000400
 8004740:	48000800 	.word	0x48000800
 8004744:	48000c00 	.word	0x48000c00
 8004748:	48001000 	.word	0x48001000
 800474c:	48001400 	.word	0x48001400
 8004750:	48001800 	.word	0x48001800
 8004754:	40010400 	.word	0x40010400

08004758 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004758:	b480      	push	{r7}
 800475a:	b085      	sub	sp, #20
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
 8004760:	460b      	mov	r3, r1
 8004762:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	691a      	ldr	r2, [r3, #16]
 8004768:	887b      	ldrh	r3, [r7, #2]
 800476a:	4013      	ands	r3, r2
 800476c:	2b00      	cmp	r3, #0
 800476e:	d002      	beq.n	8004776 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004770:	2301      	movs	r3, #1
 8004772:	73fb      	strb	r3, [r7, #15]
 8004774:	e001      	b.n	800477a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004776:	2300      	movs	r3, #0
 8004778:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800477a:	7bfb      	ldrb	r3, [r7, #15]
}
 800477c:	4618      	mov	r0, r3
 800477e:	3714      	adds	r7, #20
 8004780:	46bd      	mov	sp, r7
 8004782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004786:	4770      	bx	lr

08004788 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004788:	b480      	push	{r7}
 800478a:	b083      	sub	sp, #12
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
 8004790:	460b      	mov	r3, r1
 8004792:	807b      	strh	r3, [r7, #2]
 8004794:	4613      	mov	r3, r2
 8004796:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004798:	787b      	ldrb	r3, [r7, #1]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d003      	beq.n	80047a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800479e:	887a      	ldrh	r2, [r7, #2]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80047a4:	e002      	b.n	80047ac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80047a6:	887a      	ldrh	r2, [r7, #2]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80047ac:	bf00      	nop
 80047ae:	370c      	adds	r7, #12
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr

080047b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b082      	sub	sp, #8
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d101      	bne.n	80047ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	e081      	b.n	80048ce <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d106      	bne.n	80047e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2200      	movs	r2, #0
 80047da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f7fd fd30 	bl	8002244 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2224      	movs	r2, #36	; 0x24
 80047e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f022 0201 	bic.w	r2, r2, #1
 80047fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	685a      	ldr	r2, [r3, #4]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004808:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	689a      	ldr	r2, [r3, #8]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004818:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	68db      	ldr	r3, [r3, #12]
 800481e:	2b01      	cmp	r3, #1
 8004820:	d107      	bne.n	8004832 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	689a      	ldr	r2, [r3, #8]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800482e:	609a      	str	r2, [r3, #8]
 8004830:	e006      	b.n	8004840 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	689a      	ldr	r2, [r3, #8]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800483e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	68db      	ldr	r3, [r3, #12]
 8004844:	2b02      	cmp	r3, #2
 8004846:	d104      	bne.n	8004852 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004850:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	687a      	ldr	r2, [r7, #4]
 800485a:	6812      	ldr	r2, [r2, #0]
 800485c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004860:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004864:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	68da      	ldr	r2, [r3, #12]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004874:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	691a      	ldr	r2, [r3, #16]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	695b      	ldr	r3, [r3, #20]
 800487e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	699b      	ldr	r3, [r3, #24]
 8004886:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	430a      	orrs	r2, r1
 800488e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	69d9      	ldr	r1, [r3, #28]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6a1a      	ldr	r2, [r3, #32]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	430a      	orrs	r2, r1
 800489e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f042 0201 	orr.w	r2, r2, #1
 80048ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2200      	movs	r2, #0
 80048b4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2220      	movs	r2, #32
 80048ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2200      	movs	r2, #0
 80048c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2200      	movs	r2, #0
 80048c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80048cc:	2300      	movs	r3, #0
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	3708      	adds	r7, #8
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}
	...

080048d8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b088      	sub	sp, #32
 80048dc:	af02      	add	r7, sp, #8
 80048de:	60f8      	str	r0, [r7, #12]
 80048e0:	4608      	mov	r0, r1
 80048e2:	4611      	mov	r1, r2
 80048e4:	461a      	mov	r2, r3
 80048e6:	4603      	mov	r3, r0
 80048e8:	817b      	strh	r3, [r7, #10]
 80048ea:	460b      	mov	r3, r1
 80048ec:	813b      	strh	r3, [r7, #8]
 80048ee:	4613      	mov	r3, r2
 80048f0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048f8:	b2db      	uxtb	r3, r3
 80048fa:	2b20      	cmp	r3, #32
 80048fc:	f040 80f9 	bne.w	8004af2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004900:	6a3b      	ldr	r3, [r7, #32]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d002      	beq.n	800490c <HAL_I2C_Mem_Write+0x34>
 8004906:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004908:	2b00      	cmp	r3, #0
 800490a:	d105      	bne.n	8004918 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004912:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004914:	2301      	movs	r3, #1
 8004916:	e0ed      	b.n	8004af4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800491e:	2b01      	cmp	r3, #1
 8004920:	d101      	bne.n	8004926 <HAL_I2C_Mem_Write+0x4e>
 8004922:	2302      	movs	r3, #2
 8004924:	e0e6      	b.n	8004af4 <HAL_I2C_Mem_Write+0x21c>
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2201      	movs	r2, #1
 800492a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800492e:	f7fd ffaf 	bl	8002890 <HAL_GetTick>
 8004932:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	9300      	str	r3, [sp, #0]
 8004938:	2319      	movs	r3, #25
 800493a:	2201      	movs	r2, #1
 800493c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004940:	68f8      	ldr	r0, [r7, #12]
 8004942:	f000 fac3 	bl	8004ecc <I2C_WaitOnFlagUntilTimeout>
 8004946:	4603      	mov	r3, r0
 8004948:	2b00      	cmp	r3, #0
 800494a:	d001      	beq.n	8004950 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800494c:	2301      	movs	r3, #1
 800494e:	e0d1      	b.n	8004af4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2221      	movs	r2, #33	; 0x21
 8004954:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	2240      	movs	r2, #64	; 0x40
 800495c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2200      	movs	r2, #0
 8004964:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	6a3a      	ldr	r2, [r7, #32]
 800496a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004970:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2200      	movs	r2, #0
 8004976:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004978:	88f8      	ldrh	r0, [r7, #6]
 800497a:	893a      	ldrh	r2, [r7, #8]
 800497c:	8979      	ldrh	r1, [r7, #10]
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	9301      	str	r3, [sp, #4]
 8004982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004984:	9300      	str	r3, [sp, #0]
 8004986:	4603      	mov	r3, r0
 8004988:	68f8      	ldr	r0, [r7, #12]
 800498a:	f000 f9d3 	bl	8004d34 <I2C_RequestMemoryWrite>
 800498e:	4603      	mov	r3, r0
 8004990:	2b00      	cmp	r3, #0
 8004992:	d005      	beq.n	80049a0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2200      	movs	r2, #0
 8004998:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800499c:	2301      	movs	r3, #1
 800499e:	e0a9      	b.n	8004af4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049a4:	b29b      	uxth	r3, r3
 80049a6:	2bff      	cmp	r3, #255	; 0xff
 80049a8:	d90e      	bls.n	80049c8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	22ff      	movs	r2, #255	; 0xff
 80049ae:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049b4:	b2da      	uxtb	r2, r3
 80049b6:	8979      	ldrh	r1, [r7, #10]
 80049b8:	2300      	movs	r3, #0
 80049ba:	9300      	str	r3, [sp, #0]
 80049bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80049c0:	68f8      	ldr	r0, [r7, #12]
 80049c2:	f000 fc2b 	bl	800521c <I2C_TransferConfig>
 80049c6:	e00f      	b.n	80049e8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049cc:	b29a      	uxth	r2, r3
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049d6:	b2da      	uxtb	r2, r3
 80049d8:	8979      	ldrh	r1, [r7, #10]
 80049da:	2300      	movs	r3, #0
 80049dc:	9300      	str	r3, [sp, #0]
 80049de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80049e2:	68f8      	ldr	r0, [r7, #12]
 80049e4:	f000 fc1a 	bl	800521c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049e8:	697a      	ldr	r2, [r7, #20]
 80049ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80049ec:	68f8      	ldr	r0, [r7, #12]
 80049ee:	f000 faad 	bl	8004f4c <I2C_WaitOnTXISFlagUntilTimeout>
 80049f2:	4603      	mov	r3, r0
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d001      	beq.n	80049fc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80049f8:	2301      	movs	r3, #1
 80049fa:	e07b      	b.n	8004af4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a00:	781a      	ldrb	r2, [r3, #0]
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a0c:	1c5a      	adds	r2, r3, #1
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a16:	b29b      	uxth	r3, r3
 8004a18:	3b01      	subs	r3, #1
 8004a1a:	b29a      	uxth	r2, r3
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a24:	3b01      	subs	r3, #1
 8004a26:	b29a      	uxth	r2, r3
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a30:	b29b      	uxth	r3, r3
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d034      	beq.n	8004aa0 <HAL_I2C_Mem_Write+0x1c8>
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d130      	bne.n	8004aa0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	9300      	str	r3, [sp, #0]
 8004a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a44:	2200      	movs	r2, #0
 8004a46:	2180      	movs	r1, #128	; 0x80
 8004a48:	68f8      	ldr	r0, [r7, #12]
 8004a4a:	f000 fa3f 	bl	8004ecc <I2C_WaitOnFlagUntilTimeout>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d001      	beq.n	8004a58 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004a54:	2301      	movs	r3, #1
 8004a56:	e04d      	b.n	8004af4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a5c:	b29b      	uxth	r3, r3
 8004a5e:	2bff      	cmp	r3, #255	; 0xff
 8004a60:	d90e      	bls.n	8004a80 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	22ff      	movs	r2, #255	; 0xff
 8004a66:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a6c:	b2da      	uxtb	r2, r3
 8004a6e:	8979      	ldrh	r1, [r7, #10]
 8004a70:	2300      	movs	r3, #0
 8004a72:	9300      	str	r3, [sp, #0]
 8004a74:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004a78:	68f8      	ldr	r0, [r7, #12]
 8004a7a:	f000 fbcf 	bl	800521c <I2C_TransferConfig>
 8004a7e:	e00f      	b.n	8004aa0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a84:	b29a      	uxth	r2, r3
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a8e:	b2da      	uxtb	r2, r3
 8004a90:	8979      	ldrh	r1, [r7, #10]
 8004a92:	2300      	movs	r3, #0
 8004a94:	9300      	str	r3, [sp, #0]
 8004a96:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004a9a:	68f8      	ldr	r0, [r7, #12]
 8004a9c:	f000 fbbe 	bl	800521c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aa4:	b29b      	uxth	r3, r3
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d19e      	bne.n	80049e8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004aaa:	697a      	ldr	r2, [r7, #20]
 8004aac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004aae:	68f8      	ldr	r0, [r7, #12]
 8004ab0:	f000 fa8c 	bl	8004fcc <I2C_WaitOnSTOPFlagUntilTimeout>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d001      	beq.n	8004abe <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	e01a      	b.n	8004af4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	2220      	movs	r2, #32
 8004ac4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	6859      	ldr	r1, [r3, #4]
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681a      	ldr	r2, [r3, #0]
 8004ad0:	4b0a      	ldr	r3, [pc, #40]	; (8004afc <HAL_I2C_Mem_Write+0x224>)
 8004ad2:	400b      	ands	r3, r1
 8004ad4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2220      	movs	r2, #32
 8004ada:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004aee:	2300      	movs	r3, #0
 8004af0:	e000      	b.n	8004af4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004af2:	2302      	movs	r3, #2
  }
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	3718      	adds	r7, #24
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}
 8004afc:	fe00e800 	.word	0xfe00e800

08004b00 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b088      	sub	sp, #32
 8004b04:	af02      	add	r7, sp, #8
 8004b06:	60f8      	str	r0, [r7, #12]
 8004b08:	4608      	mov	r0, r1
 8004b0a:	4611      	mov	r1, r2
 8004b0c:	461a      	mov	r2, r3
 8004b0e:	4603      	mov	r3, r0
 8004b10:	817b      	strh	r3, [r7, #10]
 8004b12:	460b      	mov	r3, r1
 8004b14:	813b      	strh	r3, [r7, #8]
 8004b16:	4613      	mov	r3, r2
 8004b18:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	2b20      	cmp	r3, #32
 8004b24:	f040 80fd 	bne.w	8004d22 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b28:	6a3b      	ldr	r3, [r7, #32]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d002      	beq.n	8004b34 <HAL_I2C_Mem_Read+0x34>
 8004b2e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d105      	bne.n	8004b40 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b3a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	e0f1      	b.n	8004d24 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b46:	2b01      	cmp	r3, #1
 8004b48:	d101      	bne.n	8004b4e <HAL_I2C_Mem_Read+0x4e>
 8004b4a:	2302      	movs	r3, #2
 8004b4c:	e0ea      	b.n	8004d24 <HAL_I2C_Mem_Read+0x224>
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2201      	movs	r2, #1
 8004b52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004b56:	f7fd fe9b 	bl	8002890 <HAL_GetTick>
 8004b5a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	9300      	str	r3, [sp, #0]
 8004b60:	2319      	movs	r3, #25
 8004b62:	2201      	movs	r2, #1
 8004b64:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004b68:	68f8      	ldr	r0, [r7, #12]
 8004b6a:	f000 f9af 	bl	8004ecc <I2C_WaitOnFlagUntilTimeout>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d001      	beq.n	8004b78 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	e0d5      	b.n	8004d24 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2222      	movs	r2, #34	; 0x22
 8004b7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2240      	movs	r2, #64	; 0x40
 8004b84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	6a3a      	ldr	r2, [r7, #32]
 8004b92:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004b98:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004ba0:	88f8      	ldrh	r0, [r7, #6]
 8004ba2:	893a      	ldrh	r2, [r7, #8]
 8004ba4:	8979      	ldrh	r1, [r7, #10]
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	9301      	str	r3, [sp, #4]
 8004baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bac:	9300      	str	r3, [sp, #0]
 8004bae:	4603      	mov	r3, r0
 8004bb0:	68f8      	ldr	r0, [r7, #12]
 8004bb2:	f000 f913 	bl	8004ddc <I2C_RequestMemoryRead>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d005      	beq.n	8004bc8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	e0ad      	b.n	8004d24 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bcc:	b29b      	uxth	r3, r3
 8004bce:	2bff      	cmp	r3, #255	; 0xff
 8004bd0:	d90e      	bls.n	8004bf0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	22ff      	movs	r2, #255	; 0xff
 8004bd6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bdc:	b2da      	uxtb	r2, r3
 8004bde:	8979      	ldrh	r1, [r7, #10]
 8004be0:	4b52      	ldr	r3, [pc, #328]	; (8004d2c <HAL_I2C_Mem_Read+0x22c>)
 8004be2:	9300      	str	r3, [sp, #0]
 8004be4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004be8:	68f8      	ldr	r0, [r7, #12]
 8004bea:	f000 fb17 	bl	800521c <I2C_TransferConfig>
 8004bee:	e00f      	b.n	8004c10 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bf4:	b29a      	uxth	r2, r3
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bfe:	b2da      	uxtb	r2, r3
 8004c00:	8979      	ldrh	r1, [r7, #10]
 8004c02:	4b4a      	ldr	r3, [pc, #296]	; (8004d2c <HAL_I2C_Mem_Read+0x22c>)
 8004c04:	9300      	str	r3, [sp, #0]
 8004c06:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004c0a:	68f8      	ldr	r0, [r7, #12]
 8004c0c:	f000 fb06 	bl	800521c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	9300      	str	r3, [sp, #0]
 8004c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c16:	2200      	movs	r2, #0
 8004c18:	2104      	movs	r1, #4
 8004c1a:	68f8      	ldr	r0, [r7, #12]
 8004c1c:	f000 f956 	bl	8004ecc <I2C_WaitOnFlagUntilTimeout>
 8004c20:	4603      	mov	r3, r0
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d001      	beq.n	8004c2a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	e07c      	b.n	8004d24 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c34:	b2d2      	uxtb	r2, r2
 8004c36:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c3c:	1c5a      	adds	r2, r3, #1
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c46:	3b01      	subs	r3, #1
 8004c48:	b29a      	uxth	r2, r3
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c52:	b29b      	uxth	r3, r3
 8004c54:	3b01      	subs	r3, #1
 8004c56:	b29a      	uxth	r2, r3
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c60:	b29b      	uxth	r3, r3
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d034      	beq.n	8004cd0 <HAL_I2C_Mem_Read+0x1d0>
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d130      	bne.n	8004cd0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	9300      	str	r3, [sp, #0]
 8004c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c74:	2200      	movs	r2, #0
 8004c76:	2180      	movs	r1, #128	; 0x80
 8004c78:	68f8      	ldr	r0, [r7, #12]
 8004c7a:	f000 f927 	bl	8004ecc <I2C_WaitOnFlagUntilTimeout>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d001      	beq.n	8004c88 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004c84:	2301      	movs	r3, #1
 8004c86:	e04d      	b.n	8004d24 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c8c:	b29b      	uxth	r3, r3
 8004c8e:	2bff      	cmp	r3, #255	; 0xff
 8004c90:	d90e      	bls.n	8004cb0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	22ff      	movs	r2, #255	; 0xff
 8004c96:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c9c:	b2da      	uxtb	r2, r3
 8004c9e:	8979      	ldrh	r1, [r7, #10]
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	9300      	str	r3, [sp, #0]
 8004ca4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004ca8:	68f8      	ldr	r0, [r7, #12]
 8004caa:	f000 fab7 	bl	800521c <I2C_TransferConfig>
 8004cae:	e00f      	b.n	8004cd0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cb4:	b29a      	uxth	r2, r3
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cbe:	b2da      	uxtb	r2, r3
 8004cc0:	8979      	ldrh	r1, [r7, #10]
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	9300      	str	r3, [sp, #0]
 8004cc6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004cca:	68f8      	ldr	r0, [r7, #12]
 8004ccc:	f000 faa6 	bl	800521c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cd4:	b29b      	uxth	r3, r3
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d19a      	bne.n	8004c10 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004cda:	697a      	ldr	r2, [r7, #20]
 8004cdc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004cde:	68f8      	ldr	r0, [r7, #12]
 8004ce0:	f000 f974 	bl	8004fcc <I2C_WaitOnSTOPFlagUntilTimeout>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d001      	beq.n	8004cee <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	e01a      	b.n	8004d24 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	2220      	movs	r2, #32
 8004cf4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	6859      	ldr	r1, [r3, #4]
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681a      	ldr	r2, [r3, #0]
 8004d00:	4b0b      	ldr	r3, [pc, #44]	; (8004d30 <HAL_I2C_Mem_Read+0x230>)
 8004d02:	400b      	ands	r3, r1
 8004d04:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2220      	movs	r2, #32
 8004d0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2200      	movs	r2, #0
 8004d12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	e000      	b.n	8004d24 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004d22:	2302      	movs	r3, #2
  }
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	3718      	adds	r7, #24
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bd80      	pop	{r7, pc}
 8004d2c:	80002400 	.word	0x80002400
 8004d30:	fe00e800 	.word	0xfe00e800

08004d34 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b086      	sub	sp, #24
 8004d38:	af02      	add	r7, sp, #8
 8004d3a:	60f8      	str	r0, [r7, #12]
 8004d3c:	4608      	mov	r0, r1
 8004d3e:	4611      	mov	r1, r2
 8004d40:	461a      	mov	r2, r3
 8004d42:	4603      	mov	r3, r0
 8004d44:	817b      	strh	r3, [r7, #10]
 8004d46:	460b      	mov	r3, r1
 8004d48:	813b      	strh	r3, [r7, #8]
 8004d4a:	4613      	mov	r3, r2
 8004d4c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004d4e:	88fb      	ldrh	r3, [r7, #6]
 8004d50:	b2da      	uxtb	r2, r3
 8004d52:	8979      	ldrh	r1, [r7, #10]
 8004d54:	4b20      	ldr	r3, [pc, #128]	; (8004dd8 <I2C_RequestMemoryWrite+0xa4>)
 8004d56:	9300      	str	r3, [sp, #0]
 8004d58:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004d5c:	68f8      	ldr	r0, [r7, #12]
 8004d5e:	f000 fa5d 	bl	800521c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d62:	69fa      	ldr	r2, [r7, #28]
 8004d64:	69b9      	ldr	r1, [r7, #24]
 8004d66:	68f8      	ldr	r0, [r7, #12]
 8004d68:	f000 f8f0 	bl	8004f4c <I2C_WaitOnTXISFlagUntilTimeout>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d001      	beq.n	8004d76 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	e02c      	b.n	8004dd0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004d76:	88fb      	ldrh	r3, [r7, #6]
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d105      	bne.n	8004d88 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004d7c:	893b      	ldrh	r3, [r7, #8]
 8004d7e:	b2da      	uxtb	r2, r3
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	629a      	str	r2, [r3, #40]	; 0x28
 8004d86:	e015      	b.n	8004db4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004d88:	893b      	ldrh	r3, [r7, #8]
 8004d8a:	0a1b      	lsrs	r3, r3, #8
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	b2da      	uxtb	r2, r3
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d96:	69fa      	ldr	r2, [r7, #28]
 8004d98:	69b9      	ldr	r1, [r7, #24]
 8004d9a:	68f8      	ldr	r0, [r7, #12]
 8004d9c:	f000 f8d6 	bl	8004f4c <I2C_WaitOnTXISFlagUntilTimeout>
 8004da0:	4603      	mov	r3, r0
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d001      	beq.n	8004daa <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004da6:	2301      	movs	r3, #1
 8004da8:	e012      	b.n	8004dd0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004daa:	893b      	ldrh	r3, [r7, #8]
 8004dac:	b2da      	uxtb	r2, r3
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004db4:	69fb      	ldr	r3, [r7, #28]
 8004db6:	9300      	str	r3, [sp, #0]
 8004db8:	69bb      	ldr	r3, [r7, #24]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	2180      	movs	r1, #128	; 0x80
 8004dbe:	68f8      	ldr	r0, [r7, #12]
 8004dc0:	f000 f884 	bl	8004ecc <I2C_WaitOnFlagUntilTimeout>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d001      	beq.n	8004dce <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	e000      	b.n	8004dd0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004dce:	2300      	movs	r3, #0
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	3710      	adds	r7, #16
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}
 8004dd8:	80002000 	.word	0x80002000

08004ddc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b086      	sub	sp, #24
 8004de0:	af02      	add	r7, sp, #8
 8004de2:	60f8      	str	r0, [r7, #12]
 8004de4:	4608      	mov	r0, r1
 8004de6:	4611      	mov	r1, r2
 8004de8:	461a      	mov	r2, r3
 8004dea:	4603      	mov	r3, r0
 8004dec:	817b      	strh	r3, [r7, #10]
 8004dee:	460b      	mov	r3, r1
 8004df0:	813b      	strh	r3, [r7, #8]
 8004df2:	4613      	mov	r3, r2
 8004df4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004df6:	88fb      	ldrh	r3, [r7, #6]
 8004df8:	b2da      	uxtb	r2, r3
 8004dfa:	8979      	ldrh	r1, [r7, #10]
 8004dfc:	4b20      	ldr	r3, [pc, #128]	; (8004e80 <I2C_RequestMemoryRead+0xa4>)
 8004dfe:	9300      	str	r3, [sp, #0]
 8004e00:	2300      	movs	r3, #0
 8004e02:	68f8      	ldr	r0, [r7, #12]
 8004e04:	f000 fa0a 	bl	800521c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e08:	69fa      	ldr	r2, [r7, #28]
 8004e0a:	69b9      	ldr	r1, [r7, #24]
 8004e0c:	68f8      	ldr	r0, [r7, #12]
 8004e0e:	f000 f89d 	bl	8004f4c <I2C_WaitOnTXISFlagUntilTimeout>
 8004e12:	4603      	mov	r3, r0
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d001      	beq.n	8004e1c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	e02c      	b.n	8004e76 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004e1c:	88fb      	ldrh	r3, [r7, #6]
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	d105      	bne.n	8004e2e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004e22:	893b      	ldrh	r3, [r7, #8]
 8004e24:	b2da      	uxtb	r2, r3
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	629a      	str	r2, [r3, #40]	; 0x28
 8004e2c:	e015      	b.n	8004e5a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004e2e:	893b      	ldrh	r3, [r7, #8]
 8004e30:	0a1b      	lsrs	r3, r3, #8
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	b2da      	uxtb	r2, r3
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e3c:	69fa      	ldr	r2, [r7, #28]
 8004e3e:	69b9      	ldr	r1, [r7, #24]
 8004e40:	68f8      	ldr	r0, [r7, #12]
 8004e42:	f000 f883 	bl	8004f4c <I2C_WaitOnTXISFlagUntilTimeout>
 8004e46:	4603      	mov	r3, r0
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d001      	beq.n	8004e50 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	e012      	b.n	8004e76 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004e50:	893b      	ldrh	r3, [r7, #8]
 8004e52:	b2da      	uxtb	r2, r3
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004e5a:	69fb      	ldr	r3, [r7, #28]
 8004e5c:	9300      	str	r3, [sp, #0]
 8004e5e:	69bb      	ldr	r3, [r7, #24]
 8004e60:	2200      	movs	r2, #0
 8004e62:	2140      	movs	r1, #64	; 0x40
 8004e64:	68f8      	ldr	r0, [r7, #12]
 8004e66:	f000 f831 	bl	8004ecc <I2C_WaitOnFlagUntilTimeout>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d001      	beq.n	8004e74 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004e70:	2301      	movs	r3, #1
 8004e72:	e000      	b.n	8004e76 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004e74:	2300      	movs	r3, #0
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	3710      	adds	r7, #16
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}
 8004e7e:	bf00      	nop
 8004e80:	80002000 	.word	0x80002000

08004e84 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b083      	sub	sp, #12
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	699b      	ldr	r3, [r3, #24]
 8004e92:	f003 0302 	and.w	r3, r3, #2
 8004e96:	2b02      	cmp	r3, #2
 8004e98:	d103      	bne.n	8004ea2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	699b      	ldr	r3, [r3, #24]
 8004ea8:	f003 0301 	and.w	r3, r3, #1
 8004eac:	2b01      	cmp	r3, #1
 8004eae:	d007      	beq.n	8004ec0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	699a      	ldr	r2, [r3, #24]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f042 0201 	orr.w	r2, r2, #1
 8004ebe:	619a      	str	r2, [r3, #24]
  }
}
 8004ec0:	bf00      	nop
 8004ec2:	370c      	adds	r7, #12
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eca:	4770      	bx	lr

08004ecc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b084      	sub	sp, #16
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	60f8      	str	r0, [r7, #12]
 8004ed4:	60b9      	str	r1, [r7, #8]
 8004ed6:	603b      	str	r3, [r7, #0]
 8004ed8:	4613      	mov	r3, r2
 8004eda:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004edc:	e022      	b.n	8004f24 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ee4:	d01e      	beq.n	8004f24 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ee6:	f7fd fcd3 	bl	8002890 <HAL_GetTick>
 8004eea:	4602      	mov	r2, r0
 8004eec:	69bb      	ldr	r3, [r7, #24]
 8004eee:	1ad3      	subs	r3, r2, r3
 8004ef0:	683a      	ldr	r2, [r7, #0]
 8004ef2:	429a      	cmp	r2, r3
 8004ef4:	d302      	bcc.n	8004efc <I2C_WaitOnFlagUntilTimeout+0x30>
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d113      	bne.n	8004f24 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f00:	f043 0220 	orr.w	r2, r3, #32
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2220      	movs	r2, #32
 8004f0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	2200      	movs	r2, #0
 8004f14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004f20:	2301      	movs	r3, #1
 8004f22:	e00f      	b.n	8004f44 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	699a      	ldr	r2, [r3, #24]
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	4013      	ands	r3, r2
 8004f2e:	68ba      	ldr	r2, [r7, #8]
 8004f30:	429a      	cmp	r2, r3
 8004f32:	bf0c      	ite	eq
 8004f34:	2301      	moveq	r3, #1
 8004f36:	2300      	movne	r3, #0
 8004f38:	b2db      	uxtb	r3, r3
 8004f3a:	461a      	mov	r2, r3
 8004f3c:	79fb      	ldrb	r3, [r7, #7]
 8004f3e:	429a      	cmp	r2, r3
 8004f40:	d0cd      	beq.n	8004ede <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004f42:	2300      	movs	r3, #0
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	3710      	adds	r7, #16
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}

08004f4c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b084      	sub	sp, #16
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	60f8      	str	r0, [r7, #12]
 8004f54:	60b9      	str	r1, [r7, #8]
 8004f56:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004f58:	e02c      	b.n	8004fb4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f5a:	687a      	ldr	r2, [r7, #4]
 8004f5c:	68b9      	ldr	r1, [r7, #8]
 8004f5e:	68f8      	ldr	r0, [r7, #12]
 8004f60:	f000 f870 	bl	8005044 <I2C_IsErrorOccurred>
 8004f64:	4603      	mov	r3, r0
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d001      	beq.n	8004f6e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	e02a      	b.n	8004fc4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f74:	d01e      	beq.n	8004fb4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f76:	f7fd fc8b 	bl	8002890 <HAL_GetTick>
 8004f7a:	4602      	mov	r2, r0
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	1ad3      	subs	r3, r2, r3
 8004f80:	68ba      	ldr	r2, [r7, #8]
 8004f82:	429a      	cmp	r2, r3
 8004f84:	d302      	bcc.n	8004f8c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d113      	bne.n	8004fb4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f90:	f043 0220 	orr.w	r2, r3, #32
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2220      	movs	r2, #32
 8004f9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	2200      	movs	r2, #0
 8004fac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	e007      	b.n	8004fc4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	699b      	ldr	r3, [r3, #24]
 8004fba:	f003 0302 	and.w	r3, r3, #2
 8004fbe:	2b02      	cmp	r3, #2
 8004fc0:	d1cb      	bne.n	8004f5a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004fc2:	2300      	movs	r3, #0
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3710      	adds	r7, #16
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}

08004fcc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b084      	sub	sp, #16
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	60f8      	str	r0, [r7, #12]
 8004fd4:	60b9      	str	r1, [r7, #8]
 8004fd6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004fd8:	e028      	b.n	800502c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004fda:	687a      	ldr	r2, [r7, #4]
 8004fdc:	68b9      	ldr	r1, [r7, #8]
 8004fde:	68f8      	ldr	r0, [r7, #12]
 8004fe0:	f000 f830 	bl	8005044 <I2C_IsErrorOccurred>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d001      	beq.n	8004fee <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004fea:	2301      	movs	r3, #1
 8004fec:	e026      	b.n	800503c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fee:	f7fd fc4f 	bl	8002890 <HAL_GetTick>
 8004ff2:	4602      	mov	r2, r0
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	1ad3      	subs	r3, r2, r3
 8004ff8:	68ba      	ldr	r2, [r7, #8]
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	d302      	bcc.n	8005004 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d113      	bne.n	800502c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005008:	f043 0220 	orr.w	r2, r3, #32
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	2220      	movs	r2, #32
 8005014:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2200      	movs	r2, #0
 800501c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2200      	movs	r2, #0
 8005024:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	e007      	b.n	800503c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	699b      	ldr	r3, [r3, #24]
 8005032:	f003 0320 	and.w	r3, r3, #32
 8005036:	2b20      	cmp	r3, #32
 8005038:	d1cf      	bne.n	8004fda <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800503a:	2300      	movs	r3, #0
}
 800503c:	4618      	mov	r0, r3
 800503e:	3710      	adds	r7, #16
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}

08005044 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b08a      	sub	sp, #40	; 0x28
 8005048:	af00      	add	r7, sp, #0
 800504a:	60f8      	str	r0, [r7, #12]
 800504c:	60b9      	str	r1, [r7, #8]
 800504e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005050:	2300      	movs	r3, #0
 8005052:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	699b      	ldr	r3, [r3, #24]
 800505c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800505e:	2300      	movs	r3, #0
 8005060:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005066:	69bb      	ldr	r3, [r7, #24]
 8005068:	f003 0310 	and.w	r3, r3, #16
 800506c:	2b00      	cmp	r3, #0
 800506e:	d075      	beq.n	800515c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	2210      	movs	r2, #16
 8005076:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005078:	e056      	b.n	8005128 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005080:	d052      	beq.n	8005128 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005082:	f7fd fc05 	bl	8002890 <HAL_GetTick>
 8005086:	4602      	mov	r2, r0
 8005088:	69fb      	ldr	r3, [r7, #28]
 800508a:	1ad3      	subs	r3, r2, r3
 800508c:	68ba      	ldr	r2, [r7, #8]
 800508e:	429a      	cmp	r2, r3
 8005090:	d302      	bcc.n	8005098 <I2C_IsErrorOccurred+0x54>
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d147      	bne.n	8005128 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050a2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80050aa:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	699b      	ldr	r3, [r3, #24]
 80050b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80050b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050ba:	d12e      	bne.n	800511a <I2C_IsErrorOccurred+0xd6>
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80050c2:	d02a      	beq.n	800511a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80050c4:	7cfb      	ldrb	r3, [r7, #19]
 80050c6:	2b20      	cmp	r3, #32
 80050c8:	d027      	beq.n	800511a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	685a      	ldr	r2, [r3, #4]
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80050d8:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80050da:	f7fd fbd9 	bl	8002890 <HAL_GetTick>
 80050de:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80050e0:	e01b      	b.n	800511a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80050e2:	f7fd fbd5 	bl	8002890 <HAL_GetTick>
 80050e6:	4602      	mov	r2, r0
 80050e8:	69fb      	ldr	r3, [r7, #28]
 80050ea:	1ad3      	subs	r3, r2, r3
 80050ec:	2b19      	cmp	r3, #25
 80050ee:	d914      	bls.n	800511a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050f4:	f043 0220 	orr.w	r2, r3, #32
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2220      	movs	r2, #32
 8005100:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	2200      	movs	r2, #0
 8005108:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2200      	movs	r2, #0
 8005110:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8005114:	2301      	movs	r3, #1
 8005116:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	699b      	ldr	r3, [r3, #24]
 8005120:	f003 0320 	and.w	r3, r3, #32
 8005124:	2b20      	cmp	r3, #32
 8005126:	d1dc      	bne.n	80050e2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	699b      	ldr	r3, [r3, #24]
 800512e:	f003 0320 	and.w	r3, r3, #32
 8005132:	2b20      	cmp	r3, #32
 8005134:	d003      	beq.n	800513e <I2C_IsErrorOccurred+0xfa>
 8005136:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800513a:	2b00      	cmp	r3, #0
 800513c:	d09d      	beq.n	800507a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800513e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005142:	2b00      	cmp	r3, #0
 8005144:	d103      	bne.n	800514e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	2220      	movs	r2, #32
 800514c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800514e:	6a3b      	ldr	r3, [r7, #32]
 8005150:	f043 0304 	orr.w	r3, r3, #4
 8005154:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005156:	2301      	movs	r3, #1
 8005158:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	699b      	ldr	r3, [r3, #24]
 8005162:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005164:	69bb      	ldr	r3, [r7, #24]
 8005166:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800516a:	2b00      	cmp	r3, #0
 800516c:	d00b      	beq.n	8005186 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800516e:	6a3b      	ldr	r3, [r7, #32]
 8005170:	f043 0301 	orr.w	r3, r3, #1
 8005174:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800517e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005180:	2301      	movs	r3, #1
 8005182:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005186:	69bb      	ldr	r3, [r7, #24]
 8005188:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800518c:	2b00      	cmp	r3, #0
 800518e:	d00b      	beq.n	80051a8 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005190:	6a3b      	ldr	r3, [r7, #32]
 8005192:	f043 0308 	orr.w	r3, r3, #8
 8005196:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80051a0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80051a8:	69bb      	ldr	r3, [r7, #24]
 80051aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d00b      	beq.n	80051ca <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80051b2:	6a3b      	ldr	r3, [r7, #32]
 80051b4:	f043 0302 	orr.w	r3, r3, #2
 80051b8:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80051c2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80051c4:	2301      	movs	r3, #1
 80051c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80051ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d01c      	beq.n	800520c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80051d2:	68f8      	ldr	r0, [r7, #12]
 80051d4:	f7ff fe56 	bl	8004e84 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	6859      	ldr	r1, [r3, #4]
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681a      	ldr	r2, [r3, #0]
 80051e2:	4b0d      	ldr	r3, [pc, #52]	; (8005218 <I2C_IsErrorOccurred+0x1d4>)
 80051e4:	400b      	ands	r3, r1
 80051e6:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80051ec:	6a3b      	ldr	r3, [r7, #32]
 80051ee:	431a      	orrs	r2, r3
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2220      	movs	r2, #32
 80051f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2200      	movs	r2, #0
 8005200:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2200      	movs	r2, #0
 8005208:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800520c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005210:	4618      	mov	r0, r3
 8005212:	3728      	adds	r7, #40	; 0x28
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}
 8005218:	fe00e800 	.word	0xfe00e800

0800521c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800521c:	b480      	push	{r7}
 800521e:	b087      	sub	sp, #28
 8005220:	af00      	add	r7, sp, #0
 8005222:	60f8      	str	r0, [r7, #12]
 8005224:	607b      	str	r3, [r7, #4]
 8005226:	460b      	mov	r3, r1
 8005228:	817b      	strh	r3, [r7, #10]
 800522a:	4613      	mov	r3, r2
 800522c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800522e:	897b      	ldrh	r3, [r7, #10]
 8005230:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005234:	7a7b      	ldrb	r3, [r7, #9]
 8005236:	041b      	lsls	r3, r3, #16
 8005238:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800523c:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005242:	6a3b      	ldr	r3, [r7, #32]
 8005244:	4313      	orrs	r3, r2
 8005246:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800524a:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	685a      	ldr	r2, [r3, #4]
 8005252:	6a3b      	ldr	r3, [r7, #32]
 8005254:	0d5b      	lsrs	r3, r3, #21
 8005256:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800525a:	4b08      	ldr	r3, [pc, #32]	; (800527c <I2C_TransferConfig+0x60>)
 800525c:	430b      	orrs	r3, r1
 800525e:	43db      	mvns	r3, r3
 8005260:	ea02 0103 	and.w	r1, r2, r3
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	697a      	ldr	r2, [r7, #20]
 800526a:	430a      	orrs	r2, r1
 800526c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800526e:	bf00      	nop
 8005270:	371c      	adds	r7, #28
 8005272:	46bd      	mov	sp, r7
 8005274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005278:	4770      	bx	lr
 800527a:	bf00      	nop
 800527c:	03ff63ff 	.word	0x03ff63ff

08005280 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005280:	b480      	push	{r7}
 8005282:	b083      	sub	sp, #12
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
 8005288:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005290:	b2db      	uxtb	r3, r3
 8005292:	2b20      	cmp	r3, #32
 8005294:	d138      	bne.n	8005308 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800529c:	2b01      	cmp	r3, #1
 800529e:	d101      	bne.n	80052a4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80052a0:	2302      	movs	r3, #2
 80052a2:	e032      	b.n	800530a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2201      	movs	r2, #1
 80052a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2224      	movs	r2, #36	; 0x24
 80052b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	681a      	ldr	r2, [r3, #0]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f022 0201 	bic.w	r2, r2, #1
 80052c2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80052d2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	6819      	ldr	r1, [r3, #0]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	683a      	ldr	r2, [r7, #0]
 80052e0:	430a      	orrs	r2, r1
 80052e2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	681a      	ldr	r2, [r3, #0]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f042 0201 	orr.w	r2, r2, #1
 80052f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2220      	movs	r2, #32
 80052f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2200      	movs	r2, #0
 8005300:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005304:	2300      	movs	r3, #0
 8005306:	e000      	b.n	800530a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005308:	2302      	movs	r3, #2
  }
}
 800530a:	4618      	mov	r0, r3
 800530c:	370c      	adds	r7, #12
 800530e:	46bd      	mov	sp, r7
 8005310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005314:	4770      	bx	lr

08005316 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005316:	b480      	push	{r7}
 8005318:	b085      	sub	sp, #20
 800531a:	af00      	add	r7, sp, #0
 800531c:	6078      	str	r0, [r7, #4]
 800531e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005326:	b2db      	uxtb	r3, r3
 8005328:	2b20      	cmp	r3, #32
 800532a:	d139      	bne.n	80053a0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005332:	2b01      	cmp	r3, #1
 8005334:	d101      	bne.n	800533a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005336:	2302      	movs	r3, #2
 8005338:	e033      	b.n	80053a2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2201      	movs	r2, #1
 800533e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2224      	movs	r2, #36	; 0x24
 8005346:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	681a      	ldr	r2, [r3, #0]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f022 0201 	bic.w	r2, r2, #1
 8005358:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005368:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	021b      	lsls	r3, r3, #8
 800536e:	68fa      	ldr	r2, [r7, #12]
 8005370:	4313      	orrs	r3, r2
 8005372:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	68fa      	ldr	r2, [r7, #12]
 800537a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	681a      	ldr	r2, [r3, #0]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f042 0201 	orr.w	r2, r2, #1
 800538a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2220      	movs	r2, #32
 8005390:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2200      	movs	r2, #0
 8005398:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800539c:	2300      	movs	r3, #0
 800539e:	e000      	b.n	80053a2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80053a0:	2302      	movs	r3, #2
  }
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	3714      	adds	r7, #20
 80053a6:	46bd      	mov	sp, r7
 80053a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ac:	4770      	bx	lr
	...

080053b0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80053b0:	b480      	push	{r7}
 80053b2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80053b4:	4b04      	ldr	r3, [pc, #16]	; (80053c8 <HAL_PWREx_GetVoltageRange+0x18>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80053bc:	4618      	mov	r0, r3
 80053be:	46bd      	mov	sp, r7
 80053c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c4:	4770      	bx	lr
 80053c6:	bf00      	nop
 80053c8:	40007000 	.word	0x40007000

080053cc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b085      	sub	sp, #20
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053da:	d130      	bne.n	800543e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80053dc:	4b23      	ldr	r3, [pc, #140]	; (800546c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80053e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053e8:	d038      	beq.n	800545c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80053ea:	4b20      	ldr	r3, [pc, #128]	; (800546c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80053f2:	4a1e      	ldr	r2, [pc, #120]	; (800546c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80053f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80053f8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80053fa:	4b1d      	ldr	r3, [pc, #116]	; (8005470 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	2232      	movs	r2, #50	; 0x32
 8005400:	fb02 f303 	mul.w	r3, r2, r3
 8005404:	4a1b      	ldr	r2, [pc, #108]	; (8005474 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005406:	fba2 2303 	umull	r2, r3, r2, r3
 800540a:	0c9b      	lsrs	r3, r3, #18
 800540c:	3301      	adds	r3, #1
 800540e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005410:	e002      	b.n	8005418 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	3b01      	subs	r3, #1
 8005416:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005418:	4b14      	ldr	r3, [pc, #80]	; (800546c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800541a:	695b      	ldr	r3, [r3, #20]
 800541c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005420:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005424:	d102      	bne.n	800542c <HAL_PWREx_ControlVoltageScaling+0x60>
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d1f2      	bne.n	8005412 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800542c:	4b0f      	ldr	r3, [pc, #60]	; (800546c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800542e:	695b      	ldr	r3, [r3, #20]
 8005430:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005434:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005438:	d110      	bne.n	800545c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800543a:	2303      	movs	r3, #3
 800543c:	e00f      	b.n	800545e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800543e:	4b0b      	ldr	r3, [pc, #44]	; (800546c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005446:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800544a:	d007      	beq.n	800545c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800544c:	4b07      	ldr	r3, [pc, #28]	; (800546c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005454:	4a05      	ldr	r2, [pc, #20]	; (800546c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005456:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800545a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800545c:	2300      	movs	r3, #0
}
 800545e:	4618      	mov	r0, r3
 8005460:	3714      	adds	r7, #20
 8005462:	46bd      	mov	sp, r7
 8005464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005468:	4770      	bx	lr
 800546a:	bf00      	nop
 800546c:	40007000 	.word	0x40007000
 8005470:	20000008 	.word	0x20000008
 8005474:	431bde83 	.word	0x431bde83

08005478 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b088      	sub	sp, #32
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d101      	bne.n	800548a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005486:	2301      	movs	r3, #1
 8005488:	e3d4      	b.n	8005c34 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800548a:	4ba1      	ldr	r3, [pc, #644]	; (8005710 <HAL_RCC_OscConfig+0x298>)
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	f003 030c 	and.w	r3, r3, #12
 8005492:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005494:	4b9e      	ldr	r3, [pc, #632]	; (8005710 <HAL_RCC_OscConfig+0x298>)
 8005496:	68db      	ldr	r3, [r3, #12]
 8005498:	f003 0303 	and.w	r3, r3, #3
 800549c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f003 0310 	and.w	r3, r3, #16
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	f000 80e4 	beq.w	8005674 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80054ac:	69bb      	ldr	r3, [r7, #24]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d007      	beq.n	80054c2 <HAL_RCC_OscConfig+0x4a>
 80054b2:	69bb      	ldr	r3, [r7, #24]
 80054b4:	2b0c      	cmp	r3, #12
 80054b6:	f040 808b 	bne.w	80055d0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	2b01      	cmp	r3, #1
 80054be:	f040 8087 	bne.w	80055d0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80054c2:	4b93      	ldr	r3, [pc, #588]	; (8005710 <HAL_RCC_OscConfig+0x298>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f003 0302 	and.w	r3, r3, #2
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d005      	beq.n	80054da <HAL_RCC_OscConfig+0x62>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	699b      	ldr	r3, [r3, #24]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d101      	bne.n	80054da <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80054d6:	2301      	movs	r3, #1
 80054d8:	e3ac      	b.n	8005c34 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6a1a      	ldr	r2, [r3, #32]
 80054de:	4b8c      	ldr	r3, [pc, #560]	; (8005710 <HAL_RCC_OscConfig+0x298>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f003 0308 	and.w	r3, r3, #8
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d004      	beq.n	80054f4 <HAL_RCC_OscConfig+0x7c>
 80054ea:	4b89      	ldr	r3, [pc, #548]	; (8005710 <HAL_RCC_OscConfig+0x298>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80054f2:	e005      	b.n	8005500 <HAL_RCC_OscConfig+0x88>
 80054f4:	4b86      	ldr	r3, [pc, #536]	; (8005710 <HAL_RCC_OscConfig+0x298>)
 80054f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80054fa:	091b      	lsrs	r3, r3, #4
 80054fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005500:	4293      	cmp	r3, r2
 8005502:	d223      	bcs.n	800554c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6a1b      	ldr	r3, [r3, #32]
 8005508:	4618      	mov	r0, r3
 800550a:	f000 fd41 	bl	8005f90 <RCC_SetFlashLatencyFromMSIRange>
 800550e:	4603      	mov	r3, r0
 8005510:	2b00      	cmp	r3, #0
 8005512:	d001      	beq.n	8005518 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8005514:	2301      	movs	r3, #1
 8005516:	e38d      	b.n	8005c34 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005518:	4b7d      	ldr	r3, [pc, #500]	; (8005710 <HAL_RCC_OscConfig+0x298>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a7c      	ldr	r2, [pc, #496]	; (8005710 <HAL_RCC_OscConfig+0x298>)
 800551e:	f043 0308 	orr.w	r3, r3, #8
 8005522:	6013      	str	r3, [r2, #0]
 8005524:	4b7a      	ldr	r3, [pc, #488]	; (8005710 <HAL_RCC_OscConfig+0x298>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6a1b      	ldr	r3, [r3, #32]
 8005530:	4977      	ldr	r1, [pc, #476]	; (8005710 <HAL_RCC_OscConfig+0x298>)
 8005532:	4313      	orrs	r3, r2
 8005534:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005536:	4b76      	ldr	r3, [pc, #472]	; (8005710 <HAL_RCC_OscConfig+0x298>)
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	69db      	ldr	r3, [r3, #28]
 8005542:	021b      	lsls	r3, r3, #8
 8005544:	4972      	ldr	r1, [pc, #456]	; (8005710 <HAL_RCC_OscConfig+0x298>)
 8005546:	4313      	orrs	r3, r2
 8005548:	604b      	str	r3, [r1, #4]
 800554a:	e025      	b.n	8005598 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800554c:	4b70      	ldr	r3, [pc, #448]	; (8005710 <HAL_RCC_OscConfig+0x298>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a6f      	ldr	r2, [pc, #444]	; (8005710 <HAL_RCC_OscConfig+0x298>)
 8005552:	f043 0308 	orr.w	r3, r3, #8
 8005556:	6013      	str	r3, [r2, #0]
 8005558:	4b6d      	ldr	r3, [pc, #436]	; (8005710 <HAL_RCC_OscConfig+0x298>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6a1b      	ldr	r3, [r3, #32]
 8005564:	496a      	ldr	r1, [pc, #424]	; (8005710 <HAL_RCC_OscConfig+0x298>)
 8005566:	4313      	orrs	r3, r2
 8005568:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800556a:	4b69      	ldr	r3, [pc, #420]	; (8005710 <HAL_RCC_OscConfig+0x298>)
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	69db      	ldr	r3, [r3, #28]
 8005576:	021b      	lsls	r3, r3, #8
 8005578:	4965      	ldr	r1, [pc, #404]	; (8005710 <HAL_RCC_OscConfig+0x298>)
 800557a:	4313      	orrs	r3, r2
 800557c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800557e:	69bb      	ldr	r3, [r7, #24]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d109      	bne.n	8005598 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6a1b      	ldr	r3, [r3, #32]
 8005588:	4618      	mov	r0, r3
 800558a:	f000 fd01 	bl	8005f90 <RCC_SetFlashLatencyFromMSIRange>
 800558e:	4603      	mov	r3, r0
 8005590:	2b00      	cmp	r3, #0
 8005592:	d001      	beq.n	8005598 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8005594:	2301      	movs	r3, #1
 8005596:	e34d      	b.n	8005c34 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005598:	f000 fc36 	bl	8005e08 <HAL_RCC_GetSysClockFreq>
 800559c:	4602      	mov	r2, r0
 800559e:	4b5c      	ldr	r3, [pc, #368]	; (8005710 <HAL_RCC_OscConfig+0x298>)
 80055a0:	689b      	ldr	r3, [r3, #8]
 80055a2:	091b      	lsrs	r3, r3, #4
 80055a4:	f003 030f 	and.w	r3, r3, #15
 80055a8:	495a      	ldr	r1, [pc, #360]	; (8005714 <HAL_RCC_OscConfig+0x29c>)
 80055aa:	5ccb      	ldrb	r3, [r1, r3]
 80055ac:	f003 031f 	and.w	r3, r3, #31
 80055b0:	fa22 f303 	lsr.w	r3, r2, r3
 80055b4:	4a58      	ldr	r2, [pc, #352]	; (8005718 <HAL_RCC_OscConfig+0x2a0>)
 80055b6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80055b8:	4b58      	ldr	r3, [pc, #352]	; (800571c <HAL_RCC_OscConfig+0x2a4>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4618      	mov	r0, r3
 80055be:	f7fd f917 	bl	80027f0 <HAL_InitTick>
 80055c2:	4603      	mov	r3, r0
 80055c4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80055c6:	7bfb      	ldrb	r3, [r7, #15]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d052      	beq.n	8005672 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80055cc:	7bfb      	ldrb	r3, [r7, #15]
 80055ce:	e331      	b.n	8005c34 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	699b      	ldr	r3, [r3, #24]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d032      	beq.n	800563e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80055d8:	4b4d      	ldr	r3, [pc, #308]	; (8005710 <HAL_RCC_OscConfig+0x298>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a4c      	ldr	r2, [pc, #304]	; (8005710 <HAL_RCC_OscConfig+0x298>)
 80055de:	f043 0301 	orr.w	r3, r3, #1
 80055e2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80055e4:	f7fd f954 	bl	8002890 <HAL_GetTick>
 80055e8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80055ea:	e008      	b.n	80055fe <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80055ec:	f7fd f950 	bl	8002890 <HAL_GetTick>
 80055f0:	4602      	mov	r2, r0
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	1ad3      	subs	r3, r2, r3
 80055f6:	2b02      	cmp	r3, #2
 80055f8:	d901      	bls.n	80055fe <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80055fa:	2303      	movs	r3, #3
 80055fc:	e31a      	b.n	8005c34 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80055fe:	4b44      	ldr	r3, [pc, #272]	; (8005710 <HAL_RCC_OscConfig+0x298>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f003 0302 	and.w	r3, r3, #2
 8005606:	2b00      	cmp	r3, #0
 8005608:	d0f0      	beq.n	80055ec <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800560a:	4b41      	ldr	r3, [pc, #260]	; (8005710 <HAL_RCC_OscConfig+0x298>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a40      	ldr	r2, [pc, #256]	; (8005710 <HAL_RCC_OscConfig+0x298>)
 8005610:	f043 0308 	orr.w	r3, r3, #8
 8005614:	6013      	str	r3, [r2, #0]
 8005616:	4b3e      	ldr	r3, [pc, #248]	; (8005710 <HAL_RCC_OscConfig+0x298>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6a1b      	ldr	r3, [r3, #32]
 8005622:	493b      	ldr	r1, [pc, #236]	; (8005710 <HAL_RCC_OscConfig+0x298>)
 8005624:	4313      	orrs	r3, r2
 8005626:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005628:	4b39      	ldr	r3, [pc, #228]	; (8005710 <HAL_RCC_OscConfig+0x298>)
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	69db      	ldr	r3, [r3, #28]
 8005634:	021b      	lsls	r3, r3, #8
 8005636:	4936      	ldr	r1, [pc, #216]	; (8005710 <HAL_RCC_OscConfig+0x298>)
 8005638:	4313      	orrs	r3, r2
 800563a:	604b      	str	r3, [r1, #4]
 800563c:	e01a      	b.n	8005674 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800563e:	4b34      	ldr	r3, [pc, #208]	; (8005710 <HAL_RCC_OscConfig+0x298>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4a33      	ldr	r2, [pc, #204]	; (8005710 <HAL_RCC_OscConfig+0x298>)
 8005644:	f023 0301 	bic.w	r3, r3, #1
 8005648:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800564a:	f7fd f921 	bl	8002890 <HAL_GetTick>
 800564e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005650:	e008      	b.n	8005664 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005652:	f7fd f91d 	bl	8002890 <HAL_GetTick>
 8005656:	4602      	mov	r2, r0
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	1ad3      	subs	r3, r2, r3
 800565c:	2b02      	cmp	r3, #2
 800565e:	d901      	bls.n	8005664 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8005660:	2303      	movs	r3, #3
 8005662:	e2e7      	b.n	8005c34 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005664:	4b2a      	ldr	r3, [pc, #168]	; (8005710 <HAL_RCC_OscConfig+0x298>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f003 0302 	and.w	r3, r3, #2
 800566c:	2b00      	cmp	r3, #0
 800566e:	d1f0      	bne.n	8005652 <HAL_RCC_OscConfig+0x1da>
 8005670:	e000      	b.n	8005674 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005672:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f003 0301 	and.w	r3, r3, #1
 800567c:	2b00      	cmp	r3, #0
 800567e:	d074      	beq.n	800576a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005680:	69bb      	ldr	r3, [r7, #24]
 8005682:	2b08      	cmp	r3, #8
 8005684:	d005      	beq.n	8005692 <HAL_RCC_OscConfig+0x21a>
 8005686:	69bb      	ldr	r3, [r7, #24]
 8005688:	2b0c      	cmp	r3, #12
 800568a:	d10e      	bne.n	80056aa <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	2b03      	cmp	r3, #3
 8005690:	d10b      	bne.n	80056aa <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005692:	4b1f      	ldr	r3, [pc, #124]	; (8005710 <HAL_RCC_OscConfig+0x298>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800569a:	2b00      	cmp	r3, #0
 800569c:	d064      	beq.n	8005768 <HAL_RCC_OscConfig+0x2f0>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d160      	bne.n	8005768 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80056a6:	2301      	movs	r3, #1
 80056a8:	e2c4      	b.n	8005c34 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056b2:	d106      	bne.n	80056c2 <HAL_RCC_OscConfig+0x24a>
 80056b4:	4b16      	ldr	r3, [pc, #88]	; (8005710 <HAL_RCC_OscConfig+0x298>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a15      	ldr	r2, [pc, #84]	; (8005710 <HAL_RCC_OscConfig+0x298>)
 80056ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056be:	6013      	str	r3, [r2, #0]
 80056c0:	e01d      	b.n	80056fe <HAL_RCC_OscConfig+0x286>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80056ca:	d10c      	bne.n	80056e6 <HAL_RCC_OscConfig+0x26e>
 80056cc:	4b10      	ldr	r3, [pc, #64]	; (8005710 <HAL_RCC_OscConfig+0x298>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a0f      	ldr	r2, [pc, #60]	; (8005710 <HAL_RCC_OscConfig+0x298>)
 80056d2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80056d6:	6013      	str	r3, [r2, #0]
 80056d8:	4b0d      	ldr	r3, [pc, #52]	; (8005710 <HAL_RCC_OscConfig+0x298>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a0c      	ldr	r2, [pc, #48]	; (8005710 <HAL_RCC_OscConfig+0x298>)
 80056de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056e2:	6013      	str	r3, [r2, #0]
 80056e4:	e00b      	b.n	80056fe <HAL_RCC_OscConfig+0x286>
 80056e6:	4b0a      	ldr	r3, [pc, #40]	; (8005710 <HAL_RCC_OscConfig+0x298>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a09      	ldr	r2, [pc, #36]	; (8005710 <HAL_RCC_OscConfig+0x298>)
 80056ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056f0:	6013      	str	r3, [r2, #0]
 80056f2:	4b07      	ldr	r3, [pc, #28]	; (8005710 <HAL_RCC_OscConfig+0x298>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a06      	ldr	r2, [pc, #24]	; (8005710 <HAL_RCC_OscConfig+0x298>)
 80056f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80056fc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d01c      	beq.n	8005740 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005706:	f7fd f8c3 	bl	8002890 <HAL_GetTick>
 800570a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800570c:	e011      	b.n	8005732 <HAL_RCC_OscConfig+0x2ba>
 800570e:	bf00      	nop
 8005710:	40021000 	.word	0x40021000
 8005714:	0800b958 	.word	0x0800b958
 8005718:	20000008 	.word	0x20000008
 800571c:	2000000c 	.word	0x2000000c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005720:	f7fd f8b6 	bl	8002890 <HAL_GetTick>
 8005724:	4602      	mov	r2, r0
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	1ad3      	subs	r3, r2, r3
 800572a:	2b64      	cmp	r3, #100	; 0x64
 800572c:	d901      	bls.n	8005732 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800572e:	2303      	movs	r3, #3
 8005730:	e280      	b.n	8005c34 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005732:	4baf      	ldr	r3, [pc, #700]	; (80059f0 <HAL_RCC_OscConfig+0x578>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800573a:	2b00      	cmp	r3, #0
 800573c:	d0f0      	beq.n	8005720 <HAL_RCC_OscConfig+0x2a8>
 800573e:	e014      	b.n	800576a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005740:	f7fd f8a6 	bl	8002890 <HAL_GetTick>
 8005744:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005746:	e008      	b.n	800575a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005748:	f7fd f8a2 	bl	8002890 <HAL_GetTick>
 800574c:	4602      	mov	r2, r0
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	1ad3      	subs	r3, r2, r3
 8005752:	2b64      	cmp	r3, #100	; 0x64
 8005754:	d901      	bls.n	800575a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005756:	2303      	movs	r3, #3
 8005758:	e26c      	b.n	8005c34 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800575a:	4ba5      	ldr	r3, [pc, #660]	; (80059f0 <HAL_RCC_OscConfig+0x578>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005762:	2b00      	cmp	r3, #0
 8005764:	d1f0      	bne.n	8005748 <HAL_RCC_OscConfig+0x2d0>
 8005766:	e000      	b.n	800576a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005768:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f003 0302 	and.w	r3, r3, #2
 8005772:	2b00      	cmp	r3, #0
 8005774:	d060      	beq.n	8005838 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005776:	69bb      	ldr	r3, [r7, #24]
 8005778:	2b04      	cmp	r3, #4
 800577a:	d005      	beq.n	8005788 <HAL_RCC_OscConfig+0x310>
 800577c:	69bb      	ldr	r3, [r7, #24]
 800577e:	2b0c      	cmp	r3, #12
 8005780:	d119      	bne.n	80057b6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	2b02      	cmp	r3, #2
 8005786:	d116      	bne.n	80057b6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005788:	4b99      	ldr	r3, [pc, #612]	; (80059f0 <HAL_RCC_OscConfig+0x578>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005790:	2b00      	cmp	r3, #0
 8005792:	d005      	beq.n	80057a0 <HAL_RCC_OscConfig+0x328>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	68db      	ldr	r3, [r3, #12]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d101      	bne.n	80057a0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800579c:	2301      	movs	r3, #1
 800579e:	e249      	b.n	8005c34 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057a0:	4b93      	ldr	r3, [pc, #588]	; (80059f0 <HAL_RCC_OscConfig+0x578>)
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	691b      	ldr	r3, [r3, #16]
 80057ac:	061b      	lsls	r3, r3, #24
 80057ae:	4990      	ldr	r1, [pc, #576]	; (80059f0 <HAL_RCC_OscConfig+0x578>)
 80057b0:	4313      	orrs	r3, r2
 80057b2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80057b4:	e040      	b.n	8005838 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	68db      	ldr	r3, [r3, #12]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d023      	beq.n	8005806 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80057be:	4b8c      	ldr	r3, [pc, #560]	; (80059f0 <HAL_RCC_OscConfig+0x578>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a8b      	ldr	r2, [pc, #556]	; (80059f0 <HAL_RCC_OscConfig+0x578>)
 80057c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057ca:	f7fd f861 	bl	8002890 <HAL_GetTick>
 80057ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80057d0:	e008      	b.n	80057e4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80057d2:	f7fd f85d 	bl	8002890 <HAL_GetTick>
 80057d6:	4602      	mov	r2, r0
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	1ad3      	subs	r3, r2, r3
 80057dc:	2b02      	cmp	r3, #2
 80057de:	d901      	bls.n	80057e4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80057e0:	2303      	movs	r3, #3
 80057e2:	e227      	b.n	8005c34 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80057e4:	4b82      	ldr	r3, [pc, #520]	; (80059f0 <HAL_RCC_OscConfig+0x578>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d0f0      	beq.n	80057d2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057f0:	4b7f      	ldr	r3, [pc, #508]	; (80059f0 <HAL_RCC_OscConfig+0x578>)
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	691b      	ldr	r3, [r3, #16]
 80057fc:	061b      	lsls	r3, r3, #24
 80057fe:	497c      	ldr	r1, [pc, #496]	; (80059f0 <HAL_RCC_OscConfig+0x578>)
 8005800:	4313      	orrs	r3, r2
 8005802:	604b      	str	r3, [r1, #4]
 8005804:	e018      	b.n	8005838 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005806:	4b7a      	ldr	r3, [pc, #488]	; (80059f0 <HAL_RCC_OscConfig+0x578>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a79      	ldr	r2, [pc, #484]	; (80059f0 <HAL_RCC_OscConfig+0x578>)
 800580c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005810:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005812:	f7fd f83d 	bl	8002890 <HAL_GetTick>
 8005816:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005818:	e008      	b.n	800582c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800581a:	f7fd f839 	bl	8002890 <HAL_GetTick>
 800581e:	4602      	mov	r2, r0
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	1ad3      	subs	r3, r2, r3
 8005824:	2b02      	cmp	r3, #2
 8005826:	d901      	bls.n	800582c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005828:	2303      	movs	r3, #3
 800582a:	e203      	b.n	8005c34 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800582c:	4b70      	ldr	r3, [pc, #448]	; (80059f0 <HAL_RCC_OscConfig+0x578>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005834:	2b00      	cmp	r3, #0
 8005836:	d1f0      	bne.n	800581a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f003 0308 	and.w	r3, r3, #8
 8005840:	2b00      	cmp	r3, #0
 8005842:	d03c      	beq.n	80058be <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	695b      	ldr	r3, [r3, #20]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d01c      	beq.n	8005886 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800584c:	4b68      	ldr	r3, [pc, #416]	; (80059f0 <HAL_RCC_OscConfig+0x578>)
 800584e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005852:	4a67      	ldr	r2, [pc, #412]	; (80059f0 <HAL_RCC_OscConfig+0x578>)
 8005854:	f043 0301 	orr.w	r3, r3, #1
 8005858:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800585c:	f7fd f818 	bl	8002890 <HAL_GetTick>
 8005860:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005862:	e008      	b.n	8005876 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005864:	f7fd f814 	bl	8002890 <HAL_GetTick>
 8005868:	4602      	mov	r2, r0
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	1ad3      	subs	r3, r2, r3
 800586e:	2b02      	cmp	r3, #2
 8005870:	d901      	bls.n	8005876 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005872:	2303      	movs	r3, #3
 8005874:	e1de      	b.n	8005c34 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005876:	4b5e      	ldr	r3, [pc, #376]	; (80059f0 <HAL_RCC_OscConfig+0x578>)
 8005878:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800587c:	f003 0302 	and.w	r3, r3, #2
 8005880:	2b00      	cmp	r3, #0
 8005882:	d0ef      	beq.n	8005864 <HAL_RCC_OscConfig+0x3ec>
 8005884:	e01b      	b.n	80058be <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005886:	4b5a      	ldr	r3, [pc, #360]	; (80059f0 <HAL_RCC_OscConfig+0x578>)
 8005888:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800588c:	4a58      	ldr	r2, [pc, #352]	; (80059f0 <HAL_RCC_OscConfig+0x578>)
 800588e:	f023 0301 	bic.w	r3, r3, #1
 8005892:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005896:	f7fc fffb 	bl	8002890 <HAL_GetTick>
 800589a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800589c:	e008      	b.n	80058b0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800589e:	f7fc fff7 	bl	8002890 <HAL_GetTick>
 80058a2:	4602      	mov	r2, r0
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	1ad3      	subs	r3, r2, r3
 80058a8:	2b02      	cmp	r3, #2
 80058aa:	d901      	bls.n	80058b0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80058ac:	2303      	movs	r3, #3
 80058ae:	e1c1      	b.n	8005c34 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80058b0:	4b4f      	ldr	r3, [pc, #316]	; (80059f0 <HAL_RCC_OscConfig+0x578>)
 80058b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058b6:	f003 0302 	and.w	r3, r3, #2
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d1ef      	bne.n	800589e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f003 0304 	and.w	r3, r3, #4
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	f000 80a6 	beq.w	8005a18 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80058cc:	2300      	movs	r3, #0
 80058ce:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80058d0:	4b47      	ldr	r3, [pc, #284]	; (80059f0 <HAL_RCC_OscConfig+0x578>)
 80058d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d10d      	bne.n	80058f8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80058dc:	4b44      	ldr	r3, [pc, #272]	; (80059f0 <HAL_RCC_OscConfig+0x578>)
 80058de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058e0:	4a43      	ldr	r2, [pc, #268]	; (80059f0 <HAL_RCC_OscConfig+0x578>)
 80058e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058e6:	6593      	str	r3, [r2, #88]	; 0x58
 80058e8:	4b41      	ldr	r3, [pc, #260]	; (80059f0 <HAL_RCC_OscConfig+0x578>)
 80058ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058f0:	60bb      	str	r3, [r7, #8]
 80058f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80058f4:	2301      	movs	r3, #1
 80058f6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80058f8:	4b3e      	ldr	r3, [pc, #248]	; (80059f4 <HAL_RCC_OscConfig+0x57c>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005900:	2b00      	cmp	r3, #0
 8005902:	d118      	bne.n	8005936 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005904:	4b3b      	ldr	r3, [pc, #236]	; (80059f4 <HAL_RCC_OscConfig+0x57c>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a3a      	ldr	r2, [pc, #232]	; (80059f4 <HAL_RCC_OscConfig+0x57c>)
 800590a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800590e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005910:	f7fc ffbe 	bl	8002890 <HAL_GetTick>
 8005914:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005916:	e008      	b.n	800592a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005918:	f7fc ffba 	bl	8002890 <HAL_GetTick>
 800591c:	4602      	mov	r2, r0
 800591e:	693b      	ldr	r3, [r7, #16]
 8005920:	1ad3      	subs	r3, r2, r3
 8005922:	2b02      	cmp	r3, #2
 8005924:	d901      	bls.n	800592a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005926:	2303      	movs	r3, #3
 8005928:	e184      	b.n	8005c34 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800592a:	4b32      	ldr	r3, [pc, #200]	; (80059f4 <HAL_RCC_OscConfig+0x57c>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005932:	2b00      	cmp	r3, #0
 8005934:	d0f0      	beq.n	8005918 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	689b      	ldr	r3, [r3, #8]
 800593a:	2b01      	cmp	r3, #1
 800593c:	d108      	bne.n	8005950 <HAL_RCC_OscConfig+0x4d8>
 800593e:	4b2c      	ldr	r3, [pc, #176]	; (80059f0 <HAL_RCC_OscConfig+0x578>)
 8005940:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005944:	4a2a      	ldr	r2, [pc, #168]	; (80059f0 <HAL_RCC_OscConfig+0x578>)
 8005946:	f043 0301 	orr.w	r3, r3, #1
 800594a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800594e:	e024      	b.n	800599a <HAL_RCC_OscConfig+0x522>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	689b      	ldr	r3, [r3, #8]
 8005954:	2b05      	cmp	r3, #5
 8005956:	d110      	bne.n	800597a <HAL_RCC_OscConfig+0x502>
 8005958:	4b25      	ldr	r3, [pc, #148]	; (80059f0 <HAL_RCC_OscConfig+0x578>)
 800595a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800595e:	4a24      	ldr	r2, [pc, #144]	; (80059f0 <HAL_RCC_OscConfig+0x578>)
 8005960:	f043 0304 	orr.w	r3, r3, #4
 8005964:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005968:	4b21      	ldr	r3, [pc, #132]	; (80059f0 <HAL_RCC_OscConfig+0x578>)
 800596a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800596e:	4a20      	ldr	r2, [pc, #128]	; (80059f0 <HAL_RCC_OscConfig+0x578>)
 8005970:	f043 0301 	orr.w	r3, r3, #1
 8005974:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005978:	e00f      	b.n	800599a <HAL_RCC_OscConfig+0x522>
 800597a:	4b1d      	ldr	r3, [pc, #116]	; (80059f0 <HAL_RCC_OscConfig+0x578>)
 800597c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005980:	4a1b      	ldr	r2, [pc, #108]	; (80059f0 <HAL_RCC_OscConfig+0x578>)
 8005982:	f023 0301 	bic.w	r3, r3, #1
 8005986:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800598a:	4b19      	ldr	r3, [pc, #100]	; (80059f0 <HAL_RCC_OscConfig+0x578>)
 800598c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005990:	4a17      	ldr	r2, [pc, #92]	; (80059f0 <HAL_RCC_OscConfig+0x578>)
 8005992:	f023 0304 	bic.w	r3, r3, #4
 8005996:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	689b      	ldr	r3, [r3, #8]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d016      	beq.n	80059d0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059a2:	f7fc ff75 	bl	8002890 <HAL_GetTick>
 80059a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80059a8:	e00a      	b.n	80059c0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059aa:	f7fc ff71 	bl	8002890 <HAL_GetTick>
 80059ae:	4602      	mov	r2, r0
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	1ad3      	subs	r3, r2, r3
 80059b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d901      	bls.n	80059c0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80059bc:	2303      	movs	r3, #3
 80059be:	e139      	b.n	8005c34 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80059c0:	4b0b      	ldr	r3, [pc, #44]	; (80059f0 <HAL_RCC_OscConfig+0x578>)
 80059c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059c6:	f003 0302 	and.w	r3, r3, #2
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d0ed      	beq.n	80059aa <HAL_RCC_OscConfig+0x532>
 80059ce:	e01a      	b.n	8005a06 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059d0:	f7fc ff5e 	bl	8002890 <HAL_GetTick>
 80059d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80059d6:	e00f      	b.n	80059f8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059d8:	f7fc ff5a 	bl	8002890 <HAL_GetTick>
 80059dc:	4602      	mov	r2, r0
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	1ad3      	subs	r3, r2, r3
 80059e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d906      	bls.n	80059f8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80059ea:	2303      	movs	r3, #3
 80059ec:	e122      	b.n	8005c34 <HAL_RCC_OscConfig+0x7bc>
 80059ee:	bf00      	nop
 80059f0:	40021000 	.word	0x40021000
 80059f4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80059f8:	4b90      	ldr	r3, [pc, #576]	; (8005c3c <HAL_RCC_OscConfig+0x7c4>)
 80059fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059fe:	f003 0302 	and.w	r3, r3, #2
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d1e8      	bne.n	80059d8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005a06:	7ffb      	ldrb	r3, [r7, #31]
 8005a08:	2b01      	cmp	r3, #1
 8005a0a:	d105      	bne.n	8005a18 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a0c:	4b8b      	ldr	r3, [pc, #556]	; (8005c3c <HAL_RCC_OscConfig+0x7c4>)
 8005a0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a10:	4a8a      	ldr	r2, [pc, #552]	; (8005c3c <HAL_RCC_OscConfig+0x7c4>)
 8005a12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a16:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	f000 8108 	beq.w	8005c32 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a26:	2b02      	cmp	r3, #2
 8005a28:	f040 80d0 	bne.w	8005bcc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005a2c:	4b83      	ldr	r3, [pc, #524]	; (8005c3c <HAL_RCC_OscConfig+0x7c4>)
 8005a2e:	68db      	ldr	r3, [r3, #12]
 8005a30:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	f003 0203 	and.w	r2, r3, #3
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a3c:	429a      	cmp	r2, r3
 8005a3e:	d130      	bne.n	8005aa2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a4a:	3b01      	subs	r3, #1
 8005a4c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a4e:	429a      	cmp	r2, r3
 8005a50:	d127      	bne.n	8005aa2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a5c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005a5e:	429a      	cmp	r2, r3
 8005a60:	d11f      	bne.n	8005aa2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a68:	687a      	ldr	r2, [r7, #4]
 8005a6a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005a6c:	2a07      	cmp	r2, #7
 8005a6e:	bf14      	ite	ne
 8005a70:	2201      	movne	r2, #1
 8005a72:	2200      	moveq	r2, #0
 8005a74:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d113      	bne.n	8005aa2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a84:	085b      	lsrs	r3, r3, #1
 8005a86:	3b01      	subs	r3, #1
 8005a88:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005a8a:	429a      	cmp	r2, r3
 8005a8c:	d109      	bne.n	8005aa2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a98:	085b      	lsrs	r3, r3, #1
 8005a9a:	3b01      	subs	r3, #1
 8005a9c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005a9e:	429a      	cmp	r2, r3
 8005aa0:	d06e      	beq.n	8005b80 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005aa2:	69bb      	ldr	r3, [r7, #24]
 8005aa4:	2b0c      	cmp	r3, #12
 8005aa6:	d069      	beq.n	8005b7c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005aa8:	4b64      	ldr	r3, [pc, #400]	; (8005c3c <HAL_RCC_OscConfig+0x7c4>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d105      	bne.n	8005ac0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005ab4:	4b61      	ldr	r3, [pc, #388]	; (8005c3c <HAL_RCC_OscConfig+0x7c4>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d001      	beq.n	8005ac4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	e0b7      	b.n	8005c34 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005ac4:	4b5d      	ldr	r3, [pc, #372]	; (8005c3c <HAL_RCC_OscConfig+0x7c4>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a5c      	ldr	r2, [pc, #368]	; (8005c3c <HAL_RCC_OscConfig+0x7c4>)
 8005aca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005ace:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005ad0:	f7fc fede 	bl	8002890 <HAL_GetTick>
 8005ad4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ad6:	e008      	b.n	8005aea <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ad8:	f7fc feda 	bl	8002890 <HAL_GetTick>
 8005adc:	4602      	mov	r2, r0
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	1ad3      	subs	r3, r2, r3
 8005ae2:	2b02      	cmp	r3, #2
 8005ae4:	d901      	bls.n	8005aea <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8005ae6:	2303      	movs	r3, #3
 8005ae8:	e0a4      	b.n	8005c34 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005aea:	4b54      	ldr	r3, [pc, #336]	; (8005c3c <HAL_RCC_OscConfig+0x7c4>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d1f0      	bne.n	8005ad8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005af6:	4b51      	ldr	r3, [pc, #324]	; (8005c3c <HAL_RCC_OscConfig+0x7c4>)
 8005af8:	68da      	ldr	r2, [r3, #12]
 8005afa:	4b51      	ldr	r3, [pc, #324]	; (8005c40 <HAL_RCC_OscConfig+0x7c8>)
 8005afc:	4013      	ands	r3, r2
 8005afe:	687a      	ldr	r2, [r7, #4]
 8005b00:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005b02:	687a      	ldr	r2, [r7, #4]
 8005b04:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005b06:	3a01      	subs	r2, #1
 8005b08:	0112      	lsls	r2, r2, #4
 8005b0a:	4311      	orrs	r1, r2
 8005b0c:	687a      	ldr	r2, [r7, #4]
 8005b0e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005b10:	0212      	lsls	r2, r2, #8
 8005b12:	4311      	orrs	r1, r2
 8005b14:	687a      	ldr	r2, [r7, #4]
 8005b16:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005b18:	0852      	lsrs	r2, r2, #1
 8005b1a:	3a01      	subs	r2, #1
 8005b1c:	0552      	lsls	r2, r2, #21
 8005b1e:	4311      	orrs	r1, r2
 8005b20:	687a      	ldr	r2, [r7, #4]
 8005b22:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005b24:	0852      	lsrs	r2, r2, #1
 8005b26:	3a01      	subs	r2, #1
 8005b28:	0652      	lsls	r2, r2, #25
 8005b2a:	4311      	orrs	r1, r2
 8005b2c:	687a      	ldr	r2, [r7, #4]
 8005b2e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005b30:	0912      	lsrs	r2, r2, #4
 8005b32:	0452      	lsls	r2, r2, #17
 8005b34:	430a      	orrs	r2, r1
 8005b36:	4941      	ldr	r1, [pc, #260]	; (8005c3c <HAL_RCC_OscConfig+0x7c4>)
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005b3c:	4b3f      	ldr	r3, [pc, #252]	; (8005c3c <HAL_RCC_OscConfig+0x7c4>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a3e      	ldr	r2, [pc, #248]	; (8005c3c <HAL_RCC_OscConfig+0x7c4>)
 8005b42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b46:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005b48:	4b3c      	ldr	r3, [pc, #240]	; (8005c3c <HAL_RCC_OscConfig+0x7c4>)
 8005b4a:	68db      	ldr	r3, [r3, #12]
 8005b4c:	4a3b      	ldr	r2, [pc, #236]	; (8005c3c <HAL_RCC_OscConfig+0x7c4>)
 8005b4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b52:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005b54:	f7fc fe9c 	bl	8002890 <HAL_GetTick>
 8005b58:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b5a:	e008      	b.n	8005b6e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b5c:	f7fc fe98 	bl	8002890 <HAL_GetTick>
 8005b60:	4602      	mov	r2, r0
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	1ad3      	subs	r3, r2, r3
 8005b66:	2b02      	cmp	r3, #2
 8005b68:	d901      	bls.n	8005b6e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8005b6a:	2303      	movs	r3, #3
 8005b6c:	e062      	b.n	8005c34 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b6e:	4b33      	ldr	r3, [pc, #204]	; (8005c3c <HAL_RCC_OscConfig+0x7c4>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d0f0      	beq.n	8005b5c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005b7a:	e05a      	b.n	8005c32 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	e059      	b.n	8005c34 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b80:	4b2e      	ldr	r3, [pc, #184]	; (8005c3c <HAL_RCC_OscConfig+0x7c4>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d152      	bne.n	8005c32 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005b8c:	4b2b      	ldr	r3, [pc, #172]	; (8005c3c <HAL_RCC_OscConfig+0x7c4>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a2a      	ldr	r2, [pc, #168]	; (8005c3c <HAL_RCC_OscConfig+0x7c4>)
 8005b92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b96:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005b98:	4b28      	ldr	r3, [pc, #160]	; (8005c3c <HAL_RCC_OscConfig+0x7c4>)
 8005b9a:	68db      	ldr	r3, [r3, #12]
 8005b9c:	4a27      	ldr	r2, [pc, #156]	; (8005c3c <HAL_RCC_OscConfig+0x7c4>)
 8005b9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005ba2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005ba4:	f7fc fe74 	bl	8002890 <HAL_GetTick>
 8005ba8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005baa:	e008      	b.n	8005bbe <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bac:	f7fc fe70 	bl	8002890 <HAL_GetTick>
 8005bb0:	4602      	mov	r2, r0
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	1ad3      	subs	r3, r2, r3
 8005bb6:	2b02      	cmp	r3, #2
 8005bb8:	d901      	bls.n	8005bbe <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8005bba:	2303      	movs	r3, #3
 8005bbc:	e03a      	b.n	8005c34 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005bbe:	4b1f      	ldr	r3, [pc, #124]	; (8005c3c <HAL_RCC_OscConfig+0x7c4>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d0f0      	beq.n	8005bac <HAL_RCC_OscConfig+0x734>
 8005bca:	e032      	b.n	8005c32 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005bcc:	69bb      	ldr	r3, [r7, #24]
 8005bce:	2b0c      	cmp	r3, #12
 8005bd0:	d02d      	beq.n	8005c2e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bd2:	4b1a      	ldr	r3, [pc, #104]	; (8005c3c <HAL_RCC_OscConfig+0x7c4>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a19      	ldr	r2, [pc, #100]	; (8005c3c <HAL_RCC_OscConfig+0x7c4>)
 8005bd8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005bdc:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8005bde:	4b17      	ldr	r3, [pc, #92]	; (8005c3c <HAL_RCC_OscConfig+0x7c4>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d105      	bne.n	8005bf6 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005bea:	4b14      	ldr	r3, [pc, #80]	; (8005c3c <HAL_RCC_OscConfig+0x7c4>)
 8005bec:	68db      	ldr	r3, [r3, #12]
 8005bee:	4a13      	ldr	r2, [pc, #76]	; (8005c3c <HAL_RCC_OscConfig+0x7c4>)
 8005bf0:	f023 0303 	bic.w	r3, r3, #3
 8005bf4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005bf6:	4b11      	ldr	r3, [pc, #68]	; (8005c3c <HAL_RCC_OscConfig+0x7c4>)
 8005bf8:	68db      	ldr	r3, [r3, #12]
 8005bfa:	4a10      	ldr	r2, [pc, #64]	; (8005c3c <HAL_RCC_OscConfig+0x7c4>)
 8005bfc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005c00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c04:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c06:	f7fc fe43 	bl	8002890 <HAL_GetTick>
 8005c0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c0c:	e008      	b.n	8005c20 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c0e:	f7fc fe3f 	bl	8002890 <HAL_GetTick>
 8005c12:	4602      	mov	r2, r0
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	1ad3      	subs	r3, r2, r3
 8005c18:	2b02      	cmp	r3, #2
 8005c1a:	d901      	bls.n	8005c20 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8005c1c:	2303      	movs	r3, #3
 8005c1e:	e009      	b.n	8005c34 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c20:	4b06      	ldr	r3, [pc, #24]	; (8005c3c <HAL_RCC_OscConfig+0x7c4>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d1f0      	bne.n	8005c0e <HAL_RCC_OscConfig+0x796>
 8005c2c:	e001      	b.n	8005c32 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005c2e:	2301      	movs	r3, #1
 8005c30:	e000      	b.n	8005c34 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8005c32:	2300      	movs	r3, #0
}
 8005c34:	4618      	mov	r0, r3
 8005c36:	3720      	adds	r7, #32
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bd80      	pop	{r7, pc}
 8005c3c:	40021000 	.word	0x40021000
 8005c40:	f99d808c 	.word	0xf99d808c

08005c44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b084      	sub	sp, #16
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
 8005c4c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d101      	bne.n	8005c58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005c54:	2301      	movs	r3, #1
 8005c56:	e0c8      	b.n	8005dea <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005c58:	4b66      	ldr	r3, [pc, #408]	; (8005df4 <HAL_RCC_ClockConfig+0x1b0>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f003 0307 	and.w	r3, r3, #7
 8005c60:	683a      	ldr	r2, [r7, #0]
 8005c62:	429a      	cmp	r2, r3
 8005c64:	d910      	bls.n	8005c88 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c66:	4b63      	ldr	r3, [pc, #396]	; (8005df4 <HAL_RCC_ClockConfig+0x1b0>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f023 0207 	bic.w	r2, r3, #7
 8005c6e:	4961      	ldr	r1, [pc, #388]	; (8005df4 <HAL_RCC_ClockConfig+0x1b0>)
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	4313      	orrs	r3, r2
 8005c74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c76:	4b5f      	ldr	r3, [pc, #380]	; (8005df4 <HAL_RCC_ClockConfig+0x1b0>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f003 0307 	and.w	r3, r3, #7
 8005c7e:	683a      	ldr	r2, [r7, #0]
 8005c80:	429a      	cmp	r2, r3
 8005c82:	d001      	beq.n	8005c88 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005c84:	2301      	movs	r3, #1
 8005c86:	e0b0      	b.n	8005dea <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f003 0301 	and.w	r3, r3, #1
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d04c      	beq.n	8005d2e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	2b03      	cmp	r3, #3
 8005c9a:	d107      	bne.n	8005cac <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c9c:	4b56      	ldr	r3, [pc, #344]	; (8005df8 <HAL_RCC_ClockConfig+0x1b4>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d121      	bne.n	8005cec <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8005ca8:	2301      	movs	r3, #1
 8005caa:	e09e      	b.n	8005dea <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	2b02      	cmp	r3, #2
 8005cb2:	d107      	bne.n	8005cc4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005cb4:	4b50      	ldr	r3, [pc, #320]	; (8005df8 <HAL_RCC_ClockConfig+0x1b4>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d115      	bne.n	8005cec <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	e092      	b.n	8005dea <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	685b      	ldr	r3, [r3, #4]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d107      	bne.n	8005cdc <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005ccc:	4b4a      	ldr	r3, [pc, #296]	; (8005df8 <HAL_RCC_ClockConfig+0x1b4>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f003 0302 	and.w	r3, r3, #2
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d109      	bne.n	8005cec <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	e086      	b.n	8005dea <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005cdc:	4b46      	ldr	r3, [pc, #280]	; (8005df8 <HAL_RCC_ClockConfig+0x1b4>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d101      	bne.n	8005cec <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005ce8:	2301      	movs	r3, #1
 8005cea:	e07e      	b.n	8005dea <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005cec:	4b42      	ldr	r3, [pc, #264]	; (8005df8 <HAL_RCC_ClockConfig+0x1b4>)
 8005cee:	689b      	ldr	r3, [r3, #8]
 8005cf0:	f023 0203 	bic.w	r2, r3, #3
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	685b      	ldr	r3, [r3, #4]
 8005cf8:	493f      	ldr	r1, [pc, #252]	; (8005df8 <HAL_RCC_ClockConfig+0x1b4>)
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005cfe:	f7fc fdc7 	bl	8002890 <HAL_GetTick>
 8005d02:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d04:	e00a      	b.n	8005d1c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d06:	f7fc fdc3 	bl	8002890 <HAL_GetTick>
 8005d0a:	4602      	mov	r2, r0
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	1ad3      	subs	r3, r2, r3
 8005d10:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d901      	bls.n	8005d1c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8005d18:	2303      	movs	r3, #3
 8005d1a:	e066      	b.n	8005dea <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d1c:	4b36      	ldr	r3, [pc, #216]	; (8005df8 <HAL_RCC_ClockConfig+0x1b4>)
 8005d1e:	689b      	ldr	r3, [r3, #8]
 8005d20:	f003 020c 	and.w	r2, r3, #12
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	009b      	lsls	r3, r3, #2
 8005d2a:	429a      	cmp	r2, r3
 8005d2c:	d1eb      	bne.n	8005d06 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f003 0302 	and.w	r3, r3, #2
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d008      	beq.n	8005d4c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d3a:	4b2f      	ldr	r3, [pc, #188]	; (8005df8 <HAL_RCC_ClockConfig+0x1b4>)
 8005d3c:	689b      	ldr	r3, [r3, #8]
 8005d3e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	689b      	ldr	r3, [r3, #8]
 8005d46:	492c      	ldr	r1, [pc, #176]	; (8005df8 <HAL_RCC_ClockConfig+0x1b4>)
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005d4c:	4b29      	ldr	r3, [pc, #164]	; (8005df4 <HAL_RCC_ClockConfig+0x1b0>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f003 0307 	and.w	r3, r3, #7
 8005d54:	683a      	ldr	r2, [r7, #0]
 8005d56:	429a      	cmp	r2, r3
 8005d58:	d210      	bcs.n	8005d7c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d5a:	4b26      	ldr	r3, [pc, #152]	; (8005df4 <HAL_RCC_ClockConfig+0x1b0>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f023 0207 	bic.w	r2, r3, #7
 8005d62:	4924      	ldr	r1, [pc, #144]	; (8005df4 <HAL_RCC_ClockConfig+0x1b0>)
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	4313      	orrs	r3, r2
 8005d68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d6a:	4b22      	ldr	r3, [pc, #136]	; (8005df4 <HAL_RCC_ClockConfig+0x1b0>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f003 0307 	and.w	r3, r3, #7
 8005d72:	683a      	ldr	r2, [r7, #0]
 8005d74:	429a      	cmp	r2, r3
 8005d76:	d001      	beq.n	8005d7c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8005d78:	2301      	movs	r3, #1
 8005d7a:	e036      	b.n	8005dea <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f003 0304 	and.w	r3, r3, #4
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d008      	beq.n	8005d9a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d88:	4b1b      	ldr	r3, [pc, #108]	; (8005df8 <HAL_RCC_ClockConfig+0x1b4>)
 8005d8a:	689b      	ldr	r3, [r3, #8]
 8005d8c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	68db      	ldr	r3, [r3, #12]
 8005d94:	4918      	ldr	r1, [pc, #96]	; (8005df8 <HAL_RCC_ClockConfig+0x1b4>)
 8005d96:	4313      	orrs	r3, r2
 8005d98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f003 0308 	and.w	r3, r3, #8
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d009      	beq.n	8005dba <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005da6:	4b14      	ldr	r3, [pc, #80]	; (8005df8 <HAL_RCC_ClockConfig+0x1b4>)
 8005da8:	689b      	ldr	r3, [r3, #8]
 8005daa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	691b      	ldr	r3, [r3, #16]
 8005db2:	00db      	lsls	r3, r3, #3
 8005db4:	4910      	ldr	r1, [pc, #64]	; (8005df8 <HAL_RCC_ClockConfig+0x1b4>)
 8005db6:	4313      	orrs	r3, r2
 8005db8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005dba:	f000 f825 	bl	8005e08 <HAL_RCC_GetSysClockFreq>
 8005dbe:	4602      	mov	r2, r0
 8005dc0:	4b0d      	ldr	r3, [pc, #52]	; (8005df8 <HAL_RCC_ClockConfig+0x1b4>)
 8005dc2:	689b      	ldr	r3, [r3, #8]
 8005dc4:	091b      	lsrs	r3, r3, #4
 8005dc6:	f003 030f 	and.w	r3, r3, #15
 8005dca:	490c      	ldr	r1, [pc, #48]	; (8005dfc <HAL_RCC_ClockConfig+0x1b8>)
 8005dcc:	5ccb      	ldrb	r3, [r1, r3]
 8005dce:	f003 031f 	and.w	r3, r3, #31
 8005dd2:	fa22 f303 	lsr.w	r3, r2, r3
 8005dd6:	4a0a      	ldr	r2, [pc, #40]	; (8005e00 <HAL_RCC_ClockConfig+0x1bc>)
 8005dd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005dda:	4b0a      	ldr	r3, [pc, #40]	; (8005e04 <HAL_RCC_ClockConfig+0x1c0>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4618      	mov	r0, r3
 8005de0:	f7fc fd06 	bl	80027f0 <HAL_InitTick>
 8005de4:	4603      	mov	r3, r0
 8005de6:	72fb      	strb	r3, [r7, #11]

  return status;
 8005de8:	7afb      	ldrb	r3, [r7, #11]
}
 8005dea:	4618      	mov	r0, r3
 8005dec:	3710      	adds	r7, #16
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}
 8005df2:	bf00      	nop
 8005df4:	40022000 	.word	0x40022000
 8005df8:	40021000 	.word	0x40021000
 8005dfc:	0800b958 	.word	0x0800b958
 8005e00:	20000008 	.word	0x20000008
 8005e04:	2000000c 	.word	0x2000000c

08005e08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b089      	sub	sp, #36	; 0x24
 8005e0c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005e0e:	2300      	movs	r3, #0
 8005e10:	61fb      	str	r3, [r7, #28]
 8005e12:	2300      	movs	r3, #0
 8005e14:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e16:	4b3e      	ldr	r3, [pc, #248]	; (8005f10 <HAL_RCC_GetSysClockFreq+0x108>)
 8005e18:	689b      	ldr	r3, [r3, #8]
 8005e1a:	f003 030c 	and.w	r3, r3, #12
 8005e1e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005e20:	4b3b      	ldr	r3, [pc, #236]	; (8005f10 <HAL_RCC_GetSysClockFreq+0x108>)
 8005e22:	68db      	ldr	r3, [r3, #12]
 8005e24:	f003 0303 	and.w	r3, r3, #3
 8005e28:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d005      	beq.n	8005e3c <HAL_RCC_GetSysClockFreq+0x34>
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	2b0c      	cmp	r3, #12
 8005e34:	d121      	bne.n	8005e7a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	2b01      	cmp	r3, #1
 8005e3a:	d11e      	bne.n	8005e7a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005e3c:	4b34      	ldr	r3, [pc, #208]	; (8005f10 <HAL_RCC_GetSysClockFreq+0x108>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f003 0308 	and.w	r3, r3, #8
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d107      	bne.n	8005e58 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005e48:	4b31      	ldr	r3, [pc, #196]	; (8005f10 <HAL_RCC_GetSysClockFreq+0x108>)
 8005e4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e4e:	0a1b      	lsrs	r3, r3, #8
 8005e50:	f003 030f 	and.w	r3, r3, #15
 8005e54:	61fb      	str	r3, [r7, #28]
 8005e56:	e005      	b.n	8005e64 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005e58:	4b2d      	ldr	r3, [pc, #180]	; (8005f10 <HAL_RCC_GetSysClockFreq+0x108>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	091b      	lsrs	r3, r3, #4
 8005e5e:	f003 030f 	and.w	r3, r3, #15
 8005e62:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005e64:	4a2b      	ldr	r2, [pc, #172]	; (8005f14 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005e66:	69fb      	ldr	r3, [r7, #28]
 8005e68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e6c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d10d      	bne.n	8005e90 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005e74:	69fb      	ldr	r3, [r7, #28]
 8005e76:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005e78:	e00a      	b.n	8005e90 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	2b04      	cmp	r3, #4
 8005e7e:	d102      	bne.n	8005e86 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005e80:	4b25      	ldr	r3, [pc, #148]	; (8005f18 <HAL_RCC_GetSysClockFreq+0x110>)
 8005e82:	61bb      	str	r3, [r7, #24]
 8005e84:	e004      	b.n	8005e90 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	2b08      	cmp	r3, #8
 8005e8a:	d101      	bne.n	8005e90 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005e8c:	4b23      	ldr	r3, [pc, #140]	; (8005f1c <HAL_RCC_GetSysClockFreq+0x114>)
 8005e8e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	2b0c      	cmp	r3, #12
 8005e94:	d134      	bne.n	8005f00 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005e96:	4b1e      	ldr	r3, [pc, #120]	; (8005f10 <HAL_RCC_GetSysClockFreq+0x108>)
 8005e98:	68db      	ldr	r3, [r3, #12]
 8005e9a:	f003 0303 	and.w	r3, r3, #3
 8005e9e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	2b02      	cmp	r3, #2
 8005ea4:	d003      	beq.n	8005eae <HAL_RCC_GetSysClockFreq+0xa6>
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	2b03      	cmp	r3, #3
 8005eaa:	d003      	beq.n	8005eb4 <HAL_RCC_GetSysClockFreq+0xac>
 8005eac:	e005      	b.n	8005eba <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005eae:	4b1a      	ldr	r3, [pc, #104]	; (8005f18 <HAL_RCC_GetSysClockFreq+0x110>)
 8005eb0:	617b      	str	r3, [r7, #20]
      break;
 8005eb2:	e005      	b.n	8005ec0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005eb4:	4b19      	ldr	r3, [pc, #100]	; (8005f1c <HAL_RCC_GetSysClockFreq+0x114>)
 8005eb6:	617b      	str	r3, [r7, #20]
      break;
 8005eb8:	e002      	b.n	8005ec0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005eba:	69fb      	ldr	r3, [r7, #28]
 8005ebc:	617b      	str	r3, [r7, #20]
      break;
 8005ebe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005ec0:	4b13      	ldr	r3, [pc, #76]	; (8005f10 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ec2:	68db      	ldr	r3, [r3, #12]
 8005ec4:	091b      	lsrs	r3, r3, #4
 8005ec6:	f003 0307 	and.w	r3, r3, #7
 8005eca:	3301      	adds	r3, #1
 8005ecc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005ece:	4b10      	ldr	r3, [pc, #64]	; (8005f10 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ed0:	68db      	ldr	r3, [r3, #12]
 8005ed2:	0a1b      	lsrs	r3, r3, #8
 8005ed4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ed8:	697a      	ldr	r2, [r7, #20]
 8005eda:	fb02 f203 	mul.w	r2, r2, r3
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ee4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005ee6:	4b0a      	ldr	r3, [pc, #40]	; (8005f10 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ee8:	68db      	ldr	r3, [r3, #12]
 8005eea:	0e5b      	lsrs	r3, r3, #25
 8005eec:	f003 0303 	and.w	r3, r3, #3
 8005ef0:	3301      	adds	r3, #1
 8005ef2:	005b      	lsls	r3, r3, #1
 8005ef4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005ef6:	697a      	ldr	r2, [r7, #20]
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	fbb2 f3f3 	udiv	r3, r2, r3
 8005efe:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005f00:	69bb      	ldr	r3, [r7, #24]
}
 8005f02:	4618      	mov	r0, r3
 8005f04:	3724      	adds	r7, #36	; 0x24
 8005f06:	46bd      	mov	sp, r7
 8005f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0c:	4770      	bx	lr
 8005f0e:	bf00      	nop
 8005f10:	40021000 	.word	0x40021000
 8005f14:	0800b970 	.word	0x0800b970
 8005f18:	00f42400 	.word	0x00f42400
 8005f1c:	007a1200 	.word	0x007a1200

08005f20 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f20:	b480      	push	{r7}
 8005f22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005f24:	4b03      	ldr	r3, [pc, #12]	; (8005f34 <HAL_RCC_GetHCLKFreq+0x14>)
 8005f26:	681b      	ldr	r3, [r3, #0]
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f30:	4770      	bx	lr
 8005f32:	bf00      	nop
 8005f34:	20000008 	.word	0x20000008

08005f38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005f3c:	f7ff fff0 	bl	8005f20 <HAL_RCC_GetHCLKFreq>
 8005f40:	4602      	mov	r2, r0
 8005f42:	4b06      	ldr	r3, [pc, #24]	; (8005f5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005f44:	689b      	ldr	r3, [r3, #8]
 8005f46:	0a1b      	lsrs	r3, r3, #8
 8005f48:	f003 0307 	and.w	r3, r3, #7
 8005f4c:	4904      	ldr	r1, [pc, #16]	; (8005f60 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005f4e:	5ccb      	ldrb	r3, [r1, r3]
 8005f50:	f003 031f 	and.w	r3, r3, #31
 8005f54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	bd80      	pop	{r7, pc}
 8005f5c:	40021000 	.word	0x40021000
 8005f60:	0800b968 	.word	0x0800b968

08005f64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005f68:	f7ff ffda 	bl	8005f20 <HAL_RCC_GetHCLKFreq>
 8005f6c:	4602      	mov	r2, r0
 8005f6e:	4b06      	ldr	r3, [pc, #24]	; (8005f88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005f70:	689b      	ldr	r3, [r3, #8]
 8005f72:	0adb      	lsrs	r3, r3, #11
 8005f74:	f003 0307 	and.w	r3, r3, #7
 8005f78:	4904      	ldr	r1, [pc, #16]	; (8005f8c <HAL_RCC_GetPCLK2Freq+0x28>)
 8005f7a:	5ccb      	ldrb	r3, [r1, r3]
 8005f7c:	f003 031f 	and.w	r3, r3, #31
 8005f80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	bd80      	pop	{r7, pc}
 8005f88:	40021000 	.word	0x40021000
 8005f8c:	0800b968 	.word	0x0800b968

08005f90 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b086      	sub	sp, #24
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005f98:	2300      	movs	r3, #0
 8005f9a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005f9c:	4b2a      	ldr	r3, [pc, #168]	; (8006048 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005f9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d003      	beq.n	8005fb0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005fa8:	f7ff fa02 	bl	80053b0 <HAL_PWREx_GetVoltageRange>
 8005fac:	6178      	str	r0, [r7, #20]
 8005fae:	e014      	b.n	8005fda <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005fb0:	4b25      	ldr	r3, [pc, #148]	; (8006048 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005fb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fb4:	4a24      	ldr	r2, [pc, #144]	; (8006048 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005fb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fba:	6593      	str	r3, [r2, #88]	; 0x58
 8005fbc:	4b22      	ldr	r3, [pc, #136]	; (8006048 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005fbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fc4:	60fb      	str	r3, [r7, #12]
 8005fc6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005fc8:	f7ff f9f2 	bl	80053b0 <HAL_PWREx_GetVoltageRange>
 8005fcc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005fce:	4b1e      	ldr	r3, [pc, #120]	; (8006048 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fd2:	4a1d      	ldr	r2, [pc, #116]	; (8006048 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005fd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005fd8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005fe0:	d10b      	bne.n	8005ffa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2b80      	cmp	r3, #128	; 0x80
 8005fe6:	d919      	bls.n	800601c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2ba0      	cmp	r3, #160	; 0xa0
 8005fec:	d902      	bls.n	8005ff4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005fee:	2302      	movs	r3, #2
 8005ff0:	613b      	str	r3, [r7, #16]
 8005ff2:	e013      	b.n	800601c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	613b      	str	r3, [r7, #16]
 8005ff8:	e010      	b.n	800601c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2b80      	cmp	r3, #128	; 0x80
 8005ffe:	d902      	bls.n	8006006 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006000:	2303      	movs	r3, #3
 8006002:	613b      	str	r3, [r7, #16]
 8006004:	e00a      	b.n	800601c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2b80      	cmp	r3, #128	; 0x80
 800600a:	d102      	bne.n	8006012 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800600c:	2302      	movs	r3, #2
 800600e:	613b      	str	r3, [r7, #16]
 8006010:	e004      	b.n	800601c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2b70      	cmp	r3, #112	; 0x70
 8006016:	d101      	bne.n	800601c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006018:	2301      	movs	r3, #1
 800601a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800601c:	4b0b      	ldr	r3, [pc, #44]	; (800604c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f023 0207 	bic.w	r2, r3, #7
 8006024:	4909      	ldr	r1, [pc, #36]	; (800604c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006026:	693b      	ldr	r3, [r7, #16]
 8006028:	4313      	orrs	r3, r2
 800602a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800602c:	4b07      	ldr	r3, [pc, #28]	; (800604c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f003 0307 	and.w	r3, r3, #7
 8006034:	693a      	ldr	r2, [r7, #16]
 8006036:	429a      	cmp	r2, r3
 8006038:	d001      	beq.n	800603e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800603a:	2301      	movs	r3, #1
 800603c:	e000      	b.n	8006040 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800603e:	2300      	movs	r3, #0
}
 8006040:	4618      	mov	r0, r3
 8006042:	3718      	adds	r7, #24
 8006044:	46bd      	mov	sp, r7
 8006046:	bd80      	pop	{r7, pc}
 8006048:	40021000 	.word	0x40021000
 800604c:	40022000 	.word	0x40022000

08006050 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b086      	sub	sp, #24
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006058:	2300      	movs	r3, #0
 800605a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800605c:	2300      	movs	r3, #0
 800605e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006068:	2b00      	cmp	r3, #0
 800606a:	d041      	beq.n	80060f0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006070:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006074:	d02a      	beq.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8006076:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800607a:	d824      	bhi.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800607c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006080:	d008      	beq.n	8006094 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006082:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006086:	d81e      	bhi.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006088:	2b00      	cmp	r3, #0
 800608a:	d00a      	beq.n	80060a2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800608c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006090:	d010      	beq.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006092:	e018      	b.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006094:	4b86      	ldr	r3, [pc, #536]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006096:	68db      	ldr	r3, [r3, #12]
 8006098:	4a85      	ldr	r2, [pc, #532]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800609a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800609e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80060a0:	e015      	b.n	80060ce <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	3304      	adds	r3, #4
 80060a6:	2100      	movs	r1, #0
 80060a8:	4618      	mov	r0, r3
 80060aa:	f000 fabb 	bl	8006624 <RCCEx_PLLSAI1_Config>
 80060ae:	4603      	mov	r3, r0
 80060b0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80060b2:	e00c      	b.n	80060ce <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	3320      	adds	r3, #32
 80060b8:	2100      	movs	r1, #0
 80060ba:	4618      	mov	r0, r3
 80060bc:	f000 fba6 	bl	800680c <RCCEx_PLLSAI2_Config>
 80060c0:	4603      	mov	r3, r0
 80060c2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80060c4:	e003      	b.n	80060ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80060c6:	2301      	movs	r3, #1
 80060c8:	74fb      	strb	r3, [r7, #19]
      break;
 80060ca:	e000      	b.n	80060ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80060cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80060ce:	7cfb      	ldrb	r3, [r7, #19]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d10b      	bne.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80060d4:	4b76      	ldr	r3, [pc, #472]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80060d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060da:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80060e2:	4973      	ldr	r1, [pc, #460]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80060e4:	4313      	orrs	r3, r2
 80060e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80060ea:	e001      	b.n	80060f0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060ec:	7cfb      	ldrb	r3, [r7, #19]
 80060ee:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d041      	beq.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006100:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006104:	d02a      	beq.n	800615c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8006106:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800610a:	d824      	bhi.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800610c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006110:	d008      	beq.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006112:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006116:	d81e      	bhi.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006118:	2b00      	cmp	r3, #0
 800611a:	d00a      	beq.n	8006132 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800611c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006120:	d010      	beq.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006122:	e018      	b.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006124:	4b62      	ldr	r3, [pc, #392]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006126:	68db      	ldr	r3, [r3, #12]
 8006128:	4a61      	ldr	r2, [pc, #388]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800612a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800612e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006130:	e015      	b.n	800615e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	3304      	adds	r3, #4
 8006136:	2100      	movs	r1, #0
 8006138:	4618      	mov	r0, r3
 800613a:	f000 fa73 	bl	8006624 <RCCEx_PLLSAI1_Config>
 800613e:	4603      	mov	r3, r0
 8006140:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006142:	e00c      	b.n	800615e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	3320      	adds	r3, #32
 8006148:	2100      	movs	r1, #0
 800614a:	4618      	mov	r0, r3
 800614c:	f000 fb5e 	bl	800680c <RCCEx_PLLSAI2_Config>
 8006150:	4603      	mov	r3, r0
 8006152:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006154:	e003      	b.n	800615e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006156:	2301      	movs	r3, #1
 8006158:	74fb      	strb	r3, [r7, #19]
      break;
 800615a:	e000      	b.n	800615e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800615c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800615e:	7cfb      	ldrb	r3, [r7, #19]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d10b      	bne.n	800617c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006164:	4b52      	ldr	r3, [pc, #328]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006166:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800616a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006172:	494f      	ldr	r1, [pc, #316]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006174:	4313      	orrs	r3, r2
 8006176:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800617a:	e001      	b.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800617c:	7cfb      	ldrb	r3, [r7, #19]
 800617e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006188:	2b00      	cmp	r3, #0
 800618a:	f000 80a0 	beq.w	80062ce <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800618e:	2300      	movs	r3, #0
 8006190:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006192:	4b47      	ldr	r3, [pc, #284]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006194:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006196:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800619a:	2b00      	cmp	r3, #0
 800619c:	d101      	bne.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800619e:	2301      	movs	r3, #1
 80061a0:	e000      	b.n	80061a4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80061a2:	2300      	movs	r3, #0
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d00d      	beq.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80061a8:	4b41      	ldr	r3, [pc, #260]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80061aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061ac:	4a40      	ldr	r2, [pc, #256]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80061ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061b2:	6593      	str	r3, [r2, #88]	; 0x58
 80061b4:	4b3e      	ldr	r3, [pc, #248]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80061b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061bc:	60bb      	str	r3, [r7, #8]
 80061be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80061c0:	2301      	movs	r3, #1
 80061c2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80061c4:	4b3b      	ldr	r3, [pc, #236]	; (80062b4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a3a      	ldr	r2, [pc, #232]	; (80062b4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80061ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061ce:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80061d0:	f7fc fb5e 	bl	8002890 <HAL_GetTick>
 80061d4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80061d6:	e009      	b.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061d8:	f7fc fb5a 	bl	8002890 <HAL_GetTick>
 80061dc:	4602      	mov	r2, r0
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	1ad3      	subs	r3, r2, r3
 80061e2:	2b02      	cmp	r3, #2
 80061e4:	d902      	bls.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80061e6:	2303      	movs	r3, #3
 80061e8:	74fb      	strb	r3, [r7, #19]
        break;
 80061ea:	e005      	b.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80061ec:	4b31      	ldr	r3, [pc, #196]	; (80062b4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d0ef      	beq.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80061f8:	7cfb      	ldrb	r3, [r7, #19]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d15c      	bne.n	80062b8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80061fe:	4b2c      	ldr	r3, [pc, #176]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006200:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006204:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006208:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d01f      	beq.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006216:	697a      	ldr	r2, [r7, #20]
 8006218:	429a      	cmp	r2, r3
 800621a:	d019      	beq.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800621c:	4b24      	ldr	r3, [pc, #144]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800621e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006222:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006226:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006228:	4b21      	ldr	r3, [pc, #132]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800622a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800622e:	4a20      	ldr	r2, [pc, #128]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006230:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006234:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006238:	4b1d      	ldr	r3, [pc, #116]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800623a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800623e:	4a1c      	ldr	r2, [pc, #112]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006240:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006244:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006248:	4a19      	ldr	r2, [pc, #100]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	f003 0301 	and.w	r3, r3, #1
 8006256:	2b00      	cmp	r3, #0
 8006258:	d016      	beq.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800625a:	f7fc fb19 	bl	8002890 <HAL_GetTick>
 800625e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006260:	e00b      	b.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006262:	f7fc fb15 	bl	8002890 <HAL_GetTick>
 8006266:	4602      	mov	r2, r0
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	1ad3      	subs	r3, r2, r3
 800626c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006270:	4293      	cmp	r3, r2
 8006272:	d902      	bls.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8006274:	2303      	movs	r3, #3
 8006276:	74fb      	strb	r3, [r7, #19]
            break;
 8006278:	e006      	b.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800627a:	4b0d      	ldr	r3, [pc, #52]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800627c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006280:	f003 0302 	and.w	r3, r3, #2
 8006284:	2b00      	cmp	r3, #0
 8006286:	d0ec      	beq.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8006288:	7cfb      	ldrb	r3, [r7, #19]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d10c      	bne.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800628e:	4b08      	ldr	r3, [pc, #32]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006290:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006294:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800629e:	4904      	ldr	r1, [pc, #16]	; (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80062a0:	4313      	orrs	r3, r2
 80062a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80062a6:	e009      	b.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80062a8:	7cfb      	ldrb	r3, [r7, #19]
 80062aa:	74bb      	strb	r3, [r7, #18]
 80062ac:	e006      	b.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80062ae:	bf00      	nop
 80062b0:	40021000 	.word	0x40021000
 80062b4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062b8:	7cfb      	ldrb	r3, [r7, #19]
 80062ba:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80062bc:	7c7b      	ldrb	r3, [r7, #17]
 80062be:	2b01      	cmp	r3, #1
 80062c0:	d105      	bne.n	80062ce <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80062c2:	4b9e      	ldr	r3, [pc, #632]	; (800653c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062c6:	4a9d      	ldr	r2, [pc, #628]	; (800653c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80062cc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f003 0301 	and.w	r3, r3, #1
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d00a      	beq.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80062da:	4b98      	ldr	r3, [pc, #608]	; (800653c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062e0:	f023 0203 	bic.w	r2, r3, #3
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062e8:	4994      	ldr	r1, [pc, #592]	; (800653c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062ea:	4313      	orrs	r3, r2
 80062ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f003 0302 	and.w	r3, r3, #2
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d00a      	beq.n	8006312 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80062fc:	4b8f      	ldr	r3, [pc, #572]	; (800653c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006302:	f023 020c 	bic.w	r2, r3, #12
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800630a:	498c      	ldr	r1, [pc, #560]	; (800653c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800630c:	4313      	orrs	r3, r2
 800630e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f003 0304 	and.w	r3, r3, #4
 800631a:	2b00      	cmp	r3, #0
 800631c:	d00a      	beq.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800631e:	4b87      	ldr	r3, [pc, #540]	; (800653c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006320:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006324:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800632c:	4983      	ldr	r1, [pc, #524]	; (800653c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800632e:	4313      	orrs	r3, r2
 8006330:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f003 0308 	and.w	r3, r3, #8
 800633c:	2b00      	cmp	r3, #0
 800633e:	d00a      	beq.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006340:	4b7e      	ldr	r3, [pc, #504]	; (800653c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006342:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006346:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800634e:	497b      	ldr	r1, [pc, #492]	; (800653c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006350:	4313      	orrs	r3, r2
 8006352:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f003 0310 	and.w	r3, r3, #16
 800635e:	2b00      	cmp	r3, #0
 8006360:	d00a      	beq.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006362:	4b76      	ldr	r3, [pc, #472]	; (800653c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006364:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006368:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006370:	4972      	ldr	r1, [pc, #456]	; (800653c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006372:	4313      	orrs	r3, r2
 8006374:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f003 0320 	and.w	r3, r3, #32
 8006380:	2b00      	cmp	r3, #0
 8006382:	d00a      	beq.n	800639a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006384:	4b6d      	ldr	r3, [pc, #436]	; (800653c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006386:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800638a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006392:	496a      	ldr	r1, [pc, #424]	; (800653c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006394:	4313      	orrs	r3, r2
 8006396:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d00a      	beq.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80063a6:	4b65      	ldr	r3, [pc, #404]	; (800653c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063ac:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063b4:	4961      	ldr	r1, [pc, #388]	; (800653c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063b6:	4313      	orrs	r3, r2
 80063b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d00a      	beq.n	80063de <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80063c8:	4b5c      	ldr	r3, [pc, #368]	; (800653c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063ce:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063d6:	4959      	ldr	r1, [pc, #356]	; (800653c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063d8:	4313      	orrs	r3, r2
 80063da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d00a      	beq.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80063ea:	4b54      	ldr	r3, [pc, #336]	; (800653c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063f0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063f8:	4950      	ldr	r1, [pc, #320]	; (800653c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063fa:	4313      	orrs	r3, r2
 80063fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006408:	2b00      	cmp	r3, #0
 800640a:	d00a      	beq.n	8006422 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800640c:	4b4b      	ldr	r3, [pc, #300]	; (800653c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800640e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006412:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800641a:	4948      	ldr	r1, [pc, #288]	; (800653c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800641c:	4313      	orrs	r3, r2
 800641e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800642a:	2b00      	cmp	r3, #0
 800642c:	d00a      	beq.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800642e:	4b43      	ldr	r3, [pc, #268]	; (800653c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006430:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006434:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800643c:	493f      	ldr	r1, [pc, #252]	; (800653c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800643e:	4313      	orrs	r3, r2
 8006440:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800644c:	2b00      	cmp	r3, #0
 800644e:	d028      	beq.n	80064a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006450:	4b3a      	ldr	r3, [pc, #232]	; (800653c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006452:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006456:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800645e:	4937      	ldr	r1, [pc, #220]	; (800653c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006460:	4313      	orrs	r3, r2
 8006462:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800646a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800646e:	d106      	bne.n	800647e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006470:	4b32      	ldr	r3, [pc, #200]	; (800653c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006472:	68db      	ldr	r3, [r3, #12]
 8006474:	4a31      	ldr	r2, [pc, #196]	; (800653c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006476:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800647a:	60d3      	str	r3, [r2, #12]
 800647c:	e011      	b.n	80064a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006482:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006486:	d10c      	bne.n	80064a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	3304      	adds	r3, #4
 800648c:	2101      	movs	r1, #1
 800648e:	4618      	mov	r0, r3
 8006490:	f000 f8c8 	bl	8006624 <RCCEx_PLLSAI1_Config>
 8006494:	4603      	mov	r3, r0
 8006496:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006498:	7cfb      	ldrb	r3, [r7, #19]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d001      	beq.n	80064a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800649e:	7cfb      	ldrb	r3, [r7, #19]
 80064a0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d028      	beq.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80064ae:	4b23      	ldr	r3, [pc, #140]	; (800653c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064b4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064bc:	491f      	ldr	r1, [pc, #124]	; (800653c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064be:	4313      	orrs	r3, r2
 80064c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80064cc:	d106      	bne.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80064ce:	4b1b      	ldr	r3, [pc, #108]	; (800653c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064d0:	68db      	ldr	r3, [r3, #12]
 80064d2:	4a1a      	ldr	r2, [pc, #104]	; (800653c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80064d8:	60d3      	str	r3, [r2, #12]
 80064da:	e011      	b.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80064e4:	d10c      	bne.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	3304      	adds	r3, #4
 80064ea:	2101      	movs	r1, #1
 80064ec:	4618      	mov	r0, r3
 80064ee:	f000 f899 	bl	8006624 <RCCEx_PLLSAI1_Config>
 80064f2:	4603      	mov	r3, r0
 80064f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80064f6:	7cfb      	ldrb	r3, [r7, #19]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d001      	beq.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80064fc:	7cfb      	ldrb	r3, [r7, #19]
 80064fe:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006508:	2b00      	cmp	r3, #0
 800650a:	d02b      	beq.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800650c:	4b0b      	ldr	r3, [pc, #44]	; (800653c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800650e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006512:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800651a:	4908      	ldr	r1, [pc, #32]	; (800653c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800651c:	4313      	orrs	r3, r2
 800651e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006526:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800652a:	d109      	bne.n	8006540 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800652c:	4b03      	ldr	r3, [pc, #12]	; (800653c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800652e:	68db      	ldr	r3, [r3, #12]
 8006530:	4a02      	ldr	r2, [pc, #8]	; (800653c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006532:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006536:	60d3      	str	r3, [r2, #12]
 8006538:	e014      	b.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800653a:	bf00      	nop
 800653c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006544:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006548:	d10c      	bne.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	3304      	adds	r3, #4
 800654e:	2101      	movs	r1, #1
 8006550:	4618      	mov	r0, r3
 8006552:	f000 f867 	bl	8006624 <RCCEx_PLLSAI1_Config>
 8006556:	4603      	mov	r3, r0
 8006558:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800655a:	7cfb      	ldrb	r3, [r7, #19]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d001      	beq.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8006560:	7cfb      	ldrb	r3, [r7, #19]
 8006562:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800656c:	2b00      	cmp	r3, #0
 800656e:	d02f      	beq.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006570:	4b2b      	ldr	r3, [pc, #172]	; (8006620 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006572:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006576:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800657e:	4928      	ldr	r1, [pc, #160]	; (8006620 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006580:	4313      	orrs	r3, r2
 8006582:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800658a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800658e:	d10d      	bne.n	80065ac <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	3304      	adds	r3, #4
 8006594:	2102      	movs	r1, #2
 8006596:	4618      	mov	r0, r3
 8006598:	f000 f844 	bl	8006624 <RCCEx_PLLSAI1_Config>
 800659c:	4603      	mov	r3, r0
 800659e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80065a0:	7cfb      	ldrb	r3, [r7, #19]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d014      	beq.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80065a6:	7cfb      	ldrb	r3, [r7, #19]
 80065a8:	74bb      	strb	r3, [r7, #18]
 80065aa:	e011      	b.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80065b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80065b4:	d10c      	bne.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	3320      	adds	r3, #32
 80065ba:	2102      	movs	r1, #2
 80065bc:	4618      	mov	r0, r3
 80065be:	f000 f925 	bl	800680c <RCCEx_PLLSAI2_Config>
 80065c2:	4603      	mov	r3, r0
 80065c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80065c6:	7cfb      	ldrb	r3, [r7, #19]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d001      	beq.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80065cc:	7cfb      	ldrb	r3, [r7, #19]
 80065ce:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d00a      	beq.n	80065f2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80065dc:	4b10      	ldr	r3, [pc, #64]	; (8006620 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80065de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065e2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80065ea:	490d      	ldr	r1, [pc, #52]	; (8006620 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80065ec:	4313      	orrs	r3, r2
 80065ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d00b      	beq.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80065fe:	4b08      	ldr	r3, [pc, #32]	; (8006620 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006600:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006604:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800660e:	4904      	ldr	r1, [pc, #16]	; (8006620 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006610:	4313      	orrs	r3, r2
 8006612:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006616:	7cbb      	ldrb	r3, [r7, #18]
}
 8006618:	4618      	mov	r0, r3
 800661a:	3718      	adds	r7, #24
 800661c:	46bd      	mov	sp, r7
 800661e:	bd80      	pop	{r7, pc}
 8006620:	40021000 	.word	0x40021000

08006624 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b084      	sub	sp, #16
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
 800662c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800662e:	2300      	movs	r3, #0
 8006630:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006632:	4b75      	ldr	r3, [pc, #468]	; (8006808 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006634:	68db      	ldr	r3, [r3, #12]
 8006636:	f003 0303 	and.w	r3, r3, #3
 800663a:	2b00      	cmp	r3, #0
 800663c:	d018      	beq.n	8006670 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800663e:	4b72      	ldr	r3, [pc, #456]	; (8006808 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006640:	68db      	ldr	r3, [r3, #12]
 8006642:	f003 0203 	and.w	r2, r3, #3
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	429a      	cmp	r2, r3
 800664c:	d10d      	bne.n	800666a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
       ||
 8006652:	2b00      	cmp	r3, #0
 8006654:	d009      	beq.n	800666a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006656:	4b6c      	ldr	r3, [pc, #432]	; (8006808 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006658:	68db      	ldr	r3, [r3, #12]
 800665a:	091b      	lsrs	r3, r3, #4
 800665c:	f003 0307 	and.w	r3, r3, #7
 8006660:	1c5a      	adds	r2, r3, #1
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	685b      	ldr	r3, [r3, #4]
       ||
 8006666:	429a      	cmp	r2, r3
 8006668:	d047      	beq.n	80066fa <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800666a:	2301      	movs	r3, #1
 800666c:	73fb      	strb	r3, [r7, #15]
 800666e:	e044      	b.n	80066fa <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	2b03      	cmp	r3, #3
 8006676:	d018      	beq.n	80066aa <RCCEx_PLLSAI1_Config+0x86>
 8006678:	2b03      	cmp	r3, #3
 800667a:	d825      	bhi.n	80066c8 <RCCEx_PLLSAI1_Config+0xa4>
 800667c:	2b01      	cmp	r3, #1
 800667e:	d002      	beq.n	8006686 <RCCEx_PLLSAI1_Config+0x62>
 8006680:	2b02      	cmp	r3, #2
 8006682:	d009      	beq.n	8006698 <RCCEx_PLLSAI1_Config+0x74>
 8006684:	e020      	b.n	80066c8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006686:	4b60      	ldr	r3, [pc, #384]	; (8006808 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f003 0302 	and.w	r3, r3, #2
 800668e:	2b00      	cmp	r3, #0
 8006690:	d11d      	bne.n	80066ce <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8006692:	2301      	movs	r3, #1
 8006694:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006696:	e01a      	b.n	80066ce <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006698:	4b5b      	ldr	r3, [pc, #364]	; (8006808 <RCCEx_PLLSAI1_Config+0x1e4>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d116      	bne.n	80066d2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80066a4:	2301      	movs	r3, #1
 80066a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80066a8:	e013      	b.n	80066d2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80066aa:	4b57      	ldr	r3, [pc, #348]	; (8006808 <RCCEx_PLLSAI1_Config+0x1e4>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d10f      	bne.n	80066d6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80066b6:	4b54      	ldr	r3, [pc, #336]	; (8006808 <RCCEx_PLLSAI1_Config+0x1e4>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d109      	bne.n	80066d6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80066c2:	2301      	movs	r3, #1
 80066c4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80066c6:	e006      	b.n	80066d6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80066c8:	2301      	movs	r3, #1
 80066ca:	73fb      	strb	r3, [r7, #15]
      break;
 80066cc:	e004      	b.n	80066d8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80066ce:	bf00      	nop
 80066d0:	e002      	b.n	80066d8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80066d2:	bf00      	nop
 80066d4:	e000      	b.n	80066d8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80066d6:	bf00      	nop
    }

    if(status == HAL_OK)
 80066d8:	7bfb      	ldrb	r3, [r7, #15]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d10d      	bne.n	80066fa <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80066de:	4b4a      	ldr	r3, [pc, #296]	; (8006808 <RCCEx_PLLSAI1_Config+0x1e4>)
 80066e0:	68db      	ldr	r3, [r3, #12]
 80066e2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6819      	ldr	r1, [r3, #0]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	685b      	ldr	r3, [r3, #4]
 80066ee:	3b01      	subs	r3, #1
 80066f0:	011b      	lsls	r3, r3, #4
 80066f2:	430b      	orrs	r3, r1
 80066f4:	4944      	ldr	r1, [pc, #272]	; (8006808 <RCCEx_PLLSAI1_Config+0x1e4>)
 80066f6:	4313      	orrs	r3, r2
 80066f8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80066fa:	7bfb      	ldrb	r3, [r7, #15]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d17d      	bne.n	80067fc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006700:	4b41      	ldr	r3, [pc, #260]	; (8006808 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a40      	ldr	r2, [pc, #256]	; (8006808 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006706:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800670a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800670c:	f7fc f8c0 	bl	8002890 <HAL_GetTick>
 8006710:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006712:	e009      	b.n	8006728 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006714:	f7fc f8bc 	bl	8002890 <HAL_GetTick>
 8006718:	4602      	mov	r2, r0
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	1ad3      	subs	r3, r2, r3
 800671e:	2b02      	cmp	r3, #2
 8006720:	d902      	bls.n	8006728 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006722:	2303      	movs	r3, #3
 8006724:	73fb      	strb	r3, [r7, #15]
        break;
 8006726:	e005      	b.n	8006734 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006728:	4b37      	ldr	r3, [pc, #220]	; (8006808 <RCCEx_PLLSAI1_Config+0x1e4>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006730:	2b00      	cmp	r3, #0
 8006732:	d1ef      	bne.n	8006714 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006734:	7bfb      	ldrb	r3, [r7, #15]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d160      	bne.n	80067fc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d111      	bne.n	8006764 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006740:	4b31      	ldr	r3, [pc, #196]	; (8006808 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006742:	691b      	ldr	r3, [r3, #16]
 8006744:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006748:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800674c:	687a      	ldr	r2, [r7, #4]
 800674e:	6892      	ldr	r2, [r2, #8]
 8006750:	0211      	lsls	r1, r2, #8
 8006752:	687a      	ldr	r2, [r7, #4]
 8006754:	68d2      	ldr	r2, [r2, #12]
 8006756:	0912      	lsrs	r2, r2, #4
 8006758:	0452      	lsls	r2, r2, #17
 800675a:	430a      	orrs	r2, r1
 800675c:	492a      	ldr	r1, [pc, #168]	; (8006808 <RCCEx_PLLSAI1_Config+0x1e4>)
 800675e:	4313      	orrs	r3, r2
 8006760:	610b      	str	r3, [r1, #16]
 8006762:	e027      	b.n	80067b4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	2b01      	cmp	r3, #1
 8006768:	d112      	bne.n	8006790 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800676a:	4b27      	ldr	r3, [pc, #156]	; (8006808 <RCCEx_PLLSAI1_Config+0x1e4>)
 800676c:	691b      	ldr	r3, [r3, #16]
 800676e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006772:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006776:	687a      	ldr	r2, [r7, #4]
 8006778:	6892      	ldr	r2, [r2, #8]
 800677a:	0211      	lsls	r1, r2, #8
 800677c:	687a      	ldr	r2, [r7, #4]
 800677e:	6912      	ldr	r2, [r2, #16]
 8006780:	0852      	lsrs	r2, r2, #1
 8006782:	3a01      	subs	r2, #1
 8006784:	0552      	lsls	r2, r2, #21
 8006786:	430a      	orrs	r2, r1
 8006788:	491f      	ldr	r1, [pc, #124]	; (8006808 <RCCEx_PLLSAI1_Config+0x1e4>)
 800678a:	4313      	orrs	r3, r2
 800678c:	610b      	str	r3, [r1, #16]
 800678e:	e011      	b.n	80067b4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006790:	4b1d      	ldr	r3, [pc, #116]	; (8006808 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006792:	691b      	ldr	r3, [r3, #16]
 8006794:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006798:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800679c:	687a      	ldr	r2, [r7, #4]
 800679e:	6892      	ldr	r2, [r2, #8]
 80067a0:	0211      	lsls	r1, r2, #8
 80067a2:	687a      	ldr	r2, [r7, #4]
 80067a4:	6952      	ldr	r2, [r2, #20]
 80067a6:	0852      	lsrs	r2, r2, #1
 80067a8:	3a01      	subs	r2, #1
 80067aa:	0652      	lsls	r2, r2, #25
 80067ac:	430a      	orrs	r2, r1
 80067ae:	4916      	ldr	r1, [pc, #88]	; (8006808 <RCCEx_PLLSAI1_Config+0x1e4>)
 80067b0:	4313      	orrs	r3, r2
 80067b2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80067b4:	4b14      	ldr	r3, [pc, #80]	; (8006808 <RCCEx_PLLSAI1_Config+0x1e4>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4a13      	ldr	r2, [pc, #76]	; (8006808 <RCCEx_PLLSAI1_Config+0x1e4>)
 80067ba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80067be:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067c0:	f7fc f866 	bl	8002890 <HAL_GetTick>
 80067c4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80067c6:	e009      	b.n	80067dc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80067c8:	f7fc f862 	bl	8002890 <HAL_GetTick>
 80067cc:	4602      	mov	r2, r0
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	1ad3      	subs	r3, r2, r3
 80067d2:	2b02      	cmp	r3, #2
 80067d4:	d902      	bls.n	80067dc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80067d6:	2303      	movs	r3, #3
 80067d8:	73fb      	strb	r3, [r7, #15]
          break;
 80067da:	e005      	b.n	80067e8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80067dc:	4b0a      	ldr	r3, [pc, #40]	; (8006808 <RCCEx_PLLSAI1_Config+0x1e4>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d0ef      	beq.n	80067c8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80067e8:	7bfb      	ldrb	r3, [r7, #15]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d106      	bne.n	80067fc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80067ee:	4b06      	ldr	r3, [pc, #24]	; (8006808 <RCCEx_PLLSAI1_Config+0x1e4>)
 80067f0:	691a      	ldr	r2, [r3, #16]
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	699b      	ldr	r3, [r3, #24]
 80067f6:	4904      	ldr	r1, [pc, #16]	; (8006808 <RCCEx_PLLSAI1_Config+0x1e4>)
 80067f8:	4313      	orrs	r3, r2
 80067fa:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80067fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80067fe:	4618      	mov	r0, r3
 8006800:	3710      	adds	r7, #16
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}
 8006806:	bf00      	nop
 8006808:	40021000 	.word	0x40021000

0800680c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b084      	sub	sp, #16
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
 8006814:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006816:	2300      	movs	r3, #0
 8006818:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800681a:	4b6a      	ldr	r3, [pc, #424]	; (80069c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800681c:	68db      	ldr	r3, [r3, #12]
 800681e:	f003 0303 	and.w	r3, r3, #3
 8006822:	2b00      	cmp	r3, #0
 8006824:	d018      	beq.n	8006858 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006826:	4b67      	ldr	r3, [pc, #412]	; (80069c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006828:	68db      	ldr	r3, [r3, #12]
 800682a:	f003 0203 	and.w	r2, r3, #3
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	429a      	cmp	r2, r3
 8006834:	d10d      	bne.n	8006852 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
       ||
 800683a:	2b00      	cmp	r3, #0
 800683c:	d009      	beq.n	8006852 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800683e:	4b61      	ldr	r3, [pc, #388]	; (80069c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006840:	68db      	ldr	r3, [r3, #12]
 8006842:	091b      	lsrs	r3, r3, #4
 8006844:	f003 0307 	and.w	r3, r3, #7
 8006848:	1c5a      	adds	r2, r3, #1
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	685b      	ldr	r3, [r3, #4]
       ||
 800684e:	429a      	cmp	r2, r3
 8006850:	d047      	beq.n	80068e2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006852:	2301      	movs	r3, #1
 8006854:	73fb      	strb	r3, [r7, #15]
 8006856:	e044      	b.n	80068e2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	2b03      	cmp	r3, #3
 800685e:	d018      	beq.n	8006892 <RCCEx_PLLSAI2_Config+0x86>
 8006860:	2b03      	cmp	r3, #3
 8006862:	d825      	bhi.n	80068b0 <RCCEx_PLLSAI2_Config+0xa4>
 8006864:	2b01      	cmp	r3, #1
 8006866:	d002      	beq.n	800686e <RCCEx_PLLSAI2_Config+0x62>
 8006868:	2b02      	cmp	r3, #2
 800686a:	d009      	beq.n	8006880 <RCCEx_PLLSAI2_Config+0x74>
 800686c:	e020      	b.n	80068b0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800686e:	4b55      	ldr	r3, [pc, #340]	; (80069c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f003 0302 	and.w	r3, r3, #2
 8006876:	2b00      	cmp	r3, #0
 8006878:	d11d      	bne.n	80068b6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800687a:	2301      	movs	r3, #1
 800687c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800687e:	e01a      	b.n	80068b6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006880:	4b50      	ldr	r3, [pc, #320]	; (80069c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006888:	2b00      	cmp	r3, #0
 800688a:	d116      	bne.n	80068ba <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800688c:	2301      	movs	r3, #1
 800688e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006890:	e013      	b.n	80068ba <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006892:	4b4c      	ldr	r3, [pc, #304]	; (80069c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800689a:	2b00      	cmp	r3, #0
 800689c:	d10f      	bne.n	80068be <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800689e:	4b49      	ldr	r3, [pc, #292]	; (80069c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d109      	bne.n	80068be <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80068aa:	2301      	movs	r3, #1
 80068ac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80068ae:	e006      	b.n	80068be <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80068b0:	2301      	movs	r3, #1
 80068b2:	73fb      	strb	r3, [r7, #15]
      break;
 80068b4:	e004      	b.n	80068c0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80068b6:	bf00      	nop
 80068b8:	e002      	b.n	80068c0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80068ba:	bf00      	nop
 80068bc:	e000      	b.n	80068c0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80068be:	bf00      	nop
    }

    if(status == HAL_OK)
 80068c0:	7bfb      	ldrb	r3, [r7, #15]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d10d      	bne.n	80068e2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80068c6:	4b3f      	ldr	r3, [pc, #252]	; (80069c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80068c8:	68db      	ldr	r3, [r3, #12]
 80068ca:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6819      	ldr	r1, [r3, #0]
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	685b      	ldr	r3, [r3, #4]
 80068d6:	3b01      	subs	r3, #1
 80068d8:	011b      	lsls	r3, r3, #4
 80068da:	430b      	orrs	r3, r1
 80068dc:	4939      	ldr	r1, [pc, #228]	; (80069c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80068de:	4313      	orrs	r3, r2
 80068e0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80068e2:	7bfb      	ldrb	r3, [r7, #15]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d167      	bne.n	80069b8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80068e8:	4b36      	ldr	r3, [pc, #216]	; (80069c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	4a35      	ldr	r2, [pc, #212]	; (80069c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80068ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80068f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80068f4:	f7fb ffcc 	bl	8002890 <HAL_GetTick>
 80068f8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80068fa:	e009      	b.n	8006910 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80068fc:	f7fb ffc8 	bl	8002890 <HAL_GetTick>
 8006900:	4602      	mov	r2, r0
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	1ad3      	subs	r3, r2, r3
 8006906:	2b02      	cmp	r3, #2
 8006908:	d902      	bls.n	8006910 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800690a:	2303      	movs	r3, #3
 800690c:	73fb      	strb	r3, [r7, #15]
        break;
 800690e:	e005      	b.n	800691c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006910:	4b2c      	ldr	r3, [pc, #176]	; (80069c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006918:	2b00      	cmp	r3, #0
 800691a:	d1ef      	bne.n	80068fc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800691c:	7bfb      	ldrb	r3, [r7, #15]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d14a      	bne.n	80069b8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d111      	bne.n	800694c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006928:	4b26      	ldr	r3, [pc, #152]	; (80069c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800692a:	695b      	ldr	r3, [r3, #20]
 800692c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006930:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006934:	687a      	ldr	r2, [r7, #4]
 8006936:	6892      	ldr	r2, [r2, #8]
 8006938:	0211      	lsls	r1, r2, #8
 800693a:	687a      	ldr	r2, [r7, #4]
 800693c:	68d2      	ldr	r2, [r2, #12]
 800693e:	0912      	lsrs	r2, r2, #4
 8006940:	0452      	lsls	r2, r2, #17
 8006942:	430a      	orrs	r2, r1
 8006944:	491f      	ldr	r1, [pc, #124]	; (80069c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006946:	4313      	orrs	r3, r2
 8006948:	614b      	str	r3, [r1, #20]
 800694a:	e011      	b.n	8006970 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800694c:	4b1d      	ldr	r3, [pc, #116]	; (80069c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800694e:	695b      	ldr	r3, [r3, #20]
 8006950:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006954:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006958:	687a      	ldr	r2, [r7, #4]
 800695a:	6892      	ldr	r2, [r2, #8]
 800695c:	0211      	lsls	r1, r2, #8
 800695e:	687a      	ldr	r2, [r7, #4]
 8006960:	6912      	ldr	r2, [r2, #16]
 8006962:	0852      	lsrs	r2, r2, #1
 8006964:	3a01      	subs	r2, #1
 8006966:	0652      	lsls	r2, r2, #25
 8006968:	430a      	orrs	r2, r1
 800696a:	4916      	ldr	r1, [pc, #88]	; (80069c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800696c:	4313      	orrs	r3, r2
 800696e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006970:	4b14      	ldr	r3, [pc, #80]	; (80069c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a13      	ldr	r2, [pc, #76]	; (80069c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006976:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800697a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800697c:	f7fb ff88 	bl	8002890 <HAL_GetTick>
 8006980:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006982:	e009      	b.n	8006998 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006984:	f7fb ff84 	bl	8002890 <HAL_GetTick>
 8006988:	4602      	mov	r2, r0
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	1ad3      	subs	r3, r2, r3
 800698e:	2b02      	cmp	r3, #2
 8006990:	d902      	bls.n	8006998 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8006992:	2303      	movs	r3, #3
 8006994:	73fb      	strb	r3, [r7, #15]
          break;
 8006996:	e005      	b.n	80069a4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006998:	4b0a      	ldr	r3, [pc, #40]	; (80069c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d0ef      	beq.n	8006984 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80069a4:	7bfb      	ldrb	r3, [r7, #15]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d106      	bne.n	80069b8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80069aa:	4b06      	ldr	r3, [pc, #24]	; (80069c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80069ac:	695a      	ldr	r2, [r3, #20]
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	695b      	ldr	r3, [r3, #20]
 80069b2:	4904      	ldr	r1, [pc, #16]	; (80069c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80069b4:	4313      	orrs	r3, r2
 80069b6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80069b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80069ba:	4618      	mov	r0, r3
 80069bc:	3710      	adds	r7, #16
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}
 80069c2:	bf00      	nop
 80069c4:	40021000 	.word	0x40021000

080069c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b082      	sub	sp, #8
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d101      	bne.n	80069da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80069d6:	2301      	movs	r3, #1
 80069d8:	e049      	b.n	8006a6e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069e0:	b2db      	uxtb	r3, r3
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d106      	bne.n	80069f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2200      	movs	r2, #0
 80069ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f7fb fc86 	bl	8002300 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2202      	movs	r2, #2
 80069f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681a      	ldr	r2, [r3, #0]
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	3304      	adds	r3, #4
 8006a04:	4619      	mov	r1, r3
 8006a06:	4610      	mov	r0, r2
 8006a08:	f000 fe70 	bl	80076ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2201      	movs	r2, #1
 8006a10:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2201      	movs	r2, #1
 8006a18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2201      	movs	r2, #1
 8006a20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2201      	movs	r2, #1
 8006a28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2201      	movs	r2, #1
 8006a30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2201      	movs	r2, #1
 8006a38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2201      	movs	r2, #1
 8006a40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2201      	movs	r2, #1
 8006a48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2201      	movs	r2, #1
 8006a50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2201      	movs	r2, #1
 8006a58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2201      	movs	r2, #1
 8006a60:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2201      	movs	r2, #1
 8006a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006a6c:	2300      	movs	r3, #0
}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	3708      	adds	r7, #8
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd80      	pop	{r7, pc}

08006a76 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006a76:	b580      	push	{r7, lr}
 8006a78:	b082      	sub	sp, #8
 8006a7a:	af00      	add	r7, sp, #0
 8006a7c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d101      	bne.n	8006a88 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006a84:	2301      	movs	r3, #1
 8006a86:	e049      	b.n	8006b1c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a8e:	b2db      	uxtb	r3, r3
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d106      	bne.n	8006aa2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2200      	movs	r2, #0
 8006a98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	f000 f841 	bl	8006b24 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2202      	movs	r2, #2
 8006aa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681a      	ldr	r2, [r3, #0]
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	3304      	adds	r3, #4
 8006ab2:	4619      	mov	r1, r3
 8006ab4:	4610      	mov	r0, r2
 8006ab6:	f000 fe19 	bl	80076ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2201      	movs	r2, #1
 8006abe:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2201      	movs	r2, #1
 8006ac6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2201      	movs	r2, #1
 8006ace:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2201      	movs	r2, #1
 8006ad6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2201      	movs	r2, #1
 8006ade:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2201      	movs	r2, #1
 8006ae6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2201      	movs	r2, #1
 8006aee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2201      	movs	r2, #1
 8006af6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2201      	movs	r2, #1
 8006afe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2201      	movs	r2, #1
 8006b06:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2201      	movs	r2, #1
 8006b0e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2201      	movs	r2, #1
 8006b16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006b1a:	2300      	movs	r3, #0
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	3708      	adds	r7, #8
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bd80      	pop	{r7, pc}

08006b24 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006b24:	b480      	push	{r7}
 8006b26:	b083      	sub	sp, #12
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006b2c:	bf00      	nop
 8006b2e:	370c      	adds	r7, #12
 8006b30:	46bd      	mov	sp, r7
 8006b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b36:	4770      	bx	lr

08006b38 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b086      	sub	sp, #24
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	60f8      	str	r0, [r7, #12]
 8006b40:	60b9      	str	r1, [r7, #8]
 8006b42:	607a      	str	r2, [r7, #4]
 8006b44:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8006b46:	2300      	movs	r3, #0
 8006b48:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d109      	bne.n	8006b64 <HAL_TIM_PWM_Start_DMA+0x2c>
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b56:	b2db      	uxtb	r3, r3
 8006b58:	2b02      	cmp	r3, #2
 8006b5a:	bf0c      	ite	eq
 8006b5c:	2301      	moveq	r3, #1
 8006b5e:	2300      	movne	r3, #0
 8006b60:	b2db      	uxtb	r3, r3
 8006b62:	e03c      	b.n	8006bde <HAL_TIM_PWM_Start_DMA+0xa6>
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	2b04      	cmp	r3, #4
 8006b68:	d109      	bne.n	8006b7e <HAL_TIM_PWM_Start_DMA+0x46>
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006b70:	b2db      	uxtb	r3, r3
 8006b72:	2b02      	cmp	r3, #2
 8006b74:	bf0c      	ite	eq
 8006b76:	2301      	moveq	r3, #1
 8006b78:	2300      	movne	r3, #0
 8006b7a:	b2db      	uxtb	r3, r3
 8006b7c:	e02f      	b.n	8006bde <HAL_TIM_PWM_Start_DMA+0xa6>
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	2b08      	cmp	r3, #8
 8006b82:	d109      	bne.n	8006b98 <HAL_TIM_PWM_Start_DMA+0x60>
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006b8a:	b2db      	uxtb	r3, r3
 8006b8c:	2b02      	cmp	r3, #2
 8006b8e:	bf0c      	ite	eq
 8006b90:	2301      	moveq	r3, #1
 8006b92:	2300      	movne	r3, #0
 8006b94:	b2db      	uxtb	r3, r3
 8006b96:	e022      	b.n	8006bde <HAL_TIM_PWM_Start_DMA+0xa6>
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	2b0c      	cmp	r3, #12
 8006b9c:	d109      	bne.n	8006bb2 <HAL_TIM_PWM_Start_DMA+0x7a>
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ba4:	b2db      	uxtb	r3, r3
 8006ba6:	2b02      	cmp	r3, #2
 8006ba8:	bf0c      	ite	eq
 8006baa:	2301      	moveq	r3, #1
 8006bac:	2300      	movne	r3, #0
 8006bae:	b2db      	uxtb	r3, r3
 8006bb0:	e015      	b.n	8006bde <HAL_TIM_PWM_Start_DMA+0xa6>
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	2b10      	cmp	r3, #16
 8006bb6:	d109      	bne.n	8006bcc <HAL_TIM_PWM_Start_DMA+0x94>
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006bbe:	b2db      	uxtb	r3, r3
 8006bc0:	2b02      	cmp	r3, #2
 8006bc2:	bf0c      	ite	eq
 8006bc4:	2301      	moveq	r3, #1
 8006bc6:	2300      	movne	r3, #0
 8006bc8:	b2db      	uxtb	r3, r3
 8006bca:	e008      	b.n	8006bde <HAL_TIM_PWM_Start_DMA+0xa6>
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006bd2:	b2db      	uxtb	r3, r3
 8006bd4:	2b02      	cmp	r3, #2
 8006bd6:	bf0c      	ite	eq
 8006bd8:	2301      	moveq	r3, #1
 8006bda:	2300      	movne	r3, #0
 8006bdc:	b2db      	uxtb	r3, r3
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d001      	beq.n	8006be6 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 8006be2:	2302      	movs	r3, #2
 8006be4:	e1ab      	b.n	8006f3e <HAL_TIM_PWM_Start_DMA+0x406>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d109      	bne.n	8006c00 <HAL_TIM_PWM_Start_DMA+0xc8>
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006bf2:	b2db      	uxtb	r3, r3
 8006bf4:	2b01      	cmp	r3, #1
 8006bf6:	bf0c      	ite	eq
 8006bf8:	2301      	moveq	r3, #1
 8006bfa:	2300      	movne	r3, #0
 8006bfc:	b2db      	uxtb	r3, r3
 8006bfe:	e03c      	b.n	8006c7a <HAL_TIM_PWM_Start_DMA+0x142>
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	2b04      	cmp	r3, #4
 8006c04:	d109      	bne.n	8006c1a <HAL_TIM_PWM_Start_DMA+0xe2>
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006c0c:	b2db      	uxtb	r3, r3
 8006c0e:	2b01      	cmp	r3, #1
 8006c10:	bf0c      	ite	eq
 8006c12:	2301      	moveq	r3, #1
 8006c14:	2300      	movne	r3, #0
 8006c16:	b2db      	uxtb	r3, r3
 8006c18:	e02f      	b.n	8006c7a <HAL_TIM_PWM_Start_DMA+0x142>
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	2b08      	cmp	r3, #8
 8006c1e:	d109      	bne.n	8006c34 <HAL_TIM_PWM_Start_DMA+0xfc>
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006c26:	b2db      	uxtb	r3, r3
 8006c28:	2b01      	cmp	r3, #1
 8006c2a:	bf0c      	ite	eq
 8006c2c:	2301      	moveq	r3, #1
 8006c2e:	2300      	movne	r3, #0
 8006c30:	b2db      	uxtb	r3, r3
 8006c32:	e022      	b.n	8006c7a <HAL_TIM_PWM_Start_DMA+0x142>
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	2b0c      	cmp	r3, #12
 8006c38:	d109      	bne.n	8006c4e <HAL_TIM_PWM_Start_DMA+0x116>
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c40:	b2db      	uxtb	r3, r3
 8006c42:	2b01      	cmp	r3, #1
 8006c44:	bf0c      	ite	eq
 8006c46:	2301      	moveq	r3, #1
 8006c48:	2300      	movne	r3, #0
 8006c4a:	b2db      	uxtb	r3, r3
 8006c4c:	e015      	b.n	8006c7a <HAL_TIM_PWM_Start_DMA+0x142>
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	2b10      	cmp	r3, #16
 8006c52:	d109      	bne.n	8006c68 <HAL_TIM_PWM_Start_DMA+0x130>
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006c5a:	b2db      	uxtb	r3, r3
 8006c5c:	2b01      	cmp	r3, #1
 8006c5e:	bf0c      	ite	eq
 8006c60:	2301      	moveq	r3, #1
 8006c62:	2300      	movne	r3, #0
 8006c64:	b2db      	uxtb	r3, r3
 8006c66:	e008      	b.n	8006c7a <HAL_TIM_PWM_Start_DMA+0x142>
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006c6e:	b2db      	uxtb	r3, r3
 8006c70:	2b01      	cmp	r3, #1
 8006c72:	bf0c      	ite	eq
 8006c74:	2301      	moveq	r3, #1
 8006c76:	2300      	movne	r3, #0
 8006c78:	b2db      	uxtb	r3, r3
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d034      	beq.n	8006ce8 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) && (Length > 0U))
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d104      	bne.n	8006c8e <HAL_TIM_PWM_Start_DMA+0x156>
 8006c84:	887b      	ldrh	r3, [r7, #2]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d001      	beq.n	8006c8e <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	e157      	b.n	8006f3e <HAL_TIM_PWM_Start_DMA+0x406>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d104      	bne.n	8006c9e <HAL_TIM_PWM_Start_DMA+0x166>
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	2202      	movs	r2, #2
 8006c98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c9c:	e026      	b.n	8006cec <HAL_TIM_PWM_Start_DMA+0x1b4>
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	2b04      	cmp	r3, #4
 8006ca2:	d104      	bne.n	8006cae <HAL_TIM_PWM_Start_DMA+0x176>
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	2202      	movs	r2, #2
 8006ca8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006cac:	e01e      	b.n	8006cec <HAL_TIM_PWM_Start_DMA+0x1b4>
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	2b08      	cmp	r3, #8
 8006cb2:	d104      	bne.n	8006cbe <HAL_TIM_PWM_Start_DMA+0x186>
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	2202      	movs	r2, #2
 8006cb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006cbc:	e016      	b.n	8006cec <HAL_TIM_PWM_Start_DMA+0x1b4>
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	2b0c      	cmp	r3, #12
 8006cc2:	d104      	bne.n	8006cce <HAL_TIM_PWM_Start_DMA+0x196>
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	2202      	movs	r2, #2
 8006cc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006ccc:	e00e      	b.n	8006cec <HAL_TIM_PWM_Start_DMA+0x1b4>
 8006cce:	68bb      	ldr	r3, [r7, #8]
 8006cd0:	2b10      	cmp	r3, #16
 8006cd2:	d104      	bne.n	8006cde <HAL_TIM_PWM_Start_DMA+0x1a6>
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	2202      	movs	r2, #2
 8006cd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006cdc:	e006      	b.n	8006cec <HAL_TIM_PWM_Start_DMA+0x1b4>
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	2202      	movs	r2, #2
 8006ce2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006ce6:	e001      	b.n	8006cec <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8006ce8:	2301      	movs	r3, #1
 8006cea:	e128      	b.n	8006f3e <HAL_TIM_PWM_Start_DMA+0x406>
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	2b0c      	cmp	r3, #12
 8006cf0:	f200 80ae 	bhi.w	8006e50 <HAL_TIM_PWM_Start_DMA+0x318>
 8006cf4:	a201      	add	r2, pc, #4	; (adr r2, 8006cfc <HAL_TIM_PWM_Start_DMA+0x1c4>)
 8006cf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cfa:	bf00      	nop
 8006cfc:	08006d31 	.word	0x08006d31
 8006d00:	08006e51 	.word	0x08006e51
 8006d04:	08006e51 	.word	0x08006e51
 8006d08:	08006e51 	.word	0x08006e51
 8006d0c:	08006d79 	.word	0x08006d79
 8006d10:	08006e51 	.word	0x08006e51
 8006d14:	08006e51 	.word	0x08006e51
 8006d18:	08006e51 	.word	0x08006e51
 8006d1c:	08006dc1 	.word	0x08006dc1
 8006d20:	08006e51 	.word	0x08006e51
 8006d24:	08006e51 	.word	0x08006e51
 8006d28:	08006e51 	.word	0x08006e51
 8006d2c:	08006e09 	.word	0x08006e09
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d34:	4a84      	ldr	r2, [pc, #528]	; (8006f48 <HAL_TIM_PWM_Start_DMA+0x410>)
 8006d36:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d3c:	4a83      	ldr	r2, [pc, #524]	; (8006f4c <HAL_TIM_PWM_Start_DMA+0x414>)
 8006d3e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d44:	4a82      	ldr	r2, [pc, #520]	; (8006f50 <HAL_TIM_PWM_Start_DMA+0x418>)
 8006d46:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8006d4c:	6879      	ldr	r1, [r7, #4]
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	3334      	adds	r3, #52	; 0x34
 8006d54:	461a      	mov	r2, r3
 8006d56:	887b      	ldrh	r3, [r7, #2]
 8006d58:	f7fd f996 	bl	8004088 <HAL_DMA_Start_IT>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d001      	beq.n	8006d66 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006d62:	2301      	movs	r3, #1
 8006d64:	e0eb      	b.n	8006f3e <HAL_TIM_PWM_Start_DMA+0x406>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	68da      	ldr	r2, [r3, #12]
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d74:	60da      	str	r2, [r3, #12]
      break;
 8006d76:	e06e      	b.n	8006e56 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d7c:	4a72      	ldr	r2, [pc, #456]	; (8006f48 <HAL_TIM_PWM_Start_DMA+0x410>)
 8006d7e:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d84:	4a71      	ldr	r2, [pc, #452]	; (8006f4c <HAL_TIM_PWM_Start_DMA+0x414>)
 8006d86:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d8c:	4a70      	ldr	r2, [pc, #448]	; (8006f50 <HAL_TIM_PWM_Start_DMA+0x418>)
 8006d8e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8006d94:	6879      	ldr	r1, [r7, #4]
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	3338      	adds	r3, #56	; 0x38
 8006d9c:	461a      	mov	r2, r3
 8006d9e:	887b      	ldrh	r3, [r7, #2]
 8006da0:	f7fd f972 	bl	8004088 <HAL_DMA_Start_IT>
 8006da4:	4603      	mov	r3, r0
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d001      	beq.n	8006dae <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006daa:	2301      	movs	r3, #1
 8006dac:	e0c7      	b.n	8006f3e <HAL_TIM_PWM_Start_DMA+0x406>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	68da      	ldr	r2, [r3, #12]
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006dbc:	60da      	str	r2, [r3, #12]
      break;
 8006dbe:	e04a      	b.n	8006e56 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dc4:	4a60      	ldr	r2, [pc, #384]	; (8006f48 <HAL_TIM_PWM_Start_DMA+0x410>)
 8006dc6:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dcc:	4a5f      	ldr	r2, [pc, #380]	; (8006f4c <HAL_TIM_PWM_Start_DMA+0x414>)
 8006dce:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dd4:	4a5e      	ldr	r2, [pc, #376]	; (8006f50 <HAL_TIM_PWM_Start_DMA+0x418>)
 8006dd6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006ddc:	6879      	ldr	r1, [r7, #4]
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	333c      	adds	r3, #60	; 0x3c
 8006de4:	461a      	mov	r2, r3
 8006de6:	887b      	ldrh	r3, [r7, #2]
 8006de8:	f7fd f94e 	bl	8004088 <HAL_DMA_Start_IT>
 8006dec:	4603      	mov	r3, r0
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d001      	beq.n	8006df6 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006df2:	2301      	movs	r3, #1
 8006df4:	e0a3      	b.n	8006f3e <HAL_TIM_PWM_Start_DMA+0x406>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	68da      	ldr	r2, [r3, #12]
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e04:	60da      	str	r2, [r3, #12]
      break;
 8006e06:	e026      	b.n	8006e56 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e0c:	4a4e      	ldr	r2, [pc, #312]	; (8006f48 <HAL_TIM_PWM_Start_DMA+0x410>)
 8006e0e:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e14:	4a4d      	ldr	r2, [pc, #308]	; (8006f4c <HAL_TIM_PWM_Start_DMA+0x414>)
 8006e16:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e1c:	4a4c      	ldr	r2, [pc, #304]	; (8006f50 <HAL_TIM_PWM_Start_DMA+0x418>)
 8006e1e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006e24:	6879      	ldr	r1, [r7, #4]
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	3340      	adds	r3, #64	; 0x40
 8006e2c:	461a      	mov	r2, r3
 8006e2e:	887b      	ldrh	r3, [r7, #2]
 8006e30:	f7fd f92a 	bl	8004088 <HAL_DMA_Start_IT>
 8006e34:	4603      	mov	r3, r0
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d001      	beq.n	8006e3e <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	e07f      	b.n	8006f3e <HAL_TIM_PWM_Start_DMA+0x406>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	68da      	ldr	r2, [r3, #12]
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006e4c:	60da      	str	r2, [r3, #12]
      break;
 8006e4e:	e002      	b.n	8006e56 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8006e50:	2301      	movs	r3, #1
 8006e52:	75fb      	strb	r3, [r7, #23]
      break;
 8006e54:	bf00      	nop
  }

  if (status == HAL_OK)
 8006e56:	7dfb      	ldrb	r3, [r7, #23]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d16f      	bne.n	8006f3c <HAL_TIM_PWM_Start_DMA+0x404>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	2201      	movs	r2, #1
 8006e62:	68b9      	ldr	r1, [r7, #8]
 8006e64:	4618      	mov	r0, r3
 8006e66:	f001 f84b 	bl	8007f00 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4a39      	ldr	r2, [pc, #228]	; (8006f54 <HAL_TIM_PWM_Start_DMA+0x41c>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d013      	beq.n	8006e9c <HAL_TIM_PWM_Start_DMA+0x364>
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4a37      	ldr	r2, [pc, #220]	; (8006f58 <HAL_TIM_PWM_Start_DMA+0x420>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d00e      	beq.n	8006e9c <HAL_TIM_PWM_Start_DMA+0x364>
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	4a36      	ldr	r2, [pc, #216]	; (8006f5c <HAL_TIM_PWM_Start_DMA+0x424>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d009      	beq.n	8006e9c <HAL_TIM_PWM_Start_DMA+0x364>
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4a34      	ldr	r2, [pc, #208]	; (8006f60 <HAL_TIM_PWM_Start_DMA+0x428>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d004      	beq.n	8006e9c <HAL_TIM_PWM_Start_DMA+0x364>
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4a33      	ldr	r2, [pc, #204]	; (8006f64 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d101      	bne.n	8006ea0 <HAL_TIM_PWM_Start_DMA+0x368>
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	e000      	b.n	8006ea2 <HAL_TIM_PWM_Start_DMA+0x36a>
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d007      	beq.n	8006eb6 <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006eb4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4a26      	ldr	r2, [pc, #152]	; (8006f54 <HAL_TIM_PWM_Start_DMA+0x41c>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d01d      	beq.n	8006efc <HAL_TIM_PWM_Start_DMA+0x3c4>
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ec8:	d018      	beq.n	8006efc <HAL_TIM_PWM_Start_DMA+0x3c4>
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4a26      	ldr	r2, [pc, #152]	; (8006f68 <HAL_TIM_PWM_Start_DMA+0x430>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d013      	beq.n	8006efc <HAL_TIM_PWM_Start_DMA+0x3c4>
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4a24      	ldr	r2, [pc, #144]	; (8006f6c <HAL_TIM_PWM_Start_DMA+0x434>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d00e      	beq.n	8006efc <HAL_TIM_PWM_Start_DMA+0x3c4>
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4a23      	ldr	r2, [pc, #140]	; (8006f70 <HAL_TIM_PWM_Start_DMA+0x438>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d009      	beq.n	8006efc <HAL_TIM_PWM_Start_DMA+0x3c4>
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	4a1a      	ldr	r2, [pc, #104]	; (8006f58 <HAL_TIM_PWM_Start_DMA+0x420>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d004      	beq.n	8006efc <HAL_TIM_PWM_Start_DMA+0x3c4>
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	4a19      	ldr	r2, [pc, #100]	; (8006f5c <HAL_TIM_PWM_Start_DMA+0x424>)
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d115      	bne.n	8006f28 <HAL_TIM_PWM_Start_DMA+0x3f0>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	689a      	ldr	r2, [r3, #8]
 8006f02:	4b1c      	ldr	r3, [pc, #112]	; (8006f74 <HAL_TIM_PWM_Start_DMA+0x43c>)
 8006f04:	4013      	ands	r3, r2
 8006f06:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f08:	693b      	ldr	r3, [r7, #16]
 8006f0a:	2b06      	cmp	r3, #6
 8006f0c:	d015      	beq.n	8006f3a <HAL_TIM_PWM_Start_DMA+0x402>
 8006f0e:	693b      	ldr	r3, [r7, #16]
 8006f10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f14:	d011      	beq.n	8006f3a <HAL_TIM_PWM_Start_DMA+0x402>
      {
        __HAL_TIM_ENABLE(htim);
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	681a      	ldr	r2, [r3, #0]
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f042 0201 	orr.w	r2, r2, #1
 8006f24:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f26:	e008      	b.n	8006f3a <HAL_TIM_PWM_Start_DMA+0x402>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	681a      	ldr	r2, [r3, #0]
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f042 0201 	orr.w	r2, r2, #1
 8006f36:	601a      	str	r2, [r3, #0]
 8006f38:	e000      	b.n	8006f3c <HAL_TIM_PWM_Start_DMA+0x404>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f3a:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8006f3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f3e:	4618      	mov	r0, r3
 8006f40:	3718      	adds	r7, #24
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bd80      	pop	{r7, pc}
 8006f46:	bf00      	nop
 8006f48:	080075dd 	.word	0x080075dd
 8006f4c:	08007685 	.word	0x08007685
 8006f50:	0800754b 	.word	0x0800754b
 8006f54:	40012c00 	.word	0x40012c00
 8006f58:	40013400 	.word	0x40013400
 8006f5c:	40014000 	.word	0x40014000
 8006f60:	40014400 	.word	0x40014400
 8006f64:	40014800 	.word	0x40014800
 8006f68:	40000400 	.word	0x40000400
 8006f6c:	40000800 	.word	0x40000800
 8006f70:	40000c00 	.word	0x40000c00
 8006f74:	00010007 	.word	0x00010007

08006f78 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b084      	sub	sp, #16
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
 8006f80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006f82:	2300      	movs	r3, #0
 8006f84:	73fb      	strb	r3, [r7, #15]
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	2b0c      	cmp	r3, #12
 8006f8a:	d855      	bhi.n	8007038 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8006f8c:	a201      	add	r2, pc, #4	; (adr r2, 8006f94 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8006f8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f92:	bf00      	nop
 8006f94:	08006fc9 	.word	0x08006fc9
 8006f98:	08007039 	.word	0x08007039
 8006f9c:	08007039 	.word	0x08007039
 8006fa0:	08007039 	.word	0x08007039
 8006fa4:	08006fe5 	.word	0x08006fe5
 8006fa8:	08007039 	.word	0x08007039
 8006fac:	08007039 	.word	0x08007039
 8006fb0:	08007039 	.word	0x08007039
 8006fb4:	08007001 	.word	0x08007001
 8006fb8:	08007039 	.word	0x08007039
 8006fbc:	08007039 	.word	0x08007039
 8006fc0:	08007039 	.word	0x08007039
 8006fc4:	0800701d 	.word	0x0800701d
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	68da      	ldr	r2, [r3, #12]
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006fd6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fdc:	4618      	mov	r0, r3
 8006fde:	f7fd f8f1 	bl	80041c4 <HAL_DMA_Abort_IT>
      break;
 8006fe2:	e02c      	b.n	800703e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	68da      	ldr	r2, [r3, #12]
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ff2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	f7fd f8e3 	bl	80041c4 <HAL_DMA_Abort_IT>
      break;
 8006ffe:	e01e      	b.n	800703e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	68da      	ldr	r2, [r3, #12]
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800700e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007014:	4618      	mov	r0, r3
 8007016:	f7fd f8d5 	bl	80041c4 <HAL_DMA_Abort_IT>
      break;
 800701a:	e010      	b.n	800703e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	68da      	ldr	r2, [r3, #12]
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800702a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007030:	4618      	mov	r0, r3
 8007032:	f7fd f8c7 	bl	80041c4 <HAL_DMA_Abort_IT>
      break;
 8007036:	e002      	b.n	800703e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8007038:	2301      	movs	r3, #1
 800703a:	73fb      	strb	r3, [r7, #15]
      break;
 800703c:	bf00      	nop
  }

  if (status == HAL_OK)
 800703e:	7bfb      	ldrb	r3, [r7, #15]
 8007040:	2b00      	cmp	r3, #0
 8007042:	f040 8081 	bne.w	8007148 <HAL_TIM_PWM_Stop_DMA+0x1d0>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	2200      	movs	r2, #0
 800704c:	6839      	ldr	r1, [r7, #0]
 800704e:	4618      	mov	r0, r3
 8007050:	f000 ff56 	bl	8007f00 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4a3e      	ldr	r2, [pc, #248]	; (8007154 <HAL_TIM_PWM_Stop_DMA+0x1dc>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d013      	beq.n	8007086 <HAL_TIM_PWM_Stop_DMA+0x10e>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4a3d      	ldr	r2, [pc, #244]	; (8007158 <HAL_TIM_PWM_Stop_DMA+0x1e0>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d00e      	beq.n	8007086 <HAL_TIM_PWM_Stop_DMA+0x10e>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4a3b      	ldr	r2, [pc, #236]	; (800715c <HAL_TIM_PWM_Stop_DMA+0x1e4>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d009      	beq.n	8007086 <HAL_TIM_PWM_Stop_DMA+0x10e>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4a3a      	ldr	r2, [pc, #232]	; (8007160 <HAL_TIM_PWM_Stop_DMA+0x1e8>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d004      	beq.n	8007086 <HAL_TIM_PWM_Stop_DMA+0x10e>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4a38      	ldr	r2, [pc, #224]	; (8007164 <HAL_TIM_PWM_Stop_DMA+0x1ec>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d101      	bne.n	800708a <HAL_TIM_PWM_Stop_DMA+0x112>
 8007086:	2301      	movs	r3, #1
 8007088:	e000      	b.n	800708c <HAL_TIM_PWM_Stop_DMA+0x114>
 800708a:	2300      	movs	r3, #0
 800708c:	2b00      	cmp	r3, #0
 800708e:	d017      	beq.n	80070c0 <HAL_TIM_PWM_Stop_DMA+0x148>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	6a1a      	ldr	r2, [r3, #32]
 8007096:	f241 1311 	movw	r3, #4369	; 0x1111
 800709a:	4013      	ands	r3, r2
 800709c:	2b00      	cmp	r3, #0
 800709e:	d10f      	bne.n	80070c0 <HAL_TIM_PWM_Stop_DMA+0x148>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	6a1a      	ldr	r2, [r3, #32]
 80070a6:	f240 4344 	movw	r3, #1092	; 0x444
 80070aa:	4013      	ands	r3, r2
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d107      	bne.n	80070c0 <HAL_TIM_PWM_Stop_DMA+0x148>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80070be:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	6a1a      	ldr	r2, [r3, #32]
 80070c6:	f241 1311 	movw	r3, #4369	; 0x1111
 80070ca:	4013      	ands	r3, r2
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d10f      	bne.n	80070f0 <HAL_TIM_PWM_Stop_DMA+0x178>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	6a1a      	ldr	r2, [r3, #32]
 80070d6:	f240 4344 	movw	r3, #1092	; 0x444
 80070da:	4013      	ands	r3, r2
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d107      	bne.n	80070f0 <HAL_TIM_PWM_Stop_DMA+0x178>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	681a      	ldr	r2, [r3, #0]
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f022 0201 	bic.w	r2, r2, #1
 80070ee:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d104      	bne.n	8007100 <HAL_TIM_PWM_Stop_DMA+0x188>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2201      	movs	r2, #1
 80070fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80070fe:	e023      	b.n	8007148 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	2b04      	cmp	r3, #4
 8007104:	d104      	bne.n	8007110 <HAL_TIM_PWM_Stop_DMA+0x198>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2201      	movs	r2, #1
 800710a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800710e:	e01b      	b.n	8007148 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	2b08      	cmp	r3, #8
 8007114:	d104      	bne.n	8007120 <HAL_TIM_PWM_Stop_DMA+0x1a8>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2201      	movs	r2, #1
 800711a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800711e:	e013      	b.n	8007148 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	2b0c      	cmp	r3, #12
 8007124:	d104      	bne.n	8007130 <HAL_TIM_PWM_Stop_DMA+0x1b8>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2201      	movs	r2, #1
 800712a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800712e:	e00b      	b.n	8007148 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	2b10      	cmp	r3, #16
 8007134:	d104      	bne.n	8007140 <HAL_TIM_PWM_Stop_DMA+0x1c8>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2201      	movs	r2, #1
 800713a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800713e:	e003      	b.n	8007148 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2201      	movs	r2, #1
 8007144:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 8007148:	7bfb      	ldrb	r3, [r7, #15]
}
 800714a:	4618      	mov	r0, r3
 800714c:	3710      	adds	r7, #16
 800714e:	46bd      	mov	sp, r7
 8007150:	bd80      	pop	{r7, pc}
 8007152:	bf00      	nop
 8007154:	40012c00 	.word	0x40012c00
 8007158:	40013400 	.word	0x40013400
 800715c:	40014000 	.word	0x40014000
 8007160:	40014400 	.word	0x40014400
 8007164:	40014800 	.word	0x40014800

08007168 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b086      	sub	sp, #24
 800716c:	af00      	add	r7, sp, #0
 800716e:	60f8      	str	r0, [r7, #12]
 8007170:	60b9      	str	r1, [r7, #8]
 8007172:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007174:	2300      	movs	r3, #0
 8007176:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800717e:	2b01      	cmp	r3, #1
 8007180:	d101      	bne.n	8007186 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007182:	2302      	movs	r3, #2
 8007184:	e0ff      	b.n	8007386 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	2201      	movs	r2, #1
 800718a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2b14      	cmp	r3, #20
 8007192:	f200 80f0 	bhi.w	8007376 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007196:	a201      	add	r2, pc, #4	; (adr r2, 800719c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800719c:	080071f1 	.word	0x080071f1
 80071a0:	08007377 	.word	0x08007377
 80071a4:	08007377 	.word	0x08007377
 80071a8:	08007377 	.word	0x08007377
 80071ac:	08007231 	.word	0x08007231
 80071b0:	08007377 	.word	0x08007377
 80071b4:	08007377 	.word	0x08007377
 80071b8:	08007377 	.word	0x08007377
 80071bc:	08007273 	.word	0x08007273
 80071c0:	08007377 	.word	0x08007377
 80071c4:	08007377 	.word	0x08007377
 80071c8:	08007377 	.word	0x08007377
 80071cc:	080072b3 	.word	0x080072b3
 80071d0:	08007377 	.word	0x08007377
 80071d4:	08007377 	.word	0x08007377
 80071d8:	08007377 	.word	0x08007377
 80071dc:	080072f5 	.word	0x080072f5
 80071e0:	08007377 	.word	0x08007377
 80071e4:	08007377 	.word	0x08007377
 80071e8:	08007377 	.word	0x08007377
 80071ec:	08007335 	.word	0x08007335
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	68b9      	ldr	r1, [r7, #8]
 80071f6:	4618      	mov	r0, r3
 80071f8:	f000 fb12 	bl	8007820 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	699a      	ldr	r2, [r3, #24]
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f042 0208 	orr.w	r2, r2, #8
 800720a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	699a      	ldr	r2, [r3, #24]
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f022 0204 	bic.w	r2, r2, #4
 800721a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	6999      	ldr	r1, [r3, #24]
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	691a      	ldr	r2, [r3, #16]
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	430a      	orrs	r2, r1
 800722c:	619a      	str	r2, [r3, #24]
      break;
 800722e:	e0a5      	b.n	800737c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	68b9      	ldr	r1, [r7, #8]
 8007236:	4618      	mov	r0, r3
 8007238:	f000 fb82 	bl	8007940 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	699a      	ldr	r2, [r3, #24]
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800724a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	699a      	ldr	r2, [r3, #24]
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800725a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	6999      	ldr	r1, [r3, #24]
 8007262:	68bb      	ldr	r3, [r7, #8]
 8007264:	691b      	ldr	r3, [r3, #16]
 8007266:	021a      	lsls	r2, r3, #8
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	430a      	orrs	r2, r1
 800726e:	619a      	str	r2, [r3, #24]
      break;
 8007270:	e084      	b.n	800737c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	68b9      	ldr	r1, [r7, #8]
 8007278:	4618      	mov	r0, r3
 800727a:	f000 fbeb 	bl	8007a54 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	69da      	ldr	r2, [r3, #28]
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f042 0208 	orr.w	r2, r2, #8
 800728c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	69da      	ldr	r2, [r3, #28]
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f022 0204 	bic.w	r2, r2, #4
 800729c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	69d9      	ldr	r1, [r3, #28]
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	691a      	ldr	r2, [r3, #16]
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	430a      	orrs	r2, r1
 80072ae:	61da      	str	r2, [r3, #28]
      break;
 80072b0:	e064      	b.n	800737c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	68b9      	ldr	r1, [r7, #8]
 80072b8:	4618      	mov	r0, r3
 80072ba:	f000 fc53 	bl	8007b64 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	69da      	ldr	r2, [r3, #28]
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80072cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	69da      	ldr	r2, [r3, #28]
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	69d9      	ldr	r1, [r3, #28]
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	691b      	ldr	r3, [r3, #16]
 80072e8:	021a      	lsls	r2, r3, #8
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	430a      	orrs	r2, r1
 80072f0:	61da      	str	r2, [r3, #28]
      break;
 80072f2:	e043      	b.n	800737c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	68b9      	ldr	r1, [r7, #8]
 80072fa:	4618      	mov	r0, r3
 80072fc:	f000 fc9c 	bl	8007c38 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f042 0208 	orr.w	r2, r2, #8
 800730e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f022 0204 	bic.w	r2, r2, #4
 800731e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	691a      	ldr	r2, [r3, #16]
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	430a      	orrs	r2, r1
 8007330:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007332:	e023      	b.n	800737c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	68b9      	ldr	r1, [r7, #8]
 800733a:	4618      	mov	r0, r3
 800733c:	f000 fce0 	bl	8007d00 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800734e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800735e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	691b      	ldr	r3, [r3, #16]
 800736a:	021a      	lsls	r2, r3, #8
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	430a      	orrs	r2, r1
 8007372:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007374:	e002      	b.n	800737c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007376:	2301      	movs	r3, #1
 8007378:	75fb      	strb	r3, [r7, #23]
      break;
 800737a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	2200      	movs	r2, #0
 8007380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007384:	7dfb      	ldrb	r3, [r7, #23]
}
 8007386:	4618      	mov	r0, r3
 8007388:	3718      	adds	r7, #24
 800738a:	46bd      	mov	sp, r7
 800738c:	bd80      	pop	{r7, pc}
 800738e:	bf00      	nop

08007390 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b084      	sub	sp, #16
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
 8007398:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800739a:	2300      	movs	r3, #0
 800739c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073a4:	2b01      	cmp	r3, #1
 80073a6:	d101      	bne.n	80073ac <HAL_TIM_ConfigClockSource+0x1c>
 80073a8:	2302      	movs	r3, #2
 80073aa:	e0b6      	b.n	800751a <HAL_TIM_ConfigClockSource+0x18a>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2201      	movs	r2, #1
 80073b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2202      	movs	r2, #2
 80073b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	689b      	ldr	r3, [r3, #8]
 80073c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80073c4:	68bb      	ldr	r3, [r7, #8]
 80073c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80073ca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80073ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80073d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	68ba      	ldr	r2, [r7, #8]
 80073de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073e8:	d03e      	beq.n	8007468 <HAL_TIM_ConfigClockSource+0xd8>
 80073ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073ee:	f200 8087 	bhi.w	8007500 <HAL_TIM_ConfigClockSource+0x170>
 80073f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073f6:	f000 8086 	beq.w	8007506 <HAL_TIM_ConfigClockSource+0x176>
 80073fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073fe:	d87f      	bhi.n	8007500 <HAL_TIM_ConfigClockSource+0x170>
 8007400:	2b70      	cmp	r3, #112	; 0x70
 8007402:	d01a      	beq.n	800743a <HAL_TIM_ConfigClockSource+0xaa>
 8007404:	2b70      	cmp	r3, #112	; 0x70
 8007406:	d87b      	bhi.n	8007500 <HAL_TIM_ConfigClockSource+0x170>
 8007408:	2b60      	cmp	r3, #96	; 0x60
 800740a:	d050      	beq.n	80074ae <HAL_TIM_ConfigClockSource+0x11e>
 800740c:	2b60      	cmp	r3, #96	; 0x60
 800740e:	d877      	bhi.n	8007500 <HAL_TIM_ConfigClockSource+0x170>
 8007410:	2b50      	cmp	r3, #80	; 0x50
 8007412:	d03c      	beq.n	800748e <HAL_TIM_ConfigClockSource+0xfe>
 8007414:	2b50      	cmp	r3, #80	; 0x50
 8007416:	d873      	bhi.n	8007500 <HAL_TIM_ConfigClockSource+0x170>
 8007418:	2b40      	cmp	r3, #64	; 0x40
 800741a:	d058      	beq.n	80074ce <HAL_TIM_ConfigClockSource+0x13e>
 800741c:	2b40      	cmp	r3, #64	; 0x40
 800741e:	d86f      	bhi.n	8007500 <HAL_TIM_ConfigClockSource+0x170>
 8007420:	2b30      	cmp	r3, #48	; 0x30
 8007422:	d064      	beq.n	80074ee <HAL_TIM_ConfigClockSource+0x15e>
 8007424:	2b30      	cmp	r3, #48	; 0x30
 8007426:	d86b      	bhi.n	8007500 <HAL_TIM_ConfigClockSource+0x170>
 8007428:	2b20      	cmp	r3, #32
 800742a:	d060      	beq.n	80074ee <HAL_TIM_ConfigClockSource+0x15e>
 800742c:	2b20      	cmp	r3, #32
 800742e:	d867      	bhi.n	8007500 <HAL_TIM_ConfigClockSource+0x170>
 8007430:	2b00      	cmp	r3, #0
 8007432:	d05c      	beq.n	80074ee <HAL_TIM_ConfigClockSource+0x15e>
 8007434:	2b10      	cmp	r3, #16
 8007436:	d05a      	beq.n	80074ee <HAL_TIM_ConfigClockSource+0x15e>
 8007438:	e062      	b.n	8007500 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6818      	ldr	r0, [r3, #0]
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	6899      	ldr	r1, [r3, #8]
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	685a      	ldr	r2, [r3, #4]
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	68db      	ldr	r3, [r3, #12]
 800744a:	f000 fd39 	bl	8007ec0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	689b      	ldr	r3, [r3, #8]
 8007454:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800745c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	68ba      	ldr	r2, [r7, #8]
 8007464:	609a      	str	r2, [r3, #8]
      break;
 8007466:	e04f      	b.n	8007508 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	6818      	ldr	r0, [r3, #0]
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	6899      	ldr	r1, [r3, #8]
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	685a      	ldr	r2, [r3, #4]
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	68db      	ldr	r3, [r3, #12]
 8007478:	f000 fd22 	bl	8007ec0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	689a      	ldr	r2, [r3, #8]
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800748a:	609a      	str	r2, [r3, #8]
      break;
 800748c:	e03c      	b.n	8007508 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6818      	ldr	r0, [r3, #0]
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	6859      	ldr	r1, [r3, #4]
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	68db      	ldr	r3, [r3, #12]
 800749a:	461a      	mov	r2, r3
 800749c:	f000 fc96 	bl	8007dcc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	2150      	movs	r1, #80	; 0x50
 80074a6:	4618      	mov	r0, r3
 80074a8:	f000 fcef 	bl	8007e8a <TIM_ITRx_SetConfig>
      break;
 80074ac:	e02c      	b.n	8007508 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6818      	ldr	r0, [r3, #0]
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	6859      	ldr	r1, [r3, #4]
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	68db      	ldr	r3, [r3, #12]
 80074ba:	461a      	mov	r2, r3
 80074bc:	f000 fcb5 	bl	8007e2a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	2160      	movs	r1, #96	; 0x60
 80074c6:	4618      	mov	r0, r3
 80074c8:	f000 fcdf 	bl	8007e8a <TIM_ITRx_SetConfig>
      break;
 80074cc:	e01c      	b.n	8007508 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6818      	ldr	r0, [r3, #0]
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	6859      	ldr	r1, [r3, #4]
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	68db      	ldr	r3, [r3, #12]
 80074da:	461a      	mov	r2, r3
 80074dc:	f000 fc76 	bl	8007dcc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	2140      	movs	r1, #64	; 0x40
 80074e6:	4618      	mov	r0, r3
 80074e8:	f000 fccf 	bl	8007e8a <TIM_ITRx_SetConfig>
      break;
 80074ec:	e00c      	b.n	8007508 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681a      	ldr	r2, [r3, #0]
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	4619      	mov	r1, r3
 80074f8:	4610      	mov	r0, r2
 80074fa:	f000 fcc6 	bl	8007e8a <TIM_ITRx_SetConfig>
      break;
 80074fe:	e003      	b.n	8007508 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8007500:	2301      	movs	r3, #1
 8007502:	73fb      	strb	r3, [r7, #15]
      break;
 8007504:	e000      	b.n	8007508 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8007506:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2201      	movs	r2, #1
 800750c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2200      	movs	r2, #0
 8007514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007518:	7bfb      	ldrb	r3, [r7, #15]
}
 800751a:	4618      	mov	r0, r3
 800751c:	3710      	adds	r7, #16
 800751e:	46bd      	mov	sp, r7
 8007520:	bd80      	pop	{r7, pc}

08007522 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007522:	b480      	push	{r7}
 8007524:	b083      	sub	sp, #12
 8007526:	af00      	add	r7, sp, #0
 8007528:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800752a:	bf00      	nop
 800752c:	370c      	adds	r7, #12
 800752e:	46bd      	mov	sp, r7
 8007530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007534:	4770      	bx	lr

08007536 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8007536:	b480      	push	{r7}
 8007538:	b083      	sub	sp, #12
 800753a:	af00      	add	r7, sp, #0
 800753c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800753e:	bf00      	nop
 8007540:	370c      	adds	r7, #12
 8007542:	46bd      	mov	sp, r7
 8007544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007548:	4770      	bx	lr

0800754a <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800754a:	b580      	push	{r7, lr}
 800754c:	b084      	sub	sp, #16
 800754e:	af00      	add	r7, sp, #0
 8007550:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007556:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800755c:	687a      	ldr	r2, [r7, #4]
 800755e:	429a      	cmp	r2, r3
 8007560:	d107      	bne.n	8007572 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	2201      	movs	r2, #1
 8007566:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	2201      	movs	r2, #1
 800756c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007570:	e02a      	b.n	80075c8 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007576:	687a      	ldr	r2, [r7, #4]
 8007578:	429a      	cmp	r2, r3
 800757a:	d107      	bne.n	800758c <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	2202      	movs	r2, #2
 8007580:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	2201      	movs	r2, #1
 8007586:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800758a:	e01d      	b.n	80075c8 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007590:	687a      	ldr	r2, [r7, #4]
 8007592:	429a      	cmp	r2, r3
 8007594:	d107      	bne.n	80075a6 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	2204      	movs	r2, #4
 800759a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	2201      	movs	r2, #1
 80075a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80075a4:	e010      	b.n	80075c8 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075aa:	687a      	ldr	r2, [r7, #4]
 80075ac:	429a      	cmp	r2, r3
 80075ae:	d107      	bne.n	80075c0 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	2208      	movs	r2, #8
 80075b4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	2201      	movs	r2, #1
 80075ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80075be:	e003      	b.n	80075c8 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	2201      	movs	r2, #1
 80075c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80075c8:	68f8      	ldr	r0, [r7, #12]
 80075ca:	f7ff ffb4 	bl	8007536 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	2200      	movs	r2, #0
 80075d2:	771a      	strb	r2, [r3, #28]
}
 80075d4:	bf00      	nop
 80075d6:	3710      	adds	r7, #16
 80075d8:	46bd      	mov	sp, r7
 80075da:	bd80      	pop	{r7, pc}

080075dc <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b084      	sub	sp, #16
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075e8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ee:	687a      	ldr	r2, [r7, #4]
 80075f0:	429a      	cmp	r2, r3
 80075f2:	d10b      	bne.n	800760c <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	2201      	movs	r2, #1
 80075f8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	69db      	ldr	r3, [r3, #28]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d136      	bne.n	8007670 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	2201      	movs	r2, #1
 8007606:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800760a:	e031      	b.n	8007670 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007610:	687a      	ldr	r2, [r7, #4]
 8007612:	429a      	cmp	r2, r3
 8007614:	d10b      	bne.n	800762e <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	2202      	movs	r2, #2
 800761a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	69db      	ldr	r3, [r3, #28]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d125      	bne.n	8007670 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	2201      	movs	r2, #1
 8007628:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800762c:	e020      	b.n	8007670 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007632:	687a      	ldr	r2, [r7, #4]
 8007634:	429a      	cmp	r2, r3
 8007636:	d10b      	bne.n	8007650 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	2204      	movs	r2, #4
 800763c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	69db      	ldr	r3, [r3, #28]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d114      	bne.n	8007670 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	2201      	movs	r2, #1
 800764a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800764e:	e00f      	b.n	8007670 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007654:	687a      	ldr	r2, [r7, #4]
 8007656:	429a      	cmp	r2, r3
 8007658:	d10a      	bne.n	8007670 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	2208      	movs	r2, #8
 800765e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	69db      	ldr	r3, [r3, #28]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d103      	bne.n	8007670 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	2201      	movs	r2, #1
 800766c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007670:	68f8      	ldr	r0, [r7, #12]
 8007672:	f7fa f8d9 	bl	8001828 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	2200      	movs	r2, #0
 800767a:	771a      	strb	r2, [r3, #28]
}
 800767c:	bf00      	nop
 800767e:	3710      	adds	r7, #16
 8007680:	46bd      	mov	sp, r7
 8007682:	bd80      	pop	{r7, pc}

08007684 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b084      	sub	sp, #16
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007690:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007696:	687a      	ldr	r2, [r7, #4]
 8007698:	429a      	cmp	r2, r3
 800769a:	d103      	bne.n	80076a4 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	2201      	movs	r2, #1
 80076a0:	771a      	strb	r2, [r3, #28]
 80076a2:	e019      	b.n	80076d8 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076a8:	687a      	ldr	r2, [r7, #4]
 80076aa:	429a      	cmp	r2, r3
 80076ac:	d103      	bne.n	80076b6 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	2202      	movs	r2, #2
 80076b2:	771a      	strb	r2, [r3, #28]
 80076b4:	e010      	b.n	80076d8 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076ba:	687a      	ldr	r2, [r7, #4]
 80076bc:	429a      	cmp	r2, r3
 80076be:	d103      	bne.n	80076c8 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	2204      	movs	r2, #4
 80076c4:	771a      	strb	r2, [r3, #28]
 80076c6:	e007      	b.n	80076d8 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076cc:	687a      	ldr	r2, [r7, #4]
 80076ce:	429a      	cmp	r2, r3
 80076d0:	d102      	bne.n	80076d8 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	2208      	movs	r2, #8
 80076d6:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80076d8:	68f8      	ldr	r0, [r7, #12]
 80076da:	f7ff ff22 	bl	8007522 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	2200      	movs	r2, #0
 80076e2:	771a      	strb	r2, [r3, #28]
}
 80076e4:	bf00      	nop
 80076e6:	3710      	adds	r7, #16
 80076e8:	46bd      	mov	sp, r7
 80076ea:	bd80      	pop	{r7, pc}

080076ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80076ec:	b480      	push	{r7}
 80076ee:	b085      	sub	sp, #20
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
 80076f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	4a40      	ldr	r2, [pc, #256]	; (8007800 <TIM_Base_SetConfig+0x114>)
 8007700:	4293      	cmp	r3, r2
 8007702:	d013      	beq.n	800772c <TIM_Base_SetConfig+0x40>
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800770a:	d00f      	beq.n	800772c <TIM_Base_SetConfig+0x40>
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	4a3d      	ldr	r2, [pc, #244]	; (8007804 <TIM_Base_SetConfig+0x118>)
 8007710:	4293      	cmp	r3, r2
 8007712:	d00b      	beq.n	800772c <TIM_Base_SetConfig+0x40>
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	4a3c      	ldr	r2, [pc, #240]	; (8007808 <TIM_Base_SetConfig+0x11c>)
 8007718:	4293      	cmp	r3, r2
 800771a:	d007      	beq.n	800772c <TIM_Base_SetConfig+0x40>
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	4a3b      	ldr	r2, [pc, #236]	; (800780c <TIM_Base_SetConfig+0x120>)
 8007720:	4293      	cmp	r3, r2
 8007722:	d003      	beq.n	800772c <TIM_Base_SetConfig+0x40>
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	4a3a      	ldr	r2, [pc, #232]	; (8007810 <TIM_Base_SetConfig+0x124>)
 8007728:	4293      	cmp	r3, r2
 800772a:	d108      	bne.n	800773e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007732:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	685b      	ldr	r3, [r3, #4]
 8007738:	68fa      	ldr	r2, [r7, #12]
 800773a:	4313      	orrs	r3, r2
 800773c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	4a2f      	ldr	r2, [pc, #188]	; (8007800 <TIM_Base_SetConfig+0x114>)
 8007742:	4293      	cmp	r3, r2
 8007744:	d01f      	beq.n	8007786 <TIM_Base_SetConfig+0x9a>
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800774c:	d01b      	beq.n	8007786 <TIM_Base_SetConfig+0x9a>
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	4a2c      	ldr	r2, [pc, #176]	; (8007804 <TIM_Base_SetConfig+0x118>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d017      	beq.n	8007786 <TIM_Base_SetConfig+0x9a>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	4a2b      	ldr	r2, [pc, #172]	; (8007808 <TIM_Base_SetConfig+0x11c>)
 800775a:	4293      	cmp	r3, r2
 800775c:	d013      	beq.n	8007786 <TIM_Base_SetConfig+0x9a>
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	4a2a      	ldr	r2, [pc, #168]	; (800780c <TIM_Base_SetConfig+0x120>)
 8007762:	4293      	cmp	r3, r2
 8007764:	d00f      	beq.n	8007786 <TIM_Base_SetConfig+0x9a>
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	4a29      	ldr	r2, [pc, #164]	; (8007810 <TIM_Base_SetConfig+0x124>)
 800776a:	4293      	cmp	r3, r2
 800776c:	d00b      	beq.n	8007786 <TIM_Base_SetConfig+0x9a>
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	4a28      	ldr	r2, [pc, #160]	; (8007814 <TIM_Base_SetConfig+0x128>)
 8007772:	4293      	cmp	r3, r2
 8007774:	d007      	beq.n	8007786 <TIM_Base_SetConfig+0x9a>
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	4a27      	ldr	r2, [pc, #156]	; (8007818 <TIM_Base_SetConfig+0x12c>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d003      	beq.n	8007786 <TIM_Base_SetConfig+0x9a>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	4a26      	ldr	r2, [pc, #152]	; (800781c <TIM_Base_SetConfig+0x130>)
 8007782:	4293      	cmp	r3, r2
 8007784:	d108      	bne.n	8007798 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800778c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	68db      	ldr	r3, [r3, #12]
 8007792:	68fa      	ldr	r2, [r7, #12]
 8007794:	4313      	orrs	r3, r2
 8007796:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	695b      	ldr	r3, [r3, #20]
 80077a2:	4313      	orrs	r3, r2
 80077a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	68fa      	ldr	r2, [r7, #12]
 80077aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	689a      	ldr	r2, [r3, #8]
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	681a      	ldr	r2, [r3, #0]
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	4a10      	ldr	r2, [pc, #64]	; (8007800 <TIM_Base_SetConfig+0x114>)
 80077c0:	4293      	cmp	r3, r2
 80077c2:	d00f      	beq.n	80077e4 <TIM_Base_SetConfig+0xf8>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	4a12      	ldr	r2, [pc, #72]	; (8007810 <TIM_Base_SetConfig+0x124>)
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d00b      	beq.n	80077e4 <TIM_Base_SetConfig+0xf8>
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	4a11      	ldr	r2, [pc, #68]	; (8007814 <TIM_Base_SetConfig+0x128>)
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d007      	beq.n	80077e4 <TIM_Base_SetConfig+0xf8>
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	4a10      	ldr	r2, [pc, #64]	; (8007818 <TIM_Base_SetConfig+0x12c>)
 80077d8:	4293      	cmp	r3, r2
 80077da:	d003      	beq.n	80077e4 <TIM_Base_SetConfig+0xf8>
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	4a0f      	ldr	r2, [pc, #60]	; (800781c <TIM_Base_SetConfig+0x130>)
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d103      	bne.n	80077ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	691a      	ldr	r2, [r3, #16]
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2201      	movs	r2, #1
 80077f0:	615a      	str	r2, [r3, #20]
}
 80077f2:	bf00      	nop
 80077f4:	3714      	adds	r7, #20
 80077f6:	46bd      	mov	sp, r7
 80077f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fc:	4770      	bx	lr
 80077fe:	bf00      	nop
 8007800:	40012c00 	.word	0x40012c00
 8007804:	40000400 	.word	0x40000400
 8007808:	40000800 	.word	0x40000800
 800780c:	40000c00 	.word	0x40000c00
 8007810:	40013400 	.word	0x40013400
 8007814:	40014000 	.word	0x40014000
 8007818:	40014400 	.word	0x40014400
 800781c:	40014800 	.word	0x40014800

08007820 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007820:	b480      	push	{r7}
 8007822:	b087      	sub	sp, #28
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
 8007828:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6a1b      	ldr	r3, [r3, #32]
 800782e:	f023 0201 	bic.w	r2, r3, #1
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6a1b      	ldr	r3, [r3, #32]
 800783a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	685b      	ldr	r3, [r3, #4]
 8007840:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	699b      	ldr	r3, [r3, #24]
 8007846:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800784e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007852:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	f023 0303 	bic.w	r3, r3, #3
 800785a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	68fa      	ldr	r2, [r7, #12]
 8007862:	4313      	orrs	r3, r2
 8007864:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007866:	697b      	ldr	r3, [r7, #20]
 8007868:	f023 0302 	bic.w	r3, r3, #2
 800786c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	689b      	ldr	r3, [r3, #8]
 8007872:	697a      	ldr	r2, [r7, #20]
 8007874:	4313      	orrs	r3, r2
 8007876:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	4a2c      	ldr	r2, [pc, #176]	; (800792c <TIM_OC1_SetConfig+0x10c>)
 800787c:	4293      	cmp	r3, r2
 800787e:	d00f      	beq.n	80078a0 <TIM_OC1_SetConfig+0x80>
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	4a2b      	ldr	r2, [pc, #172]	; (8007930 <TIM_OC1_SetConfig+0x110>)
 8007884:	4293      	cmp	r3, r2
 8007886:	d00b      	beq.n	80078a0 <TIM_OC1_SetConfig+0x80>
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	4a2a      	ldr	r2, [pc, #168]	; (8007934 <TIM_OC1_SetConfig+0x114>)
 800788c:	4293      	cmp	r3, r2
 800788e:	d007      	beq.n	80078a0 <TIM_OC1_SetConfig+0x80>
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	4a29      	ldr	r2, [pc, #164]	; (8007938 <TIM_OC1_SetConfig+0x118>)
 8007894:	4293      	cmp	r3, r2
 8007896:	d003      	beq.n	80078a0 <TIM_OC1_SetConfig+0x80>
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	4a28      	ldr	r2, [pc, #160]	; (800793c <TIM_OC1_SetConfig+0x11c>)
 800789c:	4293      	cmp	r3, r2
 800789e:	d10c      	bne.n	80078ba <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80078a0:	697b      	ldr	r3, [r7, #20]
 80078a2:	f023 0308 	bic.w	r3, r3, #8
 80078a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	68db      	ldr	r3, [r3, #12]
 80078ac:	697a      	ldr	r2, [r7, #20]
 80078ae:	4313      	orrs	r3, r2
 80078b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80078b2:	697b      	ldr	r3, [r7, #20]
 80078b4:	f023 0304 	bic.w	r3, r3, #4
 80078b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	4a1b      	ldr	r2, [pc, #108]	; (800792c <TIM_OC1_SetConfig+0x10c>)
 80078be:	4293      	cmp	r3, r2
 80078c0:	d00f      	beq.n	80078e2 <TIM_OC1_SetConfig+0xc2>
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	4a1a      	ldr	r2, [pc, #104]	; (8007930 <TIM_OC1_SetConfig+0x110>)
 80078c6:	4293      	cmp	r3, r2
 80078c8:	d00b      	beq.n	80078e2 <TIM_OC1_SetConfig+0xc2>
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	4a19      	ldr	r2, [pc, #100]	; (8007934 <TIM_OC1_SetConfig+0x114>)
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d007      	beq.n	80078e2 <TIM_OC1_SetConfig+0xc2>
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	4a18      	ldr	r2, [pc, #96]	; (8007938 <TIM_OC1_SetConfig+0x118>)
 80078d6:	4293      	cmp	r3, r2
 80078d8:	d003      	beq.n	80078e2 <TIM_OC1_SetConfig+0xc2>
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	4a17      	ldr	r2, [pc, #92]	; (800793c <TIM_OC1_SetConfig+0x11c>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d111      	bne.n	8007906 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80078e2:	693b      	ldr	r3, [r7, #16]
 80078e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80078e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80078ea:	693b      	ldr	r3, [r7, #16]
 80078ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80078f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	695b      	ldr	r3, [r3, #20]
 80078f6:	693a      	ldr	r2, [r7, #16]
 80078f8:	4313      	orrs	r3, r2
 80078fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	699b      	ldr	r3, [r3, #24]
 8007900:	693a      	ldr	r2, [r7, #16]
 8007902:	4313      	orrs	r3, r2
 8007904:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	693a      	ldr	r2, [r7, #16]
 800790a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	68fa      	ldr	r2, [r7, #12]
 8007910:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	685a      	ldr	r2, [r3, #4]
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	697a      	ldr	r2, [r7, #20]
 800791e:	621a      	str	r2, [r3, #32]
}
 8007920:	bf00      	nop
 8007922:	371c      	adds	r7, #28
 8007924:	46bd      	mov	sp, r7
 8007926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792a:	4770      	bx	lr
 800792c:	40012c00 	.word	0x40012c00
 8007930:	40013400 	.word	0x40013400
 8007934:	40014000 	.word	0x40014000
 8007938:	40014400 	.word	0x40014400
 800793c:	40014800 	.word	0x40014800

08007940 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007940:	b480      	push	{r7}
 8007942:	b087      	sub	sp, #28
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
 8007948:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6a1b      	ldr	r3, [r3, #32]
 800794e:	f023 0210 	bic.w	r2, r3, #16
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6a1b      	ldr	r3, [r3, #32]
 800795a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	685b      	ldr	r3, [r3, #4]
 8007960:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	699b      	ldr	r3, [r3, #24]
 8007966:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800796e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007972:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800797a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	021b      	lsls	r3, r3, #8
 8007982:	68fa      	ldr	r2, [r7, #12]
 8007984:	4313      	orrs	r3, r2
 8007986:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007988:	697b      	ldr	r3, [r7, #20]
 800798a:	f023 0320 	bic.w	r3, r3, #32
 800798e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	689b      	ldr	r3, [r3, #8]
 8007994:	011b      	lsls	r3, r3, #4
 8007996:	697a      	ldr	r2, [r7, #20]
 8007998:	4313      	orrs	r3, r2
 800799a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	4a28      	ldr	r2, [pc, #160]	; (8007a40 <TIM_OC2_SetConfig+0x100>)
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d003      	beq.n	80079ac <TIM_OC2_SetConfig+0x6c>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	4a27      	ldr	r2, [pc, #156]	; (8007a44 <TIM_OC2_SetConfig+0x104>)
 80079a8:	4293      	cmp	r3, r2
 80079aa:	d10d      	bne.n	80079c8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80079ac:	697b      	ldr	r3, [r7, #20]
 80079ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80079b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	68db      	ldr	r3, [r3, #12]
 80079b8:	011b      	lsls	r3, r3, #4
 80079ba:	697a      	ldr	r2, [r7, #20]
 80079bc:	4313      	orrs	r3, r2
 80079be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80079c0:	697b      	ldr	r3, [r7, #20]
 80079c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80079c6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	4a1d      	ldr	r2, [pc, #116]	; (8007a40 <TIM_OC2_SetConfig+0x100>)
 80079cc:	4293      	cmp	r3, r2
 80079ce:	d00f      	beq.n	80079f0 <TIM_OC2_SetConfig+0xb0>
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	4a1c      	ldr	r2, [pc, #112]	; (8007a44 <TIM_OC2_SetConfig+0x104>)
 80079d4:	4293      	cmp	r3, r2
 80079d6:	d00b      	beq.n	80079f0 <TIM_OC2_SetConfig+0xb0>
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	4a1b      	ldr	r2, [pc, #108]	; (8007a48 <TIM_OC2_SetConfig+0x108>)
 80079dc:	4293      	cmp	r3, r2
 80079de:	d007      	beq.n	80079f0 <TIM_OC2_SetConfig+0xb0>
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	4a1a      	ldr	r2, [pc, #104]	; (8007a4c <TIM_OC2_SetConfig+0x10c>)
 80079e4:	4293      	cmp	r3, r2
 80079e6:	d003      	beq.n	80079f0 <TIM_OC2_SetConfig+0xb0>
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	4a19      	ldr	r2, [pc, #100]	; (8007a50 <TIM_OC2_SetConfig+0x110>)
 80079ec:	4293      	cmp	r3, r2
 80079ee:	d113      	bne.n	8007a18 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80079f0:	693b      	ldr	r3, [r7, #16]
 80079f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80079f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80079f8:	693b      	ldr	r3, [r7, #16]
 80079fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80079fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	695b      	ldr	r3, [r3, #20]
 8007a04:	009b      	lsls	r3, r3, #2
 8007a06:	693a      	ldr	r2, [r7, #16]
 8007a08:	4313      	orrs	r3, r2
 8007a0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	699b      	ldr	r3, [r3, #24]
 8007a10:	009b      	lsls	r3, r3, #2
 8007a12:	693a      	ldr	r2, [r7, #16]
 8007a14:	4313      	orrs	r3, r2
 8007a16:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	693a      	ldr	r2, [r7, #16]
 8007a1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	68fa      	ldr	r2, [r7, #12]
 8007a22:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	685a      	ldr	r2, [r3, #4]
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	697a      	ldr	r2, [r7, #20]
 8007a30:	621a      	str	r2, [r3, #32]
}
 8007a32:	bf00      	nop
 8007a34:	371c      	adds	r7, #28
 8007a36:	46bd      	mov	sp, r7
 8007a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3c:	4770      	bx	lr
 8007a3e:	bf00      	nop
 8007a40:	40012c00 	.word	0x40012c00
 8007a44:	40013400 	.word	0x40013400
 8007a48:	40014000 	.word	0x40014000
 8007a4c:	40014400 	.word	0x40014400
 8007a50:	40014800 	.word	0x40014800

08007a54 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a54:	b480      	push	{r7}
 8007a56:	b087      	sub	sp, #28
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
 8007a5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6a1b      	ldr	r3, [r3, #32]
 8007a62:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6a1b      	ldr	r3, [r3, #32]
 8007a6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	685b      	ldr	r3, [r3, #4]
 8007a74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	69db      	ldr	r3, [r3, #28]
 8007a7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	f023 0303 	bic.w	r3, r3, #3
 8007a8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	68fa      	ldr	r2, [r7, #12]
 8007a96:	4313      	orrs	r3, r2
 8007a98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007a9a:	697b      	ldr	r3, [r7, #20]
 8007a9c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007aa0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	689b      	ldr	r3, [r3, #8]
 8007aa6:	021b      	lsls	r3, r3, #8
 8007aa8:	697a      	ldr	r2, [r7, #20]
 8007aaa:	4313      	orrs	r3, r2
 8007aac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	4a27      	ldr	r2, [pc, #156]	; (8007b50 <TIM_OC3_SetConfig+0xfc>)
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d003      	beq.n	8007abe <TIM_OC3_SetConfig+0x6a>
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	4a26      	ldr	r2, [pc, #152]	; (8007b54 <TIM_OC3_SetConfig+0x100>)
 8007aba:	4293      	cmp	r3, r2
 8007abc:	d10d      	bne.n	8007ada <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007abe:	697b      	ldr	r3, [r7, #20]
 8007ac0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007ac4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	68db      	ldr	r3, [r3, #12]
 8007aca:	021b      	lsls	r3, r3, #8
 8007acc:	697a      	ldr	r2, [r7, #20]
 8007ace:	4313      	orrs	r3, r2
 8007ad0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007ad2:	697b      	ldr	r3, [r7, #20]
 8007ad4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007ad8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	4a1c      	ldr	r2, [pc, #112]	; (8007b50 <TIM_OC3_SetConfig+0xfc>)
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d00f      	beq.n	8007b02 <TIM_OC3_SetConfig+0xae>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	4a1b      	ldr	r2, [pc, #108]	; (8007b54 <TIM_OC3_SetConfig+0x100>)
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d00b      	beq.n	8007b02 <TIM_OC3_SetConfig+0xae>
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	4a1a      	ldr	r2, [pc, #104]	; (8007b58 <TIM_OC3_SetConfig+0x104>)
 8007aee:	4293      	cmp	r3, r2
 8007af0:	d007      	beq.n	8007b02 <TIM_OC3_SetConfig+0xae>
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	4a19      	ldr	r2, [pc, #100]	; (8007b5c <TIM_OC3_SetConfig+0x108>)
 8007af6:	4293      	cmp	r3, r2
 8007af8:	d003      	beq.n	8007b02 <TIM_OC3_SetConfig+0xae>
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	4a18      	ldr	r2, [pc, #96]	; (8007b60 <TIM_OC3_SetConfig+0x10c>)
 8007afe:	4293      	cmp	r3, r2
 8007b00:	d113      	bne.n	8007b2a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007b02:	693b      	ldr	r3, [r7, #16]
 8007b04:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007b08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007b0a:	693b      	ldr	r3, [r7, #16]
 8007b0c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007b10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	695b      	ldr	r3, [r3, #20]
 8007b16:	011b      	lsls	r3, r3, #4
 8007b18:	693a      	ldr	r2, [r7, #16]
 8007b1a:	4313      	orrs	r3, r2
 8007b1c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	699b      	ldr	r3, [r3, #24]
 8007b22:	011b      	lsls	r3, r3, #4
 8007b24:	693a      	ldr	r2, [r7, #16]
 8007b26:	4313      	orrs	r3, r2
 8007b28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	693a      	ldr	r2, [r7, #16]
 8007b2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	68fa      	ldr	r2, [r7, #12]
 8007b34:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	685a      	ldr	r2, [r3, #4]
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	697a      	ldr	r2, [r7, #20]
 8007b42:	621a      	str	r2, [r3, #32]
}
 8007b44:	bf00      	nop
 8007b46:	371c      	adds	r7, #28
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4e:	4770      	bx	lr
 8007b50:	40012c00 	.word	0x40012c00
 8007b54:	40013400 	.word	0x40013400
 8007b58:	40014000 	.word	0x40014000
 8007b5c:	40014400 	.word	0x40014400
 8007b60:	40014800 	.word	0x40014800

08007b64 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b64:	b480      	push	{r7}
 8007b66:	b087      	sub	sp, #28
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
 8007b6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6a1b      	ldr	r3, [r3, #32]
 8007b72:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6a1b      	ldr	r3, [r3, #32]
 8007b7e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	685b      	ldr	r3, [r3, #4]
 8007b84:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	69db      	ldr	r3, [r3, #28]
 8007b8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007b92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	021b      	lsls	r3, r3, #8
 8007ba6:	68fa      	ldr	r2, [r7, #12]
 8007ba8:	4313      	orrs	r3, r2
 8007baa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007bac:	693b      	ldr	r3, [r7, #16]
 8007bae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007bb2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	689b      	ldr	r3, [r3, #8]
 8007bb8:	031b      	lsls	r3, r3, #12
 8007bba:	693a      	ldr	r2, [r7, #16]
 8007bbc:	4313      	orrs	r3, r2
 8007bbe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	4a18      	ldr	r2, [pc, #96]	; (8007c24 <TIM_OC4_SetConfig+0xc0>)
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	d00f      	beq.n	8007be8 <TIM_OC4_SetConfig+0x84>
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	4a17      	ldr	r2, [pc, #92]	; (8007c28 <TIM_OC4_SetConfig+0xc4>)
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d00b      	beq.n	8007be8 <TIM_OC4_SetConfig+0x84>
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	4a16      	ldr	r2, [pc, #88]	; (8007c2c <TIM_OC4_SetConfig+0xc8>)
 8007bd4:	4293      	cmp	r3, r2
 8007bd6:	d007      	beq.n	8007be8 <TIM_OC4_SetConfig+0x84>
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	4a15      	ldr	r2, [pc, #84]	; (8007c30 <TIM_OC4_SetConfig+0xcc>)
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	d003      	beq.n	8007be8 <TIM_OC4_SetConfig+0x84>
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	4a14      	ldr	r2, [pc, #80]	; (8007c34 <TIM_OC4_SetConfig+0xd0>)
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d109      	bne.n	8007bfc <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007be8:	697b      	ldr	r3, [r7, #20]
 8007bea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007bee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	695b      	ldr	r3, [r3, #20]
 8007bf4:	019b      	lsls	r3, r3, #6
 8007bf6:	697a      	ldr	r2, [r7, #20]
 8007bf8:	4313      	orrs	r3, r2
 8007bfa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	697a      	ldr	r2, [r7, #20]
 8007c00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	68fa      	ldr	r2, [r7, #12]
 8007c06:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	685a      	ldr	r2, [r3, #4]
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	693a      	ldr	r2, [r7, #16]
 8007c14:	621a      	str	r2, [r3, #32]
}
 8007c16:	bf00      	nop
 8007c18:	371c      	adds	r7, #28
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c20:	4770      	bx	lr
 8007c22:	bf00      	nop
 8007c24:	40012c00 	.word	0x40012c00
 8007c28:	40013400 	.word	0x40013400
 8007c2c:	40014000 	.word	0x40014000
 8007c30:	40014400 	.word	0x40014400
 8007c34:	40014800 	.word	0x40014800

08007c38 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007c38:	b480      	push	{r7}
 8007c3a:	b087      	sub	sp, #28
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
 8007c40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6a1b      	ldr	r3, [r3, #32]
 8007c46:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6a1b      	ldr	r3, [r3, #32]
 8007c52:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	685b      	ldr	r3, [r3, #4]
 8007c58:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	68fa      	ldr	r2, [r7, #12]
 8007c72:	4313      	orrs	r3, r2
 8007c74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007c76:	693b      	ldr	r3, [r7, #16]
 8007c78:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007c7c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	689b      	ldr	r3, [r3, #8]
 8007c82:	041b      	lsls	r3, r3, #16
 8007c84:	693a      	ldr	r2, [r7, #16]
 8007c86:	4313      	orrs	r3, r2
 8007c88:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	4a17      	ldr	r2, [pc, #92]	; (8007cec <TIM_OC5_SetConfig+0xb4>)
 8007c8e:	4293      	cmp	r3, r2
 8007c90:	d00f      	beq.n	8007cb2 <TIM_OC5_SetConfig+0x7a>
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	4a16      	ldr	r2, [pc, #88]	; (8007cf0 <TIM_OC5_SetConfig+0xb8>)
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d00b      	beq.n	8007cb2 <TIM_OC5_SetConfig+0x7a>
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	4a15      	ldr	r2, [pc, #84]	; (8007cf4 <TIM_OC5_SetConfig+0xbc>)
 8007c9e:	4293      	cmp	r3, r2
 8007ca0:	d007      	beq.n	8007cb2 <TIM_OC5_SetConfig+0x7a>
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	4a14      	ldr	r2, [pc, #80]	; (8007cf8 <TIM_OC5_SetConfig+0xc0>)
 8007ca6:	4293      	cmp	r3, r2
 8007ca8:	d003      	beq.n	8007cb2 <TIM_OC5_SetConfig+0x7a>
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	4a13      	ldr	r2, [pc, #76]	; (8007cfc <TIM_OC5_SetConfig+0xc4>)
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	d109      	bne.n	8007cc6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007cb2:	697b      	ldr	r3, [r7, #20]
 8007cb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007cb8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	695b      	ldr	r3, [r3, #20]
 8007cbe:	021b      	lsls	r3, r3, #8
 8007cc0:	697a      	ldr	r2, [r7, #20]
 8007cc2:	4313      	orrs	r3, r2
 8007cc4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	697a      	ldr	r2, [r7, #20]
 8007cca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	68fa      	ldr	r2, [r7, #12]
 8007cd0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	685a      	ldr	r2, [r3, #4]
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	693a      	ldr	r2, [r7, #16]
 8007cde:	621a      	str	r2, [r3, #32]
}
 8007ce0:	bf00      	nop
 8007ce2:	371c      	adds	r7, #28
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cea:	4770      	bx	lr
 8007cec:	40012c00 	.word	0x40012c00
 8007cf0:	40013400 	.word	0x40013400
 8007cf4:	40014000 	.word	0x40014000
 8007cf8:	40014400 	.word	0x40014400
 8007cfc:	40014800 	.word	0x40014800

08007d00 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007d00:	b480      	push	{r7}
 8007d02:	b087      	sub	sp, #28
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
 8007d08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	6a1b      	ldr	r3, [r3, #32]
 8007d0e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6a1b      	ldr	r3, [r3, #32]
 8007d1a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	685b      	ldr	r3, [r3, #4]
 8007d20:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007d2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	021b      	lsls	r3, r3, #8
 8007d3a:	68fa      	ldr	r2, [r7, #12]
 8007d3c:	4313      	orrs	r3, r2
 8007d3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007d40:	693b      	ldr	r3, [r7, #16]
 8007d42:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007d46:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	689b      	ldr	r3, [r3, #8]
 8007d4c:	051b      	lsls	r3, r3, #20
 8007d4e:	693a      	ldr	r2, [r7, #16]
 8007d50:	4313      	orrs	r3, r2
 8007d52:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	4a18      	ldr	r2, [pc, #96]	; (8007db8 <TIM_OC6_SetConfig+0xb8>)
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	d00f      	beq.n	8007d7c <TIM_OC6_SetConfig+0x7c>
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	4a17      	ldr	r2, [pc, #92]	; (8007dbc <TIM_OC6_SetConfig+0xbc>)
 8007d60:	4293      	cmp	r3, r2
 8007d62:	d00b      	beq.n	8007d7c <TIM_OC6_SetConfig+0x7c>
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	4a16      	ldr	r2, [pc, #88]	; (8007dc0 <TIM_OC6_SetConfig+0xc0>)
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	d007      	beq.n	8007d7c <TIM_OC6_SetConfig+0x7c>
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	4a15      	ldr	r2, [pc, #84]	; (8007dc4 <TIM_OC6_SetConfig+0xc4>)
 8007d70:	4293      	cmp	r3, r2
 8007d72:	d003      	beq.n	8007d7c <TIM_OC6_SetConfig+0x7c>
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	4a14      	ldr	r2, [pc, #80]	; (8007dc8 <TIM_OC6_SetConfig+0xc8>)
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	d109      	bne.n	8007d90 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007d7c:	697b      	ldr	r3, [r7, #20]
 8007d7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007d82:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	695b      	ldr	r3, [r3, #20]
 8007d88:	029b      	lsls	r3, r3, #10
 8007d8a:	697a      	ldr	r2, [r7, #20]
 8007d8c:	4313      	orrs	r3, r2
 8007d8e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	697a      	ldr	r2, [r7, #20]
 8007d94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	68fa      	ldr	r2, [r7, #12]
 8007d9a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	685a      	ldr	r2, [r3, #4]
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	693a      	ldr	r2, [r7, #16]
 8007da8:	621a      	str	r2, [r3, #32]
}
 8007daa:	bf00      	nop
 8007dac:	371c      	adds	r7, #28
 8007dae:	46bd      	mov	sp, r7
 8007db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db4:	4770      	bx	lr
 8007db6:	bf00      	nop
 8007db8:	40012c00 	.word	0x40012c00
 8007dbc:	40013400 	.word	0x40013400
 8007dc0:	40014000 	.word	0x40014000
 8007dc4:	40014400 	.word	0x40014400
 8007dc8:	40014800 	.word	0x40014800

08007dcc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007dcc:	b480      	push	{r7}
 8007dce:	b087      	sub	sp, #28
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	60f8      	str	r0, [r7, #12]
 8007dd4:	60b9      	str	r1, [r7, #8]
 8007dd6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	6a1b      	ldr	r3, [r3, #32]
 8007ddc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	6a1b      	ldr	r3, [r3, #32]
 8007de2:	f023 0201 	bic.w	r2, r3, #1
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	699b      	ldr	r3, [r3, #24]
 8007dee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007df0:	693b      	ldr	r3, [r7, #16]
 8007df2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007df6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	011b      	lsls	r3, r3, #4
 8007dfc:	693a      	ldr	r2, [r7, #16]
 8007dfe:	4313      	orrs	r3, r2
 8007e00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007e02:	697b      	ldr	r3, [r7, #20]
 8007e04:	f023 030a 	bic.w	r3, r3, #10
 8007e08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007e0a:	697a      	ldr	r2, [r7, #20]
 8007e0c:	68bb      	ldr	r3, [r7, #8]
 8007e0e:	4313      	orrs	r3, r2
 8007e10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	693a      	ldr	r2, [r7, #16]
 8007e16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	697a      	ldr	r2, [r7, #20]
 8007e1c:	621a      	str	r2, [r3, #32]
}
 8007e1e:	bf00      	nop
 8007e20:	371c      	adds	r7, #28
 8007e22:	46bd      	mov	sp, r7
 8007e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e28:	4770      	bx	lr

08007e2a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007e2a:	b480      	push	{r7}
 8007e2c:	b087      	sub	sp, #28
 8007e2e:	af00      	add	r7, sp, #0
 8007e30:	60f8      	str	r0, [r7, #12]
 8007e32:	60b9      	str	r1, [r7, #8]
 8007e34:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	6a1b      	ldr	r3, [r3, #32]
 8007e3a:	f023 0210 	bic.w	r2, r3, #16
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	699b      	ldr	r3, [r3, #24]
 8007e46:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	6a1b      	ldr	r3, [r3, #32]
 8007e4c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007e4e:	697b      	ldr	r3, [r7, #20]
 8007e50:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007e54:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	031b      	lsls	r3, r3, #12
 8007e5a:	697a      	ldr	r2, [r7, #20]
 8007e5c:	4313      	orrs	r3, r2
 8007e5e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007e60:	693b      	ldr	r3, [r7, #16]
 8007e62:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007e66:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007e68:	68bb      	ldr	r3, [r7, #8]
 8007e6a:	011b      	lsls	r3, r3, #4
 8007e6c:	693a      	ldr	r2, [r7, #16]
 8007e6e:	4313      	orrs	r3, r2
 8007e70:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	697a      	ldr	r2, [r7, #20]
 8007e76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	693a      	ldr	r2, [r7, #16]
 8007e7c:	621a      	str	r2, [r3, #32]
}
 8007e7e:	bf00      	nop
 8007e80:	371c      	adds	r7, #28
 8007e82:	46bd      	mov	sp, r7
 8007e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e88:	4770      	bx	lr

08007e8a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007e8a:	b480      	push	{r7}
 8007e8c:	b085      	sub	sp, #20
 8007e8e:	af00      	add	r7, sp, #0
 8007e90:	6078      	str	r0, [r7, #4]
 8007e92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	689b      	ldr	r3, [r3, #8]
 8007e98:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ea0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007ea2:	683a      	ldr	r2, [r7, #0]
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	4313      	orrs	r3, r2
 8007ea8:	f043 0307 	orr.w	r3, r3, #7
 8007eac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	68fa      	ldr	r2, [r7, #12]
 8007eb2:	609a      	str	r2, [r3, #8]
}
 8007eb4:	bf00      	nop
 8007eb6:	3714      	adds	r7, #20
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebe:	4770      	bx	lr

08007ec0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007ec0:	b480      	push	{r7}
 8007ec2:	b087      	sub	sp, #28
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	60f8      	str	r0, [r7, #12]
 8007ec8:	60b9      	str	r1, [r7, #8]
 8007eca:	607a      	str	r2, [r7, #4]
 8007ecc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	689b      	ldr	r3, [r3, #8]
 8007ed2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007ed4:	697b      	ldr	r3, [r7, #20]
 8007ed6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007eda:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	021a      	lsls	r2, r3, #8
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	431a      	orrs	r2, r3
 8007ee4:	68bb      	ldr	r3, [r7, #8]
 8007ee6:	4313      	orrs	r3, r2
 8007ee8:	697a      	ldr	r2, [r7, #20]
 8007eea:	4313      	orrs	r3, r2
 8007eec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	697a      	ldr	r2, [r7, #20]
 8007ef2:	609a      	str	r2, [r3, #8]
}
 8007ef4:	bf00      	nop
 8007ef6:	371c      	adds	r7, #28
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efe:	4770      	bx	lr

08007f00 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007f00:	b480      	push	{r7}
 8007f02:	b087      	sub	sp, #28
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	60f8      	str	r0, [r7, #12]
 8007f08:	60b9      	str	r1, [r7, #8]
 8007f0a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007f0c:	68bb      	ldr	r3, [r7, #8]
 8007f0e:	f003 031f 	and.w	r3, r3, #31
 8007f12:	2201      	movs	r2, #1
 8007f14:	fa02 f303 	lsl.w	r3, r2, r3
 8007f18:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	6a1a      	ldr	r2, [r3, #32]
 8007f1e:	697b      	ldr	r3, [r7, #20]
 8007f20:	43db      	mvns	r3, r3
 8007f22:	401a      	ands	r2, r3
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	6a1a      	ldr	r2, [r3, #32]
 8007f2c:	68bb      	ldr	r3, [r7, #8]
 8007f2e:	f003 031f 	and.w	r3, r3, #31
 8007f32:	6879      	ldr	r1, [r7, #4]
 8007f34:	fa01 f303 	lsl.w	r3, r1, r3
 8007f38:	431a      	orrs	r2, r3
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	621a      	str	r2, [r3, #32]
}
 8007f3e:	bf00      	nop
 8007f40:	371c      	adds	r7, #28
 8007f42:	46bd      	mov	sp, r7
 8007f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f48:	4770      	bx	lr
	...

08007f4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007f4c:	b480      	push	{r7}
 8007f4e:	b085      	sub	sp, #20
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
 8007f54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f5c:	2b01      	cmp	r3, #1
 8007f5e:	d101      	bne.n	8007f64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007f60:	2302      	movs	r3, #2
 8007f62:	e068      	b.n	8008036 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2201      	movs	r2, #1
 8007f68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2202      	movs	r2, #2
 8007f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	685b      	ldr	r3, [r3, #4]
 8007f7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	689b      	ldr	r3, [r3, #8]
 8007f82:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	4a2e      	ldr	r2, [pc, #184]	; (8008044 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007f8a:	4293      	cmp	r3, r2
 8007f8c:	d004      	beq.n	8007f98 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	4a2d      	ldr	r2, [pc, #180]	; (8008048 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007f94:	4293      	cmp	r3, r2
 8007f96:	d108      	bne.n	8007faa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007f9e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	685b      	ldr	r3, [r3, #4]
 8007fa4:	68fa      	ldr	r2, [r7, #12]
 8007fa6:	4313      	orrs	r3, r2
 8007fa8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fb0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	68fa      	ldr	r2, [r7, #12]
 8007fb8:	4313      	orrs	r3, r2
 8007fba:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	68fa      	ldr	r2, [r7, #12]
 8007fc2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	4a1e      	ldr	r2, [pc, #120]	; (8008044 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007fca:	4293      	cmp	r3, r2
 8007fcc:	d01d      	beq.n	800800a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fd6:	d018      	beq.n	800800a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	4a1b      	ldr	r2, [pc, #108]	; (800804c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007fde:	4293      	cmp	r3, r2
 8007fe0:	d013      	beq.n	800800a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	4a1a      	ldr	r2, [pc, #104]	; (8008050 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007fe8:	4293      	cmp	r3, r2
 8007fea:	d00e      	beq.n	800800a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	4a18      	ldr	r2, [pc, #96]	; (8008054 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	d009      	beq.n	800800a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	4a13      	ldr	r2, [pc, #76]	; (8008048 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007ffc:	4293      	cmp	r3, r2
 8007ffe:	d004      	beq.n	800800a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	4a14      	ldr	r2, [pc, #80]	; (8008058 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008006:	4293      	cmp	r3, r2
 8008008:	d10c      	bne.n	8008024 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800800a:	68bb      	ldr	r3, [r7, #8]
 800800c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008010:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	689b      	ldr	r3, [r3, #8]
 8008016:	68ba      	ldr	r2, [r7, #8]
 8008018:	4313      	orrs	r3, r2
 800801a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	68ba      	ldr	r2, [r7, #8]
 8008022:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2201      	movs	r2, #1
 8008028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2200      	movs	r2, #0
 8008030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008034:	2300      	movs	r3, #0
}
 8008036:	4618      	mov	r0, r3
 8008038:	3714      	adds	r7, #20
 800803a:	46bd      	mov	sp, r7
 800803c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008040:	4770      	bx	lr
 8008042:	bf00      	nop
 8008044:	40012c00 	.word	0x40012c00
 8008048:	40013400 	.word	0x40013400
 800804c:	40000400 	.word	0x40000400
 8008050:	40000800 	.word	0x40000800
 8008054:	40000c00 	.word	0x40000c00
 8008058:	40014000 	.word	0x40014000

0800805c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b082      	sub	sp, #8
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d101      	bne.n	800806e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800806a:	2301      	movs	r3, #1
 800806c:	e040      	b.n	80080f0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008072:	2b00      	cmp	r3, #0
 8008074:	d106      	bne.n	8008084 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2200      	movs	r2, #0
 800807a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	f7fa f9bc 	bl	80023fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2224      	movs	r2, #36	; 0x24
 8008088:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	681a      	ldr	r2, [r3, #0]
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f022 0201 	bic.w	r2, r2, #1
 8008098:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	f000 fbe8 	bl	8008870 <UART_SetConfig>
 80080a0:	4603      	mov	r3, r0
 80080a2:	2b01      	cmp	r3, #1
 80080a4:	d101      	bne.n	80080aa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80080a6:	2301      	movs	r3, #1
 80080a8:	e022      	b.n	80080f0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d002      	beq.n	80080b8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	f000 fe66 	bl	8008d84 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	685a      	ldr	r2, [r3, #4]
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80080c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	689a      	ldr	r2, [r3, #8]
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80080d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	681a      	ldr	r2, [r3, #0]
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	f042 0201 	orr.w	r2, r2, #1
 80080e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80080e8:	6878      	ldr	r0, [r7, #4]
 80080ea:	f000 feed 	bl	8008ec8 <UART_CheckIdleState>
 80080ee:	4603      	mov	r3, r0
}
 80080f0:	4618      	mov	r0, r3
 80080f2:	3708      	adds	r7, #8
 80080f4:	46bd      	mov	sp, r7
 80080f6:	bd80      	pop	{r7, pc}

080080f8 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80080f8:	b480      	push	{r7}
 80080fa:	b08b      	sub	sp, #44	; 0x2c
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	60f8      	str	r0, [r7, #12]
 8008100:	60b9      	str	r1, [r7, #8]
 8008102:	4613      	mov	r3, r2
 8008104:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800810a:	2b20      	cmp	r3, #32
 800810c:	d156      	bne.n	80081bc <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 800810e:	68bb      	ldr	r3, [r7, #8]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d002      	beq.n	800811a <HAL_UART_Transmit_IT+0x22>
 8008114:	88fb      	ldrh	r3, [r7, #6]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d101      	bne.n	800811e <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800811a:	2301      	movs	r3, #1
 800811c:	e04f      	b.n	80081be <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008124:	2b01      	cmp	r3, #1
 8008126:	d101      	bne.n	800812c <HAL_UART_Transmit_IT+0x34>
 8008128:	2302      	movs	r3, #2
 800812a:	e048      	b.n	80081be <HAL_UART_Transmit_IT+0xc6>
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	2201      	movs	r2, #1
 8008130:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	68ba      	ldr	r2, [r7, #8]
 8008138:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	88fa      	ldrh	r2, [r7, #6]
 800813e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	88fa      	ldrh	r2, [r7, #6]
 8008146:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	2200      	movs	r2, #0
 800814e:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	2200      	movs	r2, #0
 8008154:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	2221      	movs	r2, #33	; 0x21
 800815c:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	689b      	ldr	r3, [r3, #8]
 8008162:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008166:	d107      	bne.n	8008178 <HAL_UART_Transmit_IT+0x80>
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	691b      	ldr	r3, [r3, #16]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d103      	bne.n	8008178 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	4a16      	ldr	r2, [pc, #88]	; (80081cc <HAL_UART_Transmit_IT+0xd4>)
 8008174:	669a      	str	r2, [r3, #104]	; 0x68
 8008176:	e002      	b.n	800817e <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	4a15      	ldr	r2, [pc, #84]	; (80081d0 <HAL_UART_Transmit_IT+0xd8>)
 800817c:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	2200      	movs	r2, #0
 8008182:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800818c:	697b      	ldr	r3, [r7, #20]
 800818e:	e853 3f00 	ldrex	r3, [r3]
 8008192:	613b      	str	r3, [r7, #16]
   return(result);
 8008194:	693b      	ldr	r3, [r7, #16]
 8008196:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800819a:	627b      	str	r3, [r7, #36]	; 0x24
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	461a      	mov	r2, r3
 80081a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081a4:	623b      	str	r3, [r7, #32]
 80081a6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081a8:	69f9      	ldr	r1, [r7, #28]
 80081aa:	6a3a      	ldr	r2, [r7, #32]
 80081ac:	e841 2300 	strex	r3, r2, [r1]
 80081b0:	61bb      	str	r3, [r7, #24]
   return(result);
 80081b2:	69bb      	ldr	r3, [r7, #24]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d1e6      	bne.n	8008186 <HAL_UART_Transmit_IT+0x8e>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 80081b8:	2300      	movs	r3, #0
 80081ba:	e000      	b.n	80081be <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 80081bc:	2302      	movs	r3, #2
  }
}
 80081be:	4618      	mov	r0, r3
 80081c0:	372c      	adds	r7, #44	; 0x2c
 80081c2:	46bd      	mov	sp, r7
 80081c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c8:	4770      	bx	lr
 80081ca:	bf00      	nop
 80081cc:	08009423 	.word	0x08009423
 80081d0:	0800936b 	.word	0x0800936b

080081d4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b08a      	sub	sp, #40	; 0x28
 80081d8:	af00      	add	r7, sp, #0
 80081da:	60f8      	str	r0, [r7, #12]
 80081dc:	60b9      	str	r1, [r7, #8]
 80081de:	4613      	mov	r3, r2
 80081e0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80081e6:	2b20      	cmp	r3, #32
 80081e8:	d142      	bne.n	8008270 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80081ea:	68bb      	ldr	r3, [r7, #8]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d002      	beq.n	80081f6 <HAL_UART_Receive_IT+0x22>
 80081f0:	88fb      	ldrh	r3, [r7, #6]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d101      	bne.n	80081fa <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80081f6:	2301      	movs	r3, #1
 80081f8:	e03b      	b.n	8008272 <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008200:	2b01      	cmp	r3, #1
 8008202:	d101      	bne.n	8008208 <HAL_UART_Receive_IT+0x34>
 8008204:	2302      	movs	r3, #2
 8008206:	e034      	b.n	8008272 <HAL_UART_Receive_IT+0x9e>
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	2201      	movs	r2, #1
 800820c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	2200      	movs	r2, #0
 8008214:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	4a18      	ldr	r2, [pc, #96]	; (800827c <HAL_UART_Receive_IT+0xa8>)
 800821c:	4293      	cmp	r3, r2
 800821e:	d01f      	beq.n	8008260 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	685b      	ldr	r3, [r3, #4]
 8008226:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800822a:	2b00      	cmp	r3, #0
 800822c:	d018      	beq.n	8008260 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008234:	697b      	ldr	r3, [r7, #20]
 8008236:	e853 3f00 	ldrex	r3, [r3]
 800823a:	613b      	str	r3, [r7, #16]
   return(result);
 800823c:	693b      	ldr	r3, [r7, #16]
 800823e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008242:	627b      	str	r3, [r7, #36]	; 0x24
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	461a      	mov	r2, r3
 800824a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800824c:	623b      	str	r3, [r7, #32]
 800824e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008250:	69f9      	ldr	r1, [r7, #28]
 8008252:	6a3a      	ldr	r2, [r7, #32]
 8008254:	e841 2300 	strex	r3, r2, [r1]
 8008258:	61bb      	str	r3, [r7, #24]
   return(result);
 800825a:	69bb      	ldr	r3, [r7, #24]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d1e6      	bne.n	800822e <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008260:	88fb      	ldrh	r3, [r7, #6]
 8008262:	461a      	mov	r2, r3
 8008264:	68b9      	ldr	r1, [r7, #8]
 8008266:	68f8      	ldr	r0, [r7, #12]
 8008268:	f000 ff3c 	bl	80090e4 <UART_Start_Receive_IT>
 800826c:	4603      	mov	r3, r0
 800826e:	e000      	b.n	8008272 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8008270:	2302      	movs	r3, #2
  }
}
 8008272:	4618      	mov	r0, r3
 8008274:	3728      	adds	r7, #40	; 0x28
 8008276:	46bd      	mov	sp, r7
 8008278:	bd80      	pop	{r7, pc}
 800827a:	bf00      	nop
 800827c:	40008000 	.word	0x40008000

08008280 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b0ba      	sub	sp, #232	; 0xe8
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	69db      	ldr	r3, [r3, #28]
 800828e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	689b      	ldr	r3, [r3, #8]
 80082a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80082a6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80082aa:	f640 030f 	movw	r3, #2063	; 0x80f
 80082ae:	4013      	ands	r3, r2
 80082b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80082b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d115      	bne.n	80082e8 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80082bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082c0:	f003 0320 	and.w	r3, r3, #32
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d00f      	beq.n	80082e8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80082c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80082cc:	f003 0320 	and.w	r3, r3, #32
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d009      	beq.n	80082e8 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80082d8:	2b00      	cmp	r3, #0
 80082da:	f000 82a6 	beq.w	800882a <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80082e2:	6878      	ldr	r0, [r7, #4]
 80082e4:	4798      	blx	r3
      }
      return;
 80082e6:	e2a0      	b.n	800882a <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80082e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	f000 8117 	beq.w	8008520 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80082f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80082f6:	f003 0301 	and.w	r3, r3, #1
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d106      	bne.n	800830c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80082fe:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8008302:	4b85      	ldr	r3, [pc, #532]	; (8008518 <HAL_UART_IRQHandler+0x298>)
 8008304:	4013      	ands	r3, r2
 8008306:	2b00      	cmp	r3, #0
 8008308:	f000 810a 	beq.w	8008520 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800830c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008310:	f003 0301 	and.w	r3, r3, #1
 8008314:	2b00      	cmp	r3, #0
 8008316:	d011      	beq.n	800833c <HAL_UART_IRQHandler+0xbc>
 8008318:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800831c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008320:	2b00      	cmp	r3, #0
 8008322:	d00b      	beq.n	800833c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	2201      	movs	r2, #1
 800832a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008332:	f043 0201 	orr.w	r2, r3, #1
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800833c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008340:	f003 0302 	and.w	r3, r3, #2
 8008344:	2b00      	cmp	r3, #0
 8008346:	d011      	beq.n	800836c <HAL_UART_IRQHandler+0xec>
 8008348:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800834c:	f003 0301 	and.w	r3, r3, #1
 8008350:	2b00      	cmp	r3, #0
 8008352:	d00b      	beq.n	800836c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	2202      	movs	r2, #2
 800835a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008362:	f043 0204 	orr.w	r2, r3, #4
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800836c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008370:	f003 0304 	and.w	r3, r3, #4
 8008374:	2b00      	cmp	r3, #0
 8008376:	d011      	beq.n	800839c <HAL_UART_IRQHandler+0x11c>
 8008378:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800837c:	f003 0301 	and.w	r3, r3, #1
 8008380:	2b00      	cmp	r3, #0
 8008382:	d00b      	beq.n	800839c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	2204      	movs	r2, #4
 800838a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008392:	f043 0202 	orr.w	r2, r3, #2
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800839c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083a0:	f003 0308 	and.w	r3, r3, #8
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d017      	beq.n	80083d8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80083a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80083ac:	f003 0320 	and.w	r3, r3, #32
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d105      	bne.n	80083c0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80083b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80083b8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d00b      	beq.n	80083d8 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	2208      	movs	r2, #8
 80083c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80083ce:	f043 0208 	orr.w	r2, r3, #8
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80083d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d012      	beq.n	800840a <HAL_UART_IRQHandler+0x18a>
 80083e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80083e8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d00c      	beq.n	800840a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80083f8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008400:	f043 0220 	orr.w	r2, r3, #32
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008410:	2b00      	cmp	r3, #0
 8008412:	f000 820c 	beq.w	800882e <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8008416:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800841a:	f003 0320 	and.w	r3, r3, #32
 800841e:	2b00      	cmp	r3, #0
 8008420:	d00d      	beq.n	800843e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008422:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008426:	f003 0320 	and.w	r3, r3, #32
 800842a:	2b00      	cmp	r3, #0
 800842c:	d007      	beq.n	800843e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008432:	2b00      	cmp	r3, #0
 8008434:	d003      	beq.n	800843e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800843a:	6878      	ldr	r0, [r7, #4]
 800843c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008444:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	689b      	ldr	r3, [r3, #8]
 800844e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008452:	2b40      	cmp	r3, #64	; 0x40
 8008454:	d005      	beq.n	8008462 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008456:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800845a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800845e:	2b00      	cmp	r3, #0
 8008460:	d04f      	beq.n	8008502 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008462:	6878      	ldr	r0, [r7, #4]
 8008464:	f000 ff08 	bl	8009278 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	689b      	ldr	r3, [r3, #8]
 800846e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008472:	2b40      	cmp	r3, #64	; 0x40
 8008474:	d141      	bne.n	80084fa <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	3308      	adds	r3, #8
 800847c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008480:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008484:	e853 3f00 	ldrex	r3, [r3]
 8008488:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800848c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008490:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008494:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	3308      	adds	r3, #8
 800849e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80084a2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80084a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80084ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80084b2:	e841 2300 	strex	r3, r2, [r1]
 80084b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80084ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d1d9      	bne.n	8008476 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d013      	beq.n	80084f2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084ce:	4a13      	ldr	r2, [pc, #76]	; (800851c <HAL_UART_IRQHandler+0x29c>)
 80084d0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084d6:	4618      	mov	r0, r3
 80084d8:	f7fb fe74 	bl	80041c4 <HAL_DMA_Abort_IT>
 80084dc:	4603      	mov	r3, r0
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d017      	beq.n	8008512 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084e8:	687a      	ldr	r2, [r7, #4]
 80084ea:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80084ec:	4610      	mov	r0, r2
 80084ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084f0:	e00f      	b.n	8008512 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80084f2:	6878      	ldr	r0, [r7, #4]
 80084f4:	f000 f9a6 	bl	8008844 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084f8:	e00b      	b.n	8008512 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80084fa:	6878      	ldr	r0, [r7, #4]
 80084fc:	f000 f9a2 	bl	8008844 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008500:	e007      	b.n	8008512 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008502:	6878      	ldr	r0, [r7, #4]
 8008504:	f000 f99e 	bl	8008844 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2200      	movs	r2, #0
 800850c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8008510:	e18d      	b.n	800882e <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008512:	bf00      	nop
    return;
 8008514:	e18b      	b.n	800882e <HAL_UART_IRQHandler+0x5ae>
 8008516:	bf00      	nop
 8008518:	04000120 	.word	0x04000120
 800851c:	0800933f 	.word	0x0800933f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008524:	2b01      	cmp	r3, #1
 8008526:	f040 8146 	bne.w	80087b6 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800852a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800852e:	f003 0310 	and.w	r3, r3, #16
 8008532:	2b00      	cmp	r3, #0
 8008534:	f000 813f 	beq.w	80087b6 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008538:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800853c:	f003 0310 	and.w	r3, r3, #16
 8008540:	2b00      	cmp	r3, #0
 8008542:	f000 8138 	beq.w	80087b6 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	2210      	movs	r2, #16
 800854c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	689b      	ldr	r3, [r3, #8]
 8008554:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008558:	2b40      	cmp	r3, #64	; 0x40
 800855a:	f040 80b4 	bne.w	80086c6 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	685b      	ldr	r3, [r3, #4]
 8008566:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800856a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800856e:	2b00      	cmp	r3, #0
 8008570:	f000 815f 	beq.w	8008832 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800857a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800857e:	429a      	cmp	r2, r3
 8008580:	f080 8157 	bcs.w	8008832 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800858a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	f003 0320 	and.w	r3, r3, #32
 800859a:	2b00      	cmp	r3, #0
 800859c:	f040 8085 	bne.w	80086aa <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80085ac:	e853 3f00 	ldrex	r3, [r3]
 80085b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80085b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80085b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80085bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	461a      	mov	r2, r3
 80085c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80085ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80085ce:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085d2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80085d6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80085da:	e841 2300 	strex	r3, r2, [r1]
 80085de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80085e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d1da      	bne.n	80085a0 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	3308      	adds	r3, #8
 80085f0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80085f4:	e853 3f00 	ldrex	r3, [r3]
 80085f8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80085fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80085fc:	f023 0301 	bic.w	r3, r3, #1
 8008600:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	3308      	adds	r3, #8
 800860a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800860e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008612:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008614:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008616:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800861a:	e841 2300 	strex	r3, r2, [r1]
 800861e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008620:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008622:	2b00      	cmp	r3, #0
 8008624:	d1e1      	bne.n	80085ea <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	3308      	adds	r3, #8
 800862c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800862e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008630:	e853 3f00 	ldrex	r3, [r3]
 8008634:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008636:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008638:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800863c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	3308      	adds	r3, #8
 8008646:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800864a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800864c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800864e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008650:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008652:	e841 2300 	strex	r3, r2, [r1]
 8008656:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008658:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800865a:	2b00      	cmp	r3, #0
 800865c:	d1e3      	bne.n	8008626 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	2220      	movs	r2, #32
 8008662:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2200      	movs	r2, #0
 8008668:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008670:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008672:	e853 3f00 	ldrex	r3, [r3]
 8008676:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008678:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800867a:	f023 0310 	bic.w	r3, r3, #16
 800867e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	461a      	mov	r2, r3
 8008688:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800868c:	65bb      	str	r3, [r7, #88]	; 0x58
 800868e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008690:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008692:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008694:	e841 2300 	strex	r3, r2, [r1]
 8008698:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800869a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800869c:	2b00      	cmp	r3, #0
 800869e:	d1e4      	bne.n	800866a <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086a4:	4618      	mov	r0, r3
 80086a6:	f7fb fd4f 	bl	8004148 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80086b6:	b29b      	uxth	r3, r3
 80086b8:	1ad3      	subs	r3, r2, r3
 80086ba:	b29b      	uxth	r3, r3
 80086bc:	4619      	mov	r1, r3
 80086be:	6878      	ldr	r0, [r7, #4]
 80086c0:	f000 f8ca 	bl	8008858 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80086c4:	e0b5      	b.n	8008832 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80086d2:	b29b      	uxth	r3, r3
 80086d4:	1ad3      	subs	r3, r2, r3
 80086d6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80086e0:	b29b      	uxth	r3, r3
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	f000 80a7 	beq.w	8008836 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 80086e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	f000 80a2 	beq.w	8008836 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086fa:	e853 3f00 	ldrex	r3, [r3]
 80086fe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008702:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008706:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	461a      	mov	r2, r3
 8008710:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008714:	647b      	str	r3, [r7, #68]	; 0x44
 8008716:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008718:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800871a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800871c:	e841 2300 	strex	r3, r2, [r1]
 8008720:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008722:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008724:	2b00      	cmp	r3, #0
 8008726:	d1e4      	bne.n	80086f2 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	3308      	adds	r3, #8
 800872e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008732:	e853 3f00 	ldrex	r3, [r3]
 8008736:	623b      	str	r3, [r7, #32]
   return(result);
 8008738:	6a3b      	ldr	r3, [r7, #32]
 800873a:	f023 0301 	bic.w	r3, r3, #1
 800873e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	3308      	adds	r3, #8
 8008748:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800874c:	633a      	str	r2, [r7, #48]	; 0x30
 800874e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008750:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008752:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008754:	e841 2300 	strex	r3, r2, [r1]
 8008758:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800875a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800875c:	2b00      	cmp	r3, #0
 800875e:	d1e3      	bne.n	8008728 <HAL_UART_IRQHandler+0x4a8>
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	2220      	movs	r2, #32
 8008764:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	2200      	movs	r2, #0
 800876a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2200      	movs	r2, #0
 8008770:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008778:	693b      	ldr	r3, [r7, #16]
 800877a:	e853 3f00 	ldrex	r3, [r3]
 800877e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	f023 0310 	bic.w	r3, r3, #16
 8008786:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	461a      	mov	r2, r3
 8008790:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008794:	61fb      	str	r3, [r7, #28]
 8008796:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008798:	69b9      	ldr	r1, [r7, #24]
 800879a:	69fa      	ldr	r2, [r7, #28]
 800879c:	e841 2300 	strex	r3, r2, [r1]
 80087a0:	617b      	str	r3, [r7, #20]
   return(result);
 80087a2:	697b      	ldr	r3, [r7, #20]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d1e4      	bne.n	8008772 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80087a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80087ac:	4619      	mov	r1, r3
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f000 f852 	bl	8008858 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80087b4:	e03f      	b.n	8008836 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80087b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d00e      	beq.n	80087e0 <HAL_UART_IRQHandler+0x560>
 80087c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80087c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d008      	beq.n	80087e0 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80087d6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80087d8:	6878      	ldr	r0, [r7, #4]
 80087da:	f001 f80c 	bl	80097f6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80087de:	e02d      	b.n	800883c <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80087e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d00e      	beq.n	800880a <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80087ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80087f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d008      	beq.n	800880a <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d01c      	beq.n	800883a <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008804:	6878      	ldr	r0, [r7, #4]
 8008806:	4798      	blx	r3
    }
    return;
 8008808:	e017      	b.n	800883a <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800880a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800880e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008812:	2b00      	cmp	r3, #0
 8008814:	d012      	beq.n	800883c <HAL_UART_IRQHandler+0x5bc>
 8008816:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800881a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800881e:	2b00      	cmp	r3, #0
 8008820:	d00c      	beq.n	800883c <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8008822:	6878      	ldr	r0, [r7, #4]
 8008824:	f000 fe5d 	bl	80094e2 <UART_EndTransmit_IT>
    return;
 8008828:	e008      	b.n	800883c <HAL_UART_IRQHandler+0x5bc>
      return;
 800882a:	bf00      	nop
 800882c:	e006      	b.n	800883c <HAL_UART_IRQHandler+0x5bc>
    return;
 800882e:	bf00      	nop
 8008830:	e004      	b.n	800883c <HAL_UART_IRQHandler+0x5bc>
      return;
 8008832:	bf00      	nop
 8008834:	e002      	b.n	800883c <HAL_UART_IRQHandler+0x5bc>
      return;
 8008836:	bf00      	nop
 8008838:	e000      	b.n	800883c <HAL_UART_IRQHandler+0x5bc>
    return;
 800883a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800883c:	37e8      	adds	r7, #232	; 0xe8
 800883e:	46bd      	mov	sp, r7
 8008840:	bd80      	pop	{r7, pc}
 8008842:	bf00      	nop

08008844 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008844:	b480      	push	{r7}
 8008846:	b083      	sub	sp, #12
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800884c:	bf00      	nop
 800884e:	370c      	adds	r7, #12
 8008850:	46bd      	mov	sp, r7
 8008852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008856:	4770      	bx	lr

08008858 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008858:	b480      	push	{r7}
 800885a:	b083      	sub	sp, #12
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
 8008860:	460b      	mov	r3, r1
 8008862:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008864:	bf00      	nop
 8008866:	370c      	adds	r7, #12
 8008868:	46bd      	mov	sp, r7
 800886a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886e:	4770      	bx	lr

08008870 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008870:	b5b0      	push	{r4, r5, r7, lr}
 8008872:	b088      	sub	sp, #32
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008878:	2300      	movs	r3, #0
 800887a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	689a      	ldr	r2, [r3, #8]
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	691b      	ldr	r3, [r3, #16]
 8008884:	431a      	orrs	r2, r3
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	695b      	ldr	r3, [r3, #20]
 800888a:	431a      	orrs	r2, r3
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	69db      	ldr	r3, [r3, #28]
 8008890:	4313      	orrs	r3, r2
 8008892:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	681a      	ldr	r2, [r3, #0]
 800889a:	4bad      	ldr	r3, [pc, #692]	; (8008b50 <UART_SetConfig+0x2e0>)
 800889c:	4013      	ands	r3, r2
 800889e:	687a      	ldr	r2, [r7, #4]
 80088a0:	6812      	ldr	r2, [r2, #0]
 80088a2:	69f9      	ldr	r1, [r7, #28]
 80088a4:	430b      	orrs	r3, r1
 80088a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	685b      	ldr	r3, [r3, #4]
 80088ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	68da      	ldr	r2, [r3, #12]
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	430a      	orrs	r2, r1
 80088bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	699b      	ldr	r3, [r3, #24]
 80088c2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	4aa2      	ldr	r2, [pc, #648]	; (8008b54 <UART_SetConfig+0x2e4>)
 80088ca:	4293      	cmp	r3, r2
 80088cc:	d004      	beq.n	80088d8 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	6a1b      	ldr	r3, [r3, #32]
 80088d2:	69fa      	ldr	r2, [r7, #28]
 80088d4:	4313      	orrs	r3, r2
 80088d6:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	689b      	ldr	r3, [r3, #8]
 80088de:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	69fa      	ldr	r2, [r7, #28]
 80088e8:	430a      	orrs	r2, r1
 80088ea:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	4a99      	ldr	r2, [pc, #612]	; (8008b58 <UART_SetConfig+0x2e8>)
 80088f2:	4293      	cmp	r3, r2
 80088f4:	d121      	bne.n	800893a <UART_SetConfig+0xca>
 80088f6:	4b99      	ldr	r3, [pc, #612]	; (8008b5c <UART_SetConfig+0x2ec>)
 80088f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088fc:	f003 0303 	and.w	r3, r3, #3
 8008900:	2b03      	cmp	r3, #3
 8008902:	d817      	bhi.n	8008934 <UART_SetConfig+0xc4>
 8008904:	a201      	add	r2, pc, #4	; (adr r2, 800890c <UART_SetConfig+0x9c>)
 8008906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800890a:	bf00      	nop
 800890c:	0800891d 	.word	0x0800891d
 8008910:	08008929 	.word	0x08008929
 8008914:	08008923 	.word	0x08008923
 8008918:	0800892f 	.word	0x0800892f
 800891c:	2301      	movs	r3, #1
 800891e:	76fb      	strb	r3, [r7, #27]
 8008920:	e0e7      	b.n	8008af2 <UART_SetConfig+0x282>
 8008922:	2302      	movs	r3, #2
 8008924:	76fb      	strb	r3, [r7, #27]
 8008926:	e0e4      	b.n	8008af2 <UART_SetConfig+0x282>
 8008928:	2304      	movs	r3, #4
 800892a:	76fb      	strb	r3, [r7, #27]
 800892c:	e0e1      	b.n	8008af2 <UART_SetConfig+0x282>
 800892e:	2308      	movs	r3, #8
 8008930:	76fb      	strb	r3, [r7, #27]
 8008932:	e0de      	b.n	8008af2 <UART_SetConfig+0x282>
 8008934:	2310      	movs	r3, #16
 8008936:	76fb      	strb	r3, [r7, #27]
 8008938:	e0db      	b.n	8008af2 <UART_SetConfig+0x282>
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	4a88      	ldr	r2, [pc, #544]	; (8008b60 <UART_SetConfig+0x2f0>)
 8008940:	4293      	cmp	r3, r2
 8008942:	d132      	bne.n	80089aa <UART_SetConfig+0x13a>
 8008944:	4b85      	ldr	r3, [pc, #532]	; (8008b5c <UART_SetConfig+0x2ec>)
 8008946:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800894a:	f003 030c 	and.w	r3, r3, #12
 800894e:	2b0c      	cmp	r3, #12
 8008950:	d828      	bhi.n	80089a4 <UART_SetConfig+0x134>
 8008952:	a201      	add	r2, pc, #4	; (adr r2, 8008958 <UART_SetConfig+0xe8>)
 8008954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008958:	0800898d 	.word	0x0800898d
 800895c:	080089a5 	.word	0x080089a5
 8008960:	080089a5 	.word	0x080089a5
 8008964:	080089a5 	.word	0x080089a5
 8008968:	08008999 	.word	0x08008999
 800896c:	080089a5 	.word	0x080089a5
 8008970:	080089a5 	.word	0x080089a5
 8008974:	080089a5 	.word	0x080089a5
 8008978:	08008993 	.word	0x08008993
 800897c:	080089a5 	.word	0x080089a5
 8008980:	080089a5 	.word	0x080089a5
 8008984:	080089a5 	.word	0x080089a5
 8008988:	0800899f 	.word	0x0800899f
 800898c:	2300      	movs	r3, #0
 800898e:	76fb      	strb	r3, [r7, #27]
 8008990:	e0af      	b.n	8008af2 <UART_SetConfig+0x282>
 8008992:	2302      	movs	r3, #2
 8008994:	76fb      	strb	r3, [r7, #27]
 8008996:	e0ac      	b.n	8008af2 <UART_SetConfig+0x282>
 8008998:	2304      	movs	r3, #4
 800899a:	76fb      	strb	r3, [r7, #27]
 800899c:	e0a9      	b.n	8008af2 <UART_SetConfig+0x282>
 800899e:	2308      	movs	r3, #8
 80089a0:	76fb      	strb	r3, [r7, #27]
 80089a2:	e0a6      	b.n	8008af2 <UART_SetConfig+0x282>
 80089a4:	2310      	movs	r3, #16
 80089a6:	76fb      	strb	r3, [r7, #27]
 80089a8:	e0a3      	b.n	8008af2 <UART_SetConfig+0x282>
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	4a6d      	ldr	r2, [pc, #436]	; (8008b64 <UART_SetConfig+0x2f4>)
 80089b0:	4293      	cmp	r3, r2
 80089b2:	d120      	bne.n	80089f6 <UART_SetConfig+0x186>
 80089b4:	4b69      	ldr	r3, [pc, #420]	; (8008b5c <UART_SetConfig+0x2ec>)
 80089b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089ba:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80089be:	2b30      	cmp	r3, #48	; 0x30
 80089c0:	d013      	beq.n	80089ea <UART_SetConfig+0x17a>
 80089c2:	2b30      	cmp	r3, #48	; 0x30
 80089c4:	d814      	bhi.n	80089f0 <UART_SetConfig+0x180>
 80089c6:	2b20      	cmp	r3, #32
 80089c8:	d009      	beq.n	80089de <UART_SetConfig+0x16e>
 80089ca:	2b20      	cmp	r3, #32
 80089cc:	d810      	bhi.n	80089f0 <UART_SetConfig+0x180>
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d002      	beq.n	80089d8 <UART_SetConfig+0x168>
 80089d2:	2b10      	cmp	r3, #16
 80089d4:	d006      	beq.n	80089e4 <UART_SetConfig+0x174>
 80089d6:	e00b      	b.n	80089f0 <UART_SetConfig+0x180>
 80089d8:	2300      	movs	r3, #0
 80089da:	76fb      	strb	r3, [r7, #27]
 80089dc:	e089      	b.n	8008af2 <UART_SetConfig+0x282>
 80089de:	2302      	movs	r3, #2
 80089e0:	76fb      	strb	r3, [r7, #27]
 80089e2:	e086      	b.n	8008af2 <UART_SetConfig+0x282>
 80089e4:	2304      	movs	r3, #4
 80089e6:	76fb      	strb	r3, [r7, #27]
 80089e8:	e083      	b.n	8008af2 <UART_SetConfig+0x282>
 80089ea:	2308      	movs	r3, #8
 80089ec:	76fb      	strb	r3, [r7, #27]
 80089ee:	e080      	b.n	8008af2 <UART_SetConfig+0x282>
 80089f0:	2310      	movs	r3, #16
 80089f2:	76fb      	strb	r3, [r7, #27]
 80089f4:	e07d      	b.n	8008af2 <UART_SetConfig+0x282>
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	4a5b      	ldr	r2, [pc, #364]	; (8008b68 <UART_SetConfig+0x2f8>)
 80089fc:	4293      	cmp	r3, r2
 80089fe:	d120      	bne.n	8008a42 <UART_SetConfig+0x1d2>
 8008a00:	4b56      	ldr	r3, [pc, #344]	; (8008b5c <UART_SetConfig+0x2ec>)
 8008a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a06:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008a0a:	2bc0      	cmp	r3, #192	; 0xc0
 8008a0c:	d013      	beq.n	8008a36 <UART_SetConfig+0x1c6>
 8008a0e:	2bc0      	cmp	r3, #192	; 0xc0
 8008a10:	d814      	bhi.n	8008a3c <UART_SetConfig+0x1cc>
 8008a12:	2b80      	cmp	r3, #128	; 0x80
 8008a14:	d009      	beq.n	8008a2a <UART_SetConfig+0x1ba>
 8008a16:	2b80      	cmp	r3, #128	; 0x80
 8008a18:	d810      	bhi.n	8008a3c <UART_SetConfig+0x1cc>
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d002      	beq.n	8008a24 <UART_SetConfig+0x1b4>
 8008a1e:	2b40      	cmp	r3, #64	; 0x40
 8008a20:	d006      	beq.n	8008a30 <UART_SetConfig+0x1c0>
 8008a22:	e00b      	b.n	8008a3c <UART_SetConfig+0x1cc>
 8008a24:	2300      	movs	r3, #0
 8008a26:	76fb      	strb	r3, [r7, #27]
 8008a28:	e063      	b.n	8008af2 <UART_SetConfig+0x282>
 8008a2a:	2302      	movs	r3, #2
 8008a2c:	76fb      	strb	r3, [r7, #27]
 8008a2e:	e060      	b.n	8008af2 <UART_SetConfig+0x282>
 8008a30:	2304      	movs	r3, #4
 8008a32:	76fb      	strb	r3, [r7, #27]
 8008a34:	e05d      	b.n	8008af2 <UART_SetConfig+0x282>
 8008a36:	2308      	movs	r3, #8
 8008a38:	76fb      	strb	r3, [r7, #27]
 8008a3a:	e05a      	b.n	8008af2 <UART_SetConfig+0x282>
 8008a3c:	2310      	movs	r3, #16
 8008a3e:	76fb      	strb	r3, [r7, #27]
 8008a40:	e057      	b.n	8008af2 <UART_SetConfig+0x282>
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	4a49      	ldr	r2, [pc, #292]	; (8008b6c <UART_SetConfig+0x2fc>)
 8008a48:	4293      	cmp	r3, r2
 8008a4a:	d125      	bne.n	8008a98 <UART_SetConfig+0x228>
 8008a4c:	4b43      	ldr	r3, [pc, #268]	; (8008b5c <UART_SetConfig+0x2ec>)
 8008a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008a56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008a5a:	d017      	beq.n	8008a8c <UART_SetConfig+0x21c>
 8008a5c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008a60:	d817      	bhi.n	8008a92 <UART_SetConfig+0x222>
 8008a62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a66:	d00b      	beq.n	8008a80 <UART_SetConfig+0x210>
 8008a68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a6c:	d811      	bhi.n	8008a92 <UART_SetConfig+0x222>
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d003      	beq.n	8008a7a <UART_SetConfig+0x20a>
 8008a72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a76:	d006      	beq.n	8008a86 <UART_SetConfig+0x216>
 8008a78:	e00b      	b.n	8008a92 <UART_SetConfig+0x222>
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	76fb      	strb	r3, [r7, #27]
 8008a7e:	e038      	b.n	8008af2 <UART_SetConfig+0x282>
 8008a80:	2302      	movs	r3, #2
 8008a82:	76fb      	strb	r3, [r7, #27]
 8008a84:	e035      	b.n	8008af2 <UART_SetConfig+0x282>
 8008a86:	2304      	movs	r3, #4
 8008a88:	76fb      	strb	r3, [r7, #27]
 8008a8a:	e032      	b.n	8008af2 <UART_SetConfig+0x282>
 8008a8c:	2308      	movs	r3, #8
 8008a8e:	76fb      	strb	r3, [r7, #27]
 8008a90:	e02f      	b.n	8008af2 <UART_SetConfig+0x282>
 8008a92:	2310      	movs	r3, #16
 8008a94:	76fb      	strb	r3, [r7, #27]
 8008a96:	e02c      	b.n	8008af2 <UART_SetConfig+0x282>
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	4a2d      	ldr	r2, [pc, #180]	; (8008b54 <UART_SetConfig+0x2e4>)
 8008a9e:	4293      	cmp	r3, r2
 8008aa0:	d125      	bne.n	8008aee <UART_SetConfig+0x27e>
 8008aa2:	4b2e      	ldr	r3, [pc, #184]	; (8008b5c <UART_SetConfig+0x2ec>)
 8008aa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008aa8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008aac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008ab0:	d017      	beq.n	8008ae2 <UART_SetConfig+0x272>
 8008ab2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008ab6:	d817      	bhi.n	8008ae8 <UART_SetConfig+0x278>
 8008ab8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008abc:	d00b      	beq.n	8008ad6 <UART_SetConfig+0x266>
 8008abe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008ac2:	d811      	bhi.n	8008ae8 <UART_SetConfig+0x278>
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d003      	beq.n	8008ad0 <UART_SetConfig+0x260>
 8008ac8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008acc:	d006      	beq.n	8008adc <UART_SetConfig+0x26c>
 8008ace:	e00b      	b.n	8008ae8 <UART_SetConfig+0x278>
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	76fb      	strb	r3, [r7, #27]
 8008ad4:	e00d      	b.n	8008af2 <UART_SetConfig+0x282>
 8008ad6:	2302      	movs	r3, #2
 8008ad8:	76fb      	strb	r3, [r7, #27]
 8008ada:	e00a      	b.n	8008af2 <UART_SetConfig+0x282>
 8008adc:	2304      	movs	r3, #4
 8008ade:	76fb      	strb	r3, [r7, #27]
 8008ae0:	e007      	b.n	8008af2 <UART_SetConfig+0x282>
 8008ae2:	2308      	movs	r3, #8
 8008ae4:	76fb      	strb	r3, [r7, #27]
 8008ae6:	e004      	b.n	8008af2 <UART_SetConfig+0x282>
 8008ae8:	2310      	movs	r3, #16
 8008aea:	76fb      	strb	r3, [r7, #27]
 8008aec:	e001      	b.n	8008af2 <UART_SetConfig+0x282>
 8008aee:	2310      	movs	r3, #16
 8008af0:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	4a17      	ldr	r2, [pc, #92]	; (8008b54 <UART_SetConfig+0x2e4>)
 8008af8:	4293      	cmp	r3, r2
 8008afa:	f040 8087 	bne.w	8008c0c <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008afe:	7efb      	ldrb	r3, [r7, #27]
 8008b00:	2b08      	cmp	r3, #8
 8008b02:	d837      	bhi.n	8008b74 <UART_SetConfig+0x304>
 8008b04:	a201      	add	r2, pc, #4	; (adr r2, 8008b0c <UART_SetConfig+0x29c>)
 8008b06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b0a:	bf00      	nop
 8008b0c:	08008b31 	.word	0x08008b31
 8008b10:	08008b75 	.word	0x08008b75
 8008b14:	08008b39 	.word	0x08008b39
 8008b18:	08008b75 	.word	0x08008b75
 8008b1c:	08008b3f 	.word	0x08008b3f
 8008b20:	08008b75 	.word	0x08008b75
 8008b24:	08008b75 	.word	0x08008b75
 8008b28:	08008b75 	.word	0x08008b75
 8008b2c:	08008b47 	.word	0x08008b47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008b30:	f7fd fa02 	bl	8005f38 <HAL_RCC_GetPCLK1Freq>
 8008b34:	6178      	str	r0, [r7, #20]
        break;
 8008b36:	e022      	b.n	8008b7e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008b38:	4b0d      	ldr	r3, [pc, #52]	; (8008b70 <UART_SetConfig+0x300>)
 8008b3a:	617b      	str	r3, [r7, #20]
        break;
 8008b3c:	e01f      	b.n	8008b7e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008b3e:	f7fd f963 	bl	8005e08 <HAL_RCC_GetSysClockFreq>
 8008b42:	6178      	str	r0, [r7, #20]
        break;
 8008b44:	e01b      	b.n	8008b7e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008b46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008b4a:	617b      	str	r3, [r7, #20]
        break;
 8008b4c:	e017      	b.n	8008b7e <UART_SetConfig+0x30e>
 8008b4e:	bf00      	nop
 8008b50:	efff69f3 	.word	0xefff69f3
 8008b54:	40008000 	.word	0x40008000
 8008b58:	40013800 	.word	0x40013800
 8008b5c:	40021000 	.word	0x40021000
 8008b60:	40004400 	.word	0x40004400
 8008b64:	40004800 	.word	0x40004800
 8008b68:	40004c00 	.word	0x40004c00
 8008b6c:	40005000 	.word	0x40005000
 8008b70:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8008b74:	2300      	movs	r3, #0
 8008b76:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008b78:	2301      	movs	r3, #1
 8008b7a:	76bb      	strb	r3, [r7, #26]
        break;
 8008b7c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008b7e:	697b      	ldr	r3, [r7, #20]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	f000 80f1 	beq.w	8008d68 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	685a      	ldr	r2, [r3, #4]
 8008b8a:	4613      	mov	r3, r2
 8008b8c:	005b      	lsls	r3, r3, #1
 8008b8e:	4413      	add	r3, r2
 8008b90:	697a      	ldr	r2, [r7, #20]
 8008b92:	429a      	cmp	r2, r3
 8008b94:	d305      	bcc.n	8008ba2 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	685b      	ldr	r3, [r3, #4]
 8008b9a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008b9c:	697a      	ldr	r2, [r7, #20]
 8008b9e:	429a      	cmp	r2, r3
 8008ba0:	d902      	bls.n	8008ba8 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8008ba2:	2301      	movs	r3, #1
 8008ba4:	76bb      	strb	r3, [r7, #26]
 8008ba6:	e0df      	b.n	8008d68 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8008ba8:	697b      	ldr	r3, [r7, #20]
 8008baa:	4618      	mov	r0, r3
 8008bac:	f04f 0100 	mov.w	r1, #0
 8008bb0:	f04f 0200 	mov.w	r2, #0
 8008bb4:	f04f 0300 	mov.w	r3, #0
 8008bb8:	020b      	lsls	r3, r1, #8
 8008bba:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008bbe:	0202      	lsls	r2, r0, #8
 8008bc0:	6879      	ldr	r1, [r7, #4]
 8008bc2:	6849      	ldr	r1, [r1, #4]
 8008bc4:	0849      	lsrs	r1, r1, #1
 8008bc6:	4608      	mov	r0, r1
 8008bc8:	f04f 0100 	mov.w	r1, #0
 8008bcc:	1814      	adds	r4, r2, r0
 8008bce:	eb43 0501 	adc.w	r5, r3, r1
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	685b      	ldr	r3, [r3, #4]
 8008bd6:	461a      	mov	r2, r3
 8008bd8:	f04f 0300 	mov.w	r3, #0
 8008bdc:	4620      	mov	r0, r4
 8008bde:	4629      	mov	r1, r5
 8008be0:	f7f8 f834 	bl	8000c4c <__aeabi_uldivmod>
 8008be4:	4602      	mov	r2, r0
 8008be6:	460b      	mov	r3, r1
 8008be8:	4613      	mov	r3, r2
 8008bea:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008bec:	693b      	ldr	r3, [r7, #16]
 8008bee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008bf2:	d308      	bcc.n	8008c06 <UART_SetConfig+0x396>
 8008bf4:	693b      	ldr	r3, [r7, #16]
 8008bf6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008bfa:	d204      	bcs.n	8008c06 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	693a      	ldr	r2, [r7, #16]
 8008c02:	60da      	str	r2, [r3, #12]
 8008c04:	e0b0      	b.n	8008d68 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8008c06:	2301      	movs	r3, #1
 8008c08:	76bb      	strb	r3, [r7, #26]
 8008c0a:	e0ad      	b.n	8008d68 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	69db      	ldr	r3, [r3, #28]
 8008c10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008c14:	d15b      	bne.n	8008cce <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 8008c16:	7efb      	ldrb	r3, [r7, #27]
 8008c18:	2b08      	cmp	r3, #8
 8008c1a:	d828      	bhi.n	8008c6e <UART_SetConfig+0x3fe>
 8008c1c:	a201      	add	r2, pc, #4	; (adr r2, 8008c24 <UART_SetConfig+0x3b4>)
 8008c1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c22:	bf00      	nop
 8008c24:	08008c49 	.word	0x08008c49
 8008c28:	08008c51 	.word	0x08008c51
 8008c2c:	08008c59 	.word	0x08008c59
 8008c30:	08008c6f 	.word	0x08008c6f
 8008c34:	08008c5f 	.word	0x08008c5f
 8008c38:	08008c6f 	.word	0x08008c6f
 8008c3c:	08008c6f 	.word	0x08008c6f
 8008c40:	08008c6f 	.word	0x08008c6f
 8008c44:	08008c67 	.word	0x08008c67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008c48:	f7fd f976 	bl	8005f38 <HAL_RCC_GetPCLK1Freq>
 8008c4c:	6178      	str	r0, [r7, #20]
        break;
 8008c4e:	e013      	b.n	8008c78 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008c50:	f7fd f988 	bl	8005f64 <HAL_RCC_GetPCLK2Freq>
 8008c54:	6178      	str	r0, [r7, #20]
        break;
 8008c56:	e00f      	b.n	8008c78 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008c58:	4b49      	ldr	r3, [pc, #292]	; (8008d80 <UART_SetConfig+0x510>)
 8008c5a:	617b      	str	r3, [r7, #20]
        break;
 8008c5c:	e00c      	b.n	8008c78 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008c5e:	f7fd f8d3 	bl	8005e08 <HAL_RCC_GetSysClockFreq>
 8008c62:	6178      	str	r0, [r7, #20]
        break;
 8008c64:	e008      	b.n	8008c78 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008c66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008c6a:	617b      	str	r3, [r7, #20]
        break;
 8008c6c:	e004      	b.n	8008c78 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8008c6e:	2300      	movs	r3, #0
 8008c70:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008c72:	2301      	movs	r3, #1
 8008c74:	76bb      	strb	r3, [r7, #26]
        break;
 8008c76:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008c78:	697b      	ldr	r3, [r7, #20]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d074      	beq.n	8008d68 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008c7e:	697b      	ldr	r3, [r7, #20]
 8008c80:	005a      	lsls	r2, r3, #1
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	685b      	ldr	r3, [r3, #4]
 8008c86:	085b      	lsrs	r3, r3, #1
 8008c88:	441a      	add	r2, r3
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	685b      	ldr	r3, [r3, #4]
 8008c8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c92:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008c94:	693b      	ldr	r3, [r7, #16]
 8008c96:	2b0f      	cmp	r3, #15
 8008c98:	d916      	bls.n	8008cc8 <UART_SetConfig+0x458>
 8008c9a:	693b      	ldr	r3, [r7, #16]
 8008c9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ca0:	d212      	bcs.n	8008cc8 <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008ca2:	693b      	ldr	r3, [r7, #16]
 8008ca4:	b29b      	uxth	r3, r3
 8008ca6:	f023 030f 	bic.w	r3, r3, #15
 8008caa:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008cac:	693b      	ldr	r3, [r7, #16]
 8008cae:	085b      	lsrs	r3, r3, #1
 8008cb0:	b29b      	uxth	r3, r3
 8008cb2:	f003 0307 	and.w	r3, r3, #7
 8008cb6:	b29a      	uxth	r2, r3
 8008cb8:	89fb      	ldrh	r3, [r7, #14]
 8008cba:	4313      	orrs	r3, r2
 8008cbc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	89fa      	ldrh	r2, [r7, #14]
 8008cc4:	60da      	str	r2, [r3, #12]
 8008cc6:	e04f      	b.n	8008d68 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8008cc8:	2301      	movs	r3, #1
 8008cca:	76bb      	strb	r3, [r7, #26]
 8008ccc:	e04c      	b.n	8008d68 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008cce:	7efb      	ldrb	r3, [r7, #27]
 8008cd0:	2b08      	cmp	r3, #8
 8008cd2:	d828      	bhi.n	8008d26 <UART_SetConfig+0x4b6>
 8008cd4:	a201      	add	r2, pc, #4	; (adr r2, 8008cdc <UART_SetConfig+0x46c>)
 8008cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cda:	bf00      	nop
 8008cdc:	08008d01 	.word	0x08008d01
 8008ce0:	08008d09 	.word	0x08008d09
 8008ce4:	08008d11 	.word	0x08008d11
 8008ce8:	08008d27 	.word	0x08008d27
 8008cec:	08008d17 	.word	0x08008d17
 8008cf0:	08008d27 	.word	0x08008d27
 8008cf4:	08008d27 	.word	0x08008d27
 8008cf8:	08008d27 	.word	0x08008d27
 8008cfc:	08008d1f 	.word	0x08008d1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008d00:	f7fd f91a 	bl	8005f38 <HAL_RCC_GetPCLK1Freq>
 8008d04:	6178      	str	r0, [r7, #20]
        break;
 8008d06:	e013      	b.n	8008d30 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008d08:	f7fd f92c 	bl	8005f64 <HAL_RCC_GetPCLK2Freq>
 8008d0c:	6178      	str	r0, [r7, #20]
        break;
 8008d0e:	e00f      	b.n	8008d30 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008d10:	4b1b      	ldr	r3, [pc, #108]	; (8008d80 <UART_SetConfig+0x510>)
 8008d12:	617b      	str	r3, [r7, #20]
        break;
 8008d14:	e00c      	b.n	8008d30 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008d16:	f7fd f877 	bl	8005e08 <HAL_RCC_GetSysClockFreq>
 8008d1a:	6178      	str	r0, [r7, #20]
        break;
 8008d1c:	e008      	b.n	8008d30 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008d1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008d22:	617b      	str	r3, [r7, #20]
        break;
 8008d24:	e004      	b.n	8008d30 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8008d26:	2300      	movs	r3, #0
 8008d28:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008d2a:	2301      	movs	r3, #1
 8008d2c:	76bb      	strb	r3, [r7, #26]
        break;
 8008d2e:	bf00      	nop
    }

    if (pclk != 0U)
 8008d30:	697b      	ldr	r3, [r7, #20]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d018      	beq.n	8008d68 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	685b      	ldr	r3, [r3, #4]
 8008d3a:	085a      	lsrs	r2, r3, #1
 8008d3c:	697b      	ldr	r3, [r7, #20]
 8008d3e:	441a      	add	r2, r3
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	685b      	ldr	r3, [r3, #4]
 8008d44:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d48:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008d4a:	693b      	ldr	r3, [r7, #16]
 8008d4c:	2b0f      	cmp	r3, #15
 8008d4e:	d909      	bls.n	8008d64 <UART_SetConfig+0x4f4>
 8008d50:	693b      	ldr	r3, [r7, #16]
 8008d52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d56:	d205      	bcs.n	8008d64 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008d58:	693b      	ldr	r3, [r7, #16]
 8008d5a:	b29a      	uxth	r2, r3
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	60da      	str	r2, [r3, #12]
 8008d62:	e001      	b.n	8008d68 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8008d64:	2301      	movs	r3, #1
 8008d66:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	2200      	movs	r2, #0
 8008d72:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8008d74:	7ebb      	ldrb	r3, [r7, #26]
}
 8008d76:	4618      	mov	r0, r3
 8008d78:	3720      	adds	r7, #32
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	bdb0      	pop	{r4, r5, r7, pc}
 8008d7e:	bf00      	nop
 8008d80:	00f42400 	.word	0x00f42400

08008d84 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008d84:	b480      	push	{r7}
 8008d86:	b083      	sub	sp, #12
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d90:	f003 0301 	and.w	r3, r3, #1
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d00a      	beq.n	8008dae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	685b      	ldr	r3, [r3, #4]
 8008d9e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	430a      	orrs	r2, r1
 8008dac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008db2:	f003 0302 	and.w	r3, r3, #2
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d00a      	beq.n	8008dd0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	685b      	ldr	r3, [r3, #4]
 8008dc0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	430a      	orrs	r2, r1
 8008dce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dd4:	f003 0304 	and.w	r3, r3, #4
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d00a      	beq.n	8008df2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	685b      	ldr	r3, [r3, #4]
 8008de2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	430a      	orrs	r2, r1
 8008df0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008df6:	f003 0308 	and.w	r3, r3, #8
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d00a      	beq.n	8008e14 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	685b      	ldr	r3, [r3, #4]
 8008e04:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	430a      	orrs	r2, r1
 8008e12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e18:	f003 0310 	and.w	r3, r3, #16
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d00a      	beq.n	8008e36 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	689b      	ldr	r3, [r3, #8]
 8008e26:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	430a      	orrs	r2, r1
 8008e34:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e3a:	f003 0320 	and.w	r3, r3, #32
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d00a      	beq.n	8008e58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	689b      	ldr	r3, [r3, #8]
 8008e48:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	430a      	orrs	r2, r1
 8008e56:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d01a      	beq.n	8008e9a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	685b      	ldr	r3, [r3, #4]
 8008e6a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	430a      	orrs	r2, r1
 8008e78:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008e82:	d10a      	bne.n	8008e9a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	685b      	ldr	r3, [r3, #4]
 8008e8a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	430a      	orrs	r2, r1
 8008e98:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d00a      	beq.n	8008ebc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	685b      	ldr	r3, [r3, #4]
 8008eac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	430a      	orrs	r2, r1
 8008eba:	605a      	str	r2, [r3, #4]
  }
}
 8008ebc:	bf00      	nop
 8008ebe:	370c      	adds	r7, #12
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec6:	4770      	bx	lr

08008ec8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b086      	sub	sp, #24
 8008ecc:	af02      	add	r7, sp, #8
 8008ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008ed8:	f7f9 fcda 	bl	8002890 <HAL_GetTick>
 8008edc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	f003 0308 	and.w	r3, r3, #8
 8008ee8:	2b08      	cmp	r3, #8
 8008eea:	d10e      	bne.n	8008f0a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008eec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008ef0:	9300      	str	r3, [sp, #0]
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008efa:	6878      	ldr	r0, [r7, #4]
 8008efc:	f000 f82d 	bl	8008f5a <UART_WaitOnFlagUntilTimeout>
 8008f00:	4603      	mov	r3, r0
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d001      	beq.n	8008f0a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008f06:	2303      	movs	r3, #3
 8008f08:	e023      	b.n	8008f52 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	f003 0304 	and.w	r3, r3, #4
 8008f14:	2b04      	cmp	r3, #4
 8008f16:	d10e      	bne.n	8008f36 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008f18:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008f1c:	9300      	str	r3, [sp, #0]
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	2200      	movs	r2, #0
 8008f22:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008f26:	6878      	ldr	r0, [r7, #4]
 8008f28:	f000 f817 	bl	8008f5a <UART_WaitOnFlagUntilTimeout>
 8008f2c:	4603      	mov	r3, r0
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d001      	beq.n	8008f36 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008f32:	2303      	movs	r3, #3
 8008f34:	e00d      	b.n	8008f52 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	2220      	movs	r2, #32
 8008f3a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2220      	movs	r2, #32
 8008f40:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	2200      	movs	r2, #0
 8008f46:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8008f50:	2300      	movs	r3, #0
}
 8008f52:	4618      	mov	r0, r3
 8008f54:	3710      	adds	r7, #16
 8008f56:	46bd      	mov	sp, r7
 8008f58:	bd80      	pop	{r7, pc}

08008f5a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008f5a:	b580      	push	{r7, lr}
 8008f5c:	b09c      	sub	sp, #112	; 0x70
 8008f5e:	af00      	add	r7, sp, #0
 8008f60:	60f8      	str	r0, [r7, #12]
 8008f62:	60b9      	str	r1, [r7, #8]
 8008f64:	603b      	str	r3, [r7, #0]
 8008f66:	4613      	mov	r3, r2
 8008f68:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f6a:	e0a5      	b.n	80090b8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008f6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008f6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f72:	f000 80a1 	beq.w	80090b8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008f76:	f7f9 fc8b 	bl	8002890 <HAL_GetTick>
 8008f7a:	4602      	mov	r2, r0
 8008f7c:	683b      	ldr	r3, [r7, #0]
 8008f7e:	1ad3      	subs	r3, r2, r3
 8008f80:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008f82:	429a      	cmp	r2, r3
 8008f84:	d302      	bcc.n	8008f8c <UART_WaitOnFlagUntilTimeout+0x32>
 8008f86:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d13e      	bne.n	800900a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f94:	e853 3f00 	ldrex	r3, [r3]
 8008f98:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008f9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f9c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008fa0:	667b      	str	r3, [r7, #100]	; 0x64
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	461a      	mov	r2, r3
 8008fa8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008faa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008fac:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fae:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008fb0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008fb2:	e841 2300 	strex	r3, r2, [r1]
 8008fb6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008fb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d1e6      	bne.n	8008f8c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	3308      	adds	r3, #8
 8008fc4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fc8:	e853 3f00 	ldrex	r3, [r3]
 8008fcc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fd0:	f023 0301 	bic.w	r3, r3, #1
 8008fd4:	663b      	str	r3, [r7, #96]	; 0x60
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	3308      	adds	r3, #8
 8008fdc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008fde:	64ba      	str	r2, [r7, #72]	; 0x48
 8008fe0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fe2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008fe4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008fe6:	e841 2300 	strex	r3, r2, [r1]
 8008fea:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008fec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d1e5      	bne.n	8008fbe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	2220      	movs	r2, #32
 8008ff6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	2220      	movs	r2, #32
 8008ffc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	2200      	movs	r2, #0
 8009002:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8009006:	2303      	movs	r3, #3
 8009008:	e067      	b.n	80090da <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	f003 0304 	and.w	r3, r3, #4
 8009014:	2b00      	cmp	r3, #0
 8009016:	d04f      	beq.n	80090b8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	69db      	ldr	r3, [r3, #28]
 800901e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009022:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009026:	d147      	bne.n	80090b8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009030:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800903a:	e853 3f00 	ldrex	r3, [r3]
 800903e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009042:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009046:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	461a      	mov	r2, r3
 800904e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009050:	637b      	str	r3, [r7, #52]	; 0x34
 8009052:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009054:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009056:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009058:	e841 2300 	strex	r3, r2, [r1]
 800905c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800905e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009060:	2b00      	cmp	r3, #0
 8009062:	d1e6      	bne.n	8009032 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	3308      	adds	r3, #8
 800906a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800906c:	697b      	ldr	r3, [r7, #20]
 800906e:	e853 3f00 	ldrex	r3, [r3]
 8009072:	613b      	str	r3, [r7, #16]
   return(result);
 8009074:	693b      	ldr	r3, [r7, #16]
 8009076:	f023 0301 	bic.w	r3, r3, #1
 800907a:	66bb      	str	r3, [r7, #104]	; 0x68
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	3308      	adds	r3, #8
 8009082:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009084:	623a      	str	r2, [r7, #32]
 8009086:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009088:	69f9      	ldr	r1, [r7, #28]
 800908a:	6a3a      	ldr	r2, [r7, #32]
 800908c:	e841 2300 	strex	r3, r2, [r1]
 8009090:	61bb      	str	r3, [r7, #24]
   return(result);
 8009092:	69bb      	ldr	r3, [r7, #24]
 8009094:	2b00      	cmp	r3, #0
 8009096:	d1e5      	bne.n	8009064 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	2220      	movs	r2, #32
 800909c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	2220      	movs	r2, #32
 80090a2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	2220      	movs	r2, #32
 80090a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	2200      	movs	r2, #0
 80090b0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80090b4:	2303      	movs	r3, #3
 80090b6:	e010      	b.n	80090da <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	69da      	ldr	r2, [r3, #28]
 80090be:	68bb      	ldr	r3, [r7, #8]
 80090c0:	4013      	ands	r3, r2
 80090c2:	68ba      	ldr	r2, [r7, #8]
 80090c4:	429a      	cmp	r2, r3
 80090c6:	bf0c      	ite	eq
 80090c8:	2301      	moveq	r3, #1
 80090ca:	2300      	movne	r3, #0
 80090cc:	b2db      	uxtb	r3, r3
 80090ce:	461a      	mov	r2, r3
 80090d0:	79fb      	ldrb	r3, [r7, #7]
 80090d2:	429a      	cmp	r2, r3
 80090d4:	f43f af4a 	beq.w	8008f6c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80090d8:	2300      	movs	r3, #0
}
 80090da:	4618      	mov	r0, r3
 80090dc:	3770      	adds	r7, #112	; 0x70
 80090de:	46bd      	mov	sp, r7
 80090e0:	bd80      	pop	{r7, pc}
	...

080090e4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80090e4:	b480      	push	{r7}
 80090e6:	b097      	sub	sp, #92	; 0x5c
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	60f8      	str	r0, [r7, #12]
 80090ec:	60b9      	str	r1, [r7, #8]
 80090ee:	4613      	mov	r3, r2
 80090f0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	68ba      	ldr	r2, [r7, #8]
 80090f6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	88fa      	ldrh	r2, [r7, #6]
 80090fc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	88fa      	ldrh	r2, [r7, #6]
 8009104:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	2200      	movs	r2, #0
 800910c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	689b      	ldr	r3, [r3, #8]
 8009112:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009116:	d10e      	bne.n	8009136 <UART_Start_Receive_IT+0x52>
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	691b      	ldr	r3, [r3, #16]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d105      	bne.n	800912c <UART_Start_Receive_IT+0x48>
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	f240 12ff 	movw	r2, #511	; 0x1ff
 8009126:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800912a:	e02d      	b.n	8009188 <UART_Start_Receive_IT+0xa4>
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	22ff      	movs	r2, #255	; 0xff
 8009130:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009134:	e028      	b.n	8009188 <UART_Start_Receive_IT+0xa4>
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	689b      	ldr	r3, [r3, #8]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d10d      	bne.n	800915a <UART_Start_Receive_IT+0x76>
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	691b      	ldr	r3, [r3, #16]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d104      	bne.n	8009150 <UART_Start_Receive_IT+0x6c>
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	22ff      	movs	r2, #255	; 0xff
 800914a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800914e:	e01b      	b.n	8009188 <UART_Start_Receive_IT+0xa4>
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	227f      	movs	r2, #127	; 0x7f
 8009154:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009158:	e016      	b.n	8009188 <UART_Start_Receive_IT+0xa4>
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	689b      	ldr	r3, [r3, #8]
 800915e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009162:	d10d      	bne.n	8009180 <UART_Start_Receive_IT+0x9c>
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	691b      	ldr	r3, [r3, #16]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d104      	bne.n	8009176 <UART_Start_Receive_IT+0x92>
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	227f      	movs	r2, #127	; 0x7f
 8009170:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009174:	e008      	b.n	8009188 <UART_Start_Receive_IT+0xa4>
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	223f      	movs	r2, #63	; 0x3f
 800917a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800917e:	e003      	b.n	8009188 <UART_Start_Receive_IT+0xa4>
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	2200      	movs	r2, #0
 8009184:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	2200      	movs	r2, #0
 800918c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	2222      	movs	r2, #34	; 0x22
 8009194:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	3308      	adds	r3, #8
 800919c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800919e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091a0:	e853 3f00 	ldrex	r3, [r3]
 80091a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80091a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091a8:	f043 0301 	orr.w	r3, r3, #1
 80091ac:	657b      	str	r3, [r7, #84]	; 0x54
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	3308      	adds	r3, #8
 80091b4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80091b6:	64ba      	str	r2, [r7, #72]	; 0x48
 80091b8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091ba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80091bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80091be:	e841 2300 	strex	r3, r2, [r1]
 80091c2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80091c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d1e5      	bne.n	8009196 <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }  
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	689b      	ldr	r3, [r3, #8]
 80091ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80091d2:	d107      	bne.n	80091e4 <UART_Start_Receive_IT+0x100>
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	691b      	ldr	r3, [r3, #16]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d103      	bne.n	80091e4 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	4a24      	ldr	r2, [pc, #144]	; (8009270 <UART_Start_Receive_IT+0x18c>)
 80091e0:	665a      	str	r2, [r3, #100]	; 0x64
 80091e2:	e002      	b.n	80091ea <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	4a23      	ldr	r2, [pc, #140]	; (8009274 <UART_Start_Receive_IT+0x190>)
 80091e8:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	2200      	movs	r2, #0
 80091ee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	691b      	ldr	r3, [r3, #16]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d019      	beq.n	800922e <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009202:	e853 3f00 	ldrex	r3, [r3]
 8009206:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800920a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800920e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	461a      	mov	r2, r3
 8009216:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009218:	637b      	str	r3, [r7, #52]	; 0x34
 800921a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800921c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800921e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009220:	e841 2300 	strex	r3, r2, [r1]
 8009224:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009228:	2b00      	cmp	r3, #0
 800922a:	d1e6      	bne.n	80091fa <UART_Start_Receive_IT+0x116>
 800922c:	e018      	b.n	8009260 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009234:	697b      	ldr	r3, [r7, #20]
 8009236:	e853 3f00 	ldrex	r3, [r3]
 800923a:	613b      	str	r3, [r7, #16]
   return(result);
 800923c:	693b      	ldr	r3, [r7, #16]
 800923e:	f043 0320 	orr.w	r3, r3, #32
 8009242:	653b      	str	r3, [r7, #80]	; 0x50
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	461a      	mov	r2, r3
 800924a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800924c:	623b      	str	r3, [r7, #32]
 800924e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009250:	69f9      	ldr	r1, [r7, #28]
 8009252:	6a3a      	ldr	r2, [r7, #32]
 8009254:	e841 2300 	strex	r3, r2, [r1]
 8009258:	61bb      	str	r3, [r7, #24]
   return(result);
 800925a:	69bb      	ldr	r3, [r7, #24]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d1e6      	bne.n	800922e <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8009260:	2300      	movs	r3, #0
}
 8009262:	4618      	mov	r0, r3
 8009264:	375c      	adds	r7, #92	; 0x5c
 8009266:	46bd      	mov	sp, r7
 8009268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926c:	4770      	bx	lr
 800926e:	bf00      	nop
 8009270:	08009697 	.word	0x08009697
 8009274:	08009537 	.word	0x08009537

08009278 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009278:	b480      	push	{r7}
 800927a:	b095      	sub	sp, #84	; 0x54
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009286:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009288:	e853 3f00 	ldrex	r3, [r3]
 800928c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800928e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009290:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009294:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	461a      	mov	r2, r3
 800929c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800929e:	643b      	str	r3, [r7, #64]	; 0x40
 80092a0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092a2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80092a4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80092a6:	e841 2300 	strex	r3, r2, [r1]
 80092aa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80092ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d1e6      	bne.n	8009280 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	3308      	adds	r3, #8
 80092b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092ba:	6a3b      	ldr	r3, [r7, #32]
 80092bc:	e853 3f00 	ldrex	r3, [r3]
 80092c0:	61fb      	str	r3, [r7, #28]
   return(result);
 80092c2:	69fb      	ldr	r3, [r7, #28]
 80092c4:	f023 0301 	bic.w	r3, r3, #1
 80092c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	3308      	adds	r3, #8
 80092d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80092d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80092d4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80092d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80092da:	e841 2300 	strex	r3, r2, [r1]
 80092de:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80092e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d1e5      	bne.n	80092b2 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80092ea:	2b01      	cmp	r3, #1
 80092ec:	d118      	bne.n	8009320 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	e853 3f00 	ldrex	r3, [r3]
 80092fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80092fc:	68bb      	ldr	r3, [r7, #8]
 80092fe:	f023 0310 	bic.w	r3, r3, #16
 8009302:	647b      	str	r3, [r7, #68]	; 0x44
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	461a      	mov	r2, r3
 800930a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800930c:	61bb      	str	r3, [r7, #24]
 800930e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009310:	6979      	ldr	r1, [r7, #20]
 8009312:	69ba      	ldr	r2, [r7, #24]
 8009314:	e841 2300 	strex	r3, r2, [r1]
 8009318:	613b      	str	r3, [r7, #16]
   return(result);
 800931a:	693b      	ldr	r3, [r7, #16]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d1e6      	bne.n	80092ee <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2220      	movs	r2, #32
 8009324:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	2200      	movs	r2, #0
 800932a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	2200      	movs	r2, #0
 8009330:	665a      	str	r2, [r3, #100]	; 0x64
}
 8009332:	bf00      	nop
 8009334:	3754      	adds	r7, #84	; 0x54
 8009336:	46bd      	mov	sp, r7
 8009338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933c:	4770      	bx	lr

0800933e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800933e:	b580      	push	{r7, lr}
 8009340:	b084      	sub	sp, #16
 8009342:	af00      	add	r7, sp, #0
 8009344:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800934a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	2200      	movs	r2, #0
 8009350:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	2200      	movs	r2, #0
 8009358:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800935c:	68f8      	ldr	r0, [r7, #12]
 800935e:	f7ff fa71 	bl	8008844 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009362:	bf00      	nop
 8009364:	3710      	adds	r7, #16
 8009366:	46bd      	mov	sp, r7
 8009368:	bd80      	pop	{r7, pc}

0800936a <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800936a:	b480      	push	{r7}
 800936c:	b08f      	sub	sp, #60	; 0x3c
 800936e:	af00      	add	r7, sp, #0
 8009370:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009376:	2b21      	cmp	r3, #33	; 0x21
 8009378:	d14d      	bne.n	8009416 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009380:	b29b      	uxth	r3, r3
 8009382:	2b00      	cmp	r3, #0
 8009384:	d132      	bne.n	80093ec <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800938c:	6a3b      	ldr	r3, [r7, #32]
 800938e:	e853 3f00 	ldrex	r3, [r3]
 8009392:	61fb      	str	r3, [r7, #28]
   return(result);
 8009394:	69fb      	ldr	r3, [r7, #28]
 8009396:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800939a:	637b      	str	r3, [r7, #52]	; 0x34
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	461a      	mov	r2, r3
 80093a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80093a6:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80093aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80093ac:	e841 2300 	strex	r3, r2, [r1]
 80093b0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80093b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d1e6      	bne.n	8009386 <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	e853 3f00 	ldrex	r3, [r3]
 80093c4:	60bb      	str	r3, [r7, #8]
   return(result);
 80093c6:	68bb      	ldr	r3, [r7, #8]
 80093c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80093cc:	633b      	str	r3, [r7, #48]	; 0x30
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	461a      	mov	r2, r3
 80093d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093d6:	61bb      	str	r3, [r7, #24]
 80093d8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093da:	6979      	ldr	r1, [r7, #20]
 80093dc:	69ba      	ldr	r2, [r7, #24]
 80093de:	e841 2300 	strex	r3, r2, [r1]
 80093e2:	613b      	str	r3, [r7, #16]
   return(result);
 80093e4:	693b      	ldr	r3, [r7, #16]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d1e6      	bne.n	80093b8 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80093ea:	e014      	b.n	8009416 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80093f0:	781a      	ldrb	r2, [r3, #0]
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	b292      	uxth	r2, r2
 80093f8:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80093fe:	1c5a      	adds	r2, r3, #1
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800940a:	b29b      	uxth	r3, r3
 800940c:	3b01      	subs	r3, #1
 800940e:	b29a      	uxth	r2, r3
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8009416:	bf00      	nop
 8009418:	373c      	adds	r7, #60	; 0x3c
 800941a:	46bd      	mov	sp, r7
 800941c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009420:	4770      	bx	lr

08009422 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009422:	b480      	push	{r7}
 8009424:	b091      	sub	sp, #68	; 0x44
 8009426:	af00      	add	r7, sp, #0
 8009428:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800942e:	2b21      	cmp	r3, #33	; 0x21
 8009430:	d151      	bne.n	80094d6 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009438:	b29b      	uxth	r3, r3
 800943a:	2b00      	cmp	r3, #0
 800943c:	d132      	bne.n	80094a4 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009446:	e853 3f00 	ldrex	r3, [r3]
 800944a:	623b      	str	r3, [r7, #32]
   return(result);
 800944c:	6a3b      	ldr	r3, [r7, #32]
 800944e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009452:	63bb      	str	r3, [r7, #56]	; 0x38
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	461a      	mov	r2, r3
 800945a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800945c:	633b      	str	r3, [r7, #48]	; 0x30
 800945e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009460:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009462:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009464:	e841 2300 	strex	r3, r2, [r1]
 8009468:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800946a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800946c:	2b00      	cmp	r3, #0
 800946e:	d1e6      	bne.n	800943e <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009476:	693b      	ldr	r3, [r7, #16]
 8009478:	e853 3f00 	ldrex	r3, [r3]
 800947c:	60fb      	str	r3, [r7, #12]
   return(result);
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009484:	637b      	str	r3, [r7, #52]	; 0x34
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	461a      	mov	r2, r3
 800948c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800948e:	61fb      	str	r3, [r7, #28]
 8009490:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009492:	69b9      	ldr	r1, [r7, #24]
 8009494:	69fa      	ldr	r2, [r7, #28]
 8009496:	e841 2300 	strex	r3, r2, [r1]
 800949a:	617b      	str	r3, [r7, #20]
   return(result);
 800949c:	697b      	ldr	r3, [r7, #20]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d1e6      	bne.n	8009470 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80094a2:	e018      	b.n	80094d6 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80094a8:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80094aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094ac:	881a      	ldrh	r2, [r3, #0]
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80094b6:	b292      	uxth	r2, r2
 80094b8:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80094be:	1c9a      	adds	r2, r3, #2
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80094ca:	b29b      	uxth	r3, r3
 80094cc:	3b01      	subs	r3, #1
 80094ce:	b29a      	uxth	r2, r3
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80094d6:	bf00      	nop
 80094d8:	3744      	adds	r7, #68	; 0x44
 80094da:	46bd      	mov	sp, r7
 80094dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e0:	4770      	bx	lr

080094e2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80094e2:	b580      	push	{r7, lr}
 80094e4:	b088      	sub	sp, #32
 80094e6:	af00      	add	r7, sp, #0
 80094e8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	e853 3f00 	ldrex	r3, [r3]
 80094f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80094f8:	68bb      	ldr	r3, [r7, #8]
 80094fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80094fe:	61fb      	str	r3, [r7, #28]
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	461a      	mov	r2, r3
 8009506:	69fb      	ldr	r3, [r7, #28]
 8009508:	61bb      	str	r3, [r7, #24]
 800950a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800950c:	6979      	ldr	r1, [r7, #20]
 800950e:	69ba      	ldr	r2, [r7, #24]
 8009510:	e841 2300 	strex	r3, r2, [r1]
 8009514:	613b      	str	r3, [r7, #16]
   return(result);
 8009516:	693b      	ldr	r3, [r7, #16]
 8009518:	2b00      	cmp	r3, #0
 800951a:	d1e6      	bne.n	80094ea <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	2220      	movs	r2, #32
 8009520:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	2200      	movs	r2, #0
 8009526:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009528:	6878      	ldr	r0, [r7, #4]
 800952a:	f7f8 fdc3 	bl	80020b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800952e:	bf00      	nop
 8009530:	3720      	adds	r7, #32
 8009532:	46bd      	mov	sp, r7
 8009534:	bd80      	pop	{r7, pc}

08009536 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009536:	b580      	push	{r7, lr}
 8009538:	b096      	sub	sp, #88	; 0x58
 800953a:	af00      	add	r7, sp, #0
 800953c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009544:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800954c:	2b22      	cmp	r3, #34	; 0x22
 800954e:	f040 8094 	bne.w	800967a <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009558:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800955c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8009560:	b2d9      	uxtb	r1, r3
 8009562:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009566:	b2da      	uxtb	r2, r3
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800956c:	400a      	ands	r2, r1
 800956e:	b2d2      	uxtb	r2, r2
 8009570:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009576:	1c5a      	adds	r2, r3, #1
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009582:	b29b      	uxth	r3, r3
 8009584:	3b01      	subs	r3, #1
 8009586:	b29a      	uxth	r2, r3
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009594:	b29b      	uxth	r3, r3
 8009596:	2b00      	cmp	r3, #0
 8009598:	d179      	bne.n	800968e <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095a2:	e853 3f00 	ldrex	r3, [r3]
 80095a6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80095a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095aa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80095ae:	653b      	str	r3, [r7, #80]	; 0x50
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	461a      	mov	r2, r3
 80095b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80095b8:	647b      	str	r3, [r7, #68]	; 0x44
 80095ba:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095bc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80095be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80095c0:	e841 2300 	strex	r3, r2, [r1]
 80095c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80095c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d1e6      	bne.n	800959a <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	3308      	adds	r3, #8
 80095d2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095d6:	e853 3f00 	ldrex	r3, [r3]
 80095da:	623b      	str	r3, [r7, #32]
   return(result);
 80095dc:	6a3b      	ldr	r3, [r7, #32]
 80095de:	f023 0301 	bic.w	r3, r3, #1
 80095e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	3308      	adds	r3, #8
 80095ea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80095ec:	633a      	str	r2, [r7, #48]	; 0x30
 80095ee:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095f0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80095f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80095f4:	e841 2300 	strex	r3, r2, [r1]
 80095f8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80095fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d1e5      	bne.n	80095cc <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	2220      	movs	r2, #32
 8009604:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	2200      	movs	r2, #0
 800960a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009610:	2b01      	cmp	r3, #1
 8009612:	d12e      	bne.n	8009672 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	2200      	movs	r2, #0
 8009618:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009620:	693b      	ldr	r3, [r7, #16]
 8009622:	e853 3f00 	ldrex	r3, [r3]
 8009626:	60fb      	str	r3, [r7, #12]
   return(result);
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	f023 0310 	bic.w	r3, r3, #16
 800962e:	64bb      	str	r3, [r7, #72]	; 0x48
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	461a      	mov	r2, r3
 8009636:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009638:	61fb      	str	r3, [r7, #28]
 800963a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800963c:	69b9      	ldr	r1, [r7, #24]
 800963e:	69fa      	ldr	r2, [r7, #28]
 8009640:	e841 2300 	strex	r3, r2, [r1]
 8009644:	617b      	str	r3, [r7, #20]
   return(result);
 8009646:	697b      	ldr	r3, [r7, #20]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d1e6      	bne.n	800961a <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	69db      	ldr	r3, [r3, #28]
 8009652:	f003 0310 	and.w	r3, r3, #16
 8009656:	2b10      	cmp	r3, #16
 8009658:	d103      	bne.n	8009662 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	2210      	movs	r2, #16
 8009660:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009668:	4619      	mov	r1, r3
 800966a:	6878      	ldr	r0, [r7, #4]
 800966c:	f7ff f8f4 	bl	8008858 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009670:	e00d      	b.n	800968e <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8009672:	6878      	ldr	r0, [r7, #4]
 8009674:	f7f8 fc00 	bl	8001e78 <HAL_UART_RxCpltCallback>
}
 8009678:	e009      	b.n	800968e <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	8b1b      	ldrh	r3, [r3, #24]
 8009680:	b29a      	uxth	r2, r3
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	f042 0208 	orr.w	r2, r2, #8
 800968a:	b292      	uxth	r2, r2
 800968c:	831a      	strh	r2, [r3, #24]
}
 800968e:	bf00      	nop
 8009690:	3758      	adds	r7, #88	; 0x58
 8009692:	46bd      	mov	sp, r7
 8009694:	bd80      	pop	{r7, pc}

08009696 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009696:	b580      	push	{r7, lr}
 8009698:	b096      	sub	sp, #88	; 0x58
 800969a:	af00      	add	r7, sp, #0
 800969c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80096a4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80096ac:	2b22      	cmp	r3, #34	; 0x22
 80096ae:	f040 8094 	bne.w	80097da <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80096b8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096c0:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80096c2:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80096c6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80096ca:	4013      	ands	r3, r2
 80096cc:	b29a      	uxth	r2, r3
 80096ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80096d0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096d6:	1c9a      	adds	r2, r3, #2
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80096e2:	b29b      	uxth	r3, r3
 80096e4:	3b01      	subs	r3, #1
 80096e6:	b29a      	uxth	r2, r3
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80096f4:	b29b      	uxth	r3, r3
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d179      	bne.n	80097ee <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009702:	e853 3f00 	ldrex	r3, [r3]
 8009706:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800970a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800970e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	461a      	mov	r2, r3
 8009716:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009718:	643b      	str	r3, [r7, #64]	; 0x40
 800971a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800971c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800971e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009720:	e841 2300 	strex	r3, r2, [r1]
 8009724:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009728:	2b00      	cmp	r3, #0
 800972a:	d1e6      	bne.n	80096fa <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	3308      	adds	r3, #8
 8009732:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009734:	6a3b      	ldr	r3, [r7, #32]
 8009736:	e853 3f00 	ldrex	r3, [r3]
 800973a:	61fb      	str	r3, [r7, #28]
   return(result);
 800973c:	69fb      	ldr	r3, [r7, #28]
 800973e:	f023 0301 	bic.w	r3, r3, #1
 8009742:	64bb      	str	r3, [r7, #72]	; 0x48
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	3308      	adds	r3, #8
 800974a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800974c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800974e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009750:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009752:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009754:	e841 2300 	strex	r3, r2, [r1]
 8009758:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800975a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800975c:	2b00      	cmp	r3, #0
 800975e:	d1e5      	bne.n	800972c <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2220      	movs	r2, #32
 8009764:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	2200      	movs	r2, #0
 800976a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009770:	2b01      	cmp	r3, #1
 8009772:	d12e      	bne.n	80097d2 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2200      	movs	r2, #0
 8009778:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	e853 3f00 	ldrex	r3, [r3]
 8009786:	60bb      	str	r3, [r7, #8]
   return(result);
 8009788:	68bb      	ldr	r3, [r7, #8]
 800978a:	f023 0310 	bic.w	r3, r3, #16
 800978e:	647b      	str	r3, [r7, #68]	; 0x44
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	461a      	mov	r2, r3
 8009796:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009798:	61bb      	str	r3, [r7, #24]
 800979a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800979c:	6979      	ldr	r1, [r7, #20]
 800979e:	69ba      	ldr	r2, [r7, #24]
 80097a0:	e841 2300 	strex	r3, r2, [r1]
 80097a4:	613b      	str	r3, [r7, #16]
   return(result);
 80097a6:	693b      	ldr	r3, [r7, #16]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d1e6      	bne.n	800977a <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	69db      	ldr	r3, [r3, #28]
 80097b2:	f003 0310 	and.w	r3, r3, #16
 80097b6:	2b10      	cmp	r3, #16
 80097b8:	d103      	bne.n	80097c2 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	2210      	movs	r2, #16
 80097c0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80097c8:	4619      	mov	r1, r3
 80097ca:	6878      	ldr	r0, [r7, #4]
 80097cc:	f7ff f844 	bl	8008858 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80097d0:	e00d      	b.n	80097ee <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80097d2:	6878      	ldr	r0, [r7, #4]
 80097d4:	f7f8 fb50 	bl	8001e78 <HAL_UART_RxCpltCallback>
}
 80097d8:	e009      	b.n	80097ee <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	8b1b      	ldrh	r3, [r3, #24]
 80097e0:	b29a      	uxth	r2, r3
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	f042 0208 	orr.w	r2, r2, #8
 80097ea:	b292      	uxth	r2, r2
 80097ec:	831a      	strh	r2, [r3, #24]
}
 80097ee:	bf00      	nop
 80097f0:	3758      	adds	r7, #88	; 0x58
 80097f2:	46bd      	mov	sp, r7
 80097f4:	bd80      	pop	{r7, pc}

080097f6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80097f6:	b480      	push	{r7}
 80097f8:	b083      	sub	sp, #12
 80097fa:	af00      	add	r7, sp, #0
 80097fc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80097fe:	bf00      	nop
 8009800:	370c      	adds	r7, #12
 8009802:	46bd      	mov	sp, r7
 8009804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009808:	4770      	bx	lr
	...

0800980c <__errno>:
 800980c:	4b01      	ldr	r3, [pc, #4]	; (8009814 <__errno+0x8>)
 800980e:	6818      	ldr	r0, [r3, #0]
 8009810:	4770      	bx	lr
 8009812:	bf00      	nop
 8009814:	20000014 	.word	0x20000014

08009818 <__libc_init_array>:
 8009818:	b570      	push	{r4, r5, r6, lr}
 800981a:	4d0d      	ldr	r5, [pc, #52]	; (8009850 <__libc_init_array+0x38>)
 800981c:	4c0d      	ldr	r4, [pc, #52]	; (8009854 <__libc_init_array+0x3c>)
 800981e:	1b64      	subs	r4, r4, r5
 8009820:	10a4      	asrs	r4, r4, #2
 8009822:	2600      	movs	r6, #0
 8009824:	42a6      	cmp	r6, r4
 8009826:	d109      	bne.n	800983c <__libc_init_array+0x24>
 8009828:	4d0b      	ldr	r5, [pc, #44]	; (8009858 <__libc_init_array+0x40>)
 800982a:	4c0c      	ldr	r4, [pc, #48]	; (800985c <__libc_init_array+0x44>)
 800982c:	f002 f84e 	bl	800b8cc <_init>
 8009830:	1b64      	subs	r4, r4, r5
 8009832:	10a4      	asrs	r4, r4, #2
 8009834:	2600      	movs	r6, #0
 8009836:	42a6      	cmp	r6, r4
 8009838:	d105      	bne.n	8009846 <__libc_init_array+0x2e>
 800983a:	bd70      	pop	{r4, r5, r6, pc}
 800983c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009840:	4798      	blx	r3
 8009842:	3601      	adds	r6, #1
 8009844:	e7ee      	b.n	8009824 <__libc_init_array+0xc>
 8009846:	f855 3b04 	ldr.w	r3, [r5], #4
 800984a:	4798      	blx	r3
 800984c:	3601      	adds	r6, #1
 800984e:	e7f2      	b.n	8009836 <__libc_init_array+0x1e>
 8009850:	0800bc18 	.word	0x0800bc18
 8009854:	0800bc18 	.word	0x0800bc18
 8009858:	0800bc18 	.word	0x0800bc18
 800985c:	0800bc1c 	.word	0x0800bc1c

08009860 <memset>:
 8009860:	4402      	add	r2, r0
 8009862:	4603      	mov	r3, r0
 8009864:	4293      	cmp	r3, r2
 8009866:	d100      	bne.n	800986a <memset+0xa>
 8009868:	4770      	bx	lr
 800986a:	f803 1b01 	strb.w	r1, [r3], #1
 800986e:	e7f9      	b.n	8009864 <memset+0x4>

08009870 <iprintf>:
 8009870:	b40f      	push	{r0, r1, r2, r3}
 8009872:	4b0a      	ldr	r3, [pc, #40]	; (800989c <iprintf+0x2c>)
 8009874:	b513      	push	{r0, r1, r4, lr}
 8009876:	681c      	ldr	r4, [r3, #0]
 8009878:	b124      	cbz	r4, 8009884 <iprintf+0x14>
 800987a:	69a3      	ldr	r3, [r4, #24]
 800987c:	b913      	cbnz	r3, 8009884 <iprintf+0x14>
 800987e:	4620      	mov	r0, r4
 8009880:	f000 fa5e 	bl	8009d40 <__sinit>
 8009884:	ab05      	add	r3, sp, #20
 8009886:	9a04      	ldr	r2, [sp, #16]
 8009888:	68a1      	ldr	r1, [r4, #8]
 800988a:	9301      	str	r3, [sp, #4]
 800988c:	4620      	mov	r0, r4
 800988e:	f000 fc2f 	bl	800a0f0 <_vfiprintf_r>
 8009892:	b002      	add	sp, #8
 8009894:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009898:	b004      	add	sp, #16
 800989a:	4770      	bx	lr
 800989c:	20000014 	.word	0x20000014

080098a0 <_puts_r>:
 80098a0:	b570      	push	{r4, r5, r6, lr}
 80098a2:	460e      	mov	r6, r1
 80098a4:	4605      	mov	r5, r0
 80098a6:	b118      	cbz	r0, 80098b0 <_puts_r+0x10>
 80098a8:	6983      	ldr	r3, [r0, #24]
 80098aa:	b90b      	cbnz	r3, 80098b0 <_puts_r+0x10>
 80098ac:	f000 fa48 	bl	8009d40 <__sinit>
 80098b0:	69ab      	ldr	r3, [r5, #24]
 80098b2:	68ac      	ldr	r4, [r5, #8]
 80098b4:	b913      	cbnz	r3, 80098bc <_puts_r+0x1c>
 80098b6:	4628      	mov	r0, r5
 80098b8:	f000 fa42 	bl	8009d40 <__sinit>
 80098bc:	4b2c      	ldr	r3, [pc, #176]	; (8009970 <_puts_r+0xd0>)
 80098be:	429c      	cmp	r4, r3
 80098c0:	d120      	bne.n	8009904 <_puts_r+0x64>
 80098c2:	686c      	ldr	r4, [r5, #4]
 80098c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80098c6:	07db      	lsls	r3, r3, #31
 80098c8:	d405      	bmi.n	80098d6 <_puts_r+0x36>
 80098ca:	89a3      	ldrh	r3, [r4, #12]
 80098cc:	0598      	lsls	r0, r3, #22
 80098ce:	d402      	bmi.n	80098d6 <_puts_r+0x36>
 80098d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80098d2:	f000 fad3 	bl	8009e7c <__retarget_lock_acquire_recursive>
 80098d6:	89a3      	ldrh	r3, [r4, #12]
 80098d8:	0719      	lsls	r1, r3, #28
 80098da:	d51d      	bpl.n	8009918 <_puts_r+0x78>
 80098dc:	6923      	ldr	r3, [r4, #16]
 80098de:	b1db      	cbz	r3, 8009918 <_puts_r+0x78>
 80098e0:	3e01      	subs	r6, #1
 80098e2:	68a3      	ldr	r3, [r4, #8]
 80098e4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80098e8:	3b01      	subs	r3, #1
 80098ea:	60a3      	str	r3, [r4, #8]
 80098ec:	bb39      	cbnz	r1, 800993e <_puts_r+0x9e>
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	da38      	bge.n	8009964 <_puts_r+0xc4>
 80098f2:	4622      	mov	r2, r4
 80098f4:	210a      	movs	r1, #10
 80098f6:	4628      	mov	r0, r5
 80098f8:	f000 f848 	bl	800998c <__swbuf_r>
 80098fc:	3001      	adds	r0, #1
 80098fe:	d011      	beq.n	8009924 <_puts_r+0x84>
 8009900:	250a      	movs	r5, #10
 8009902:	e011      	b.n	8009928 <_puts_r+0x88>
 8009904:	4b1b      	ldr	r3, [pc, #108]	; (8009974 <_puts_r+0xd4>)
 8009906:	429c      	cmp	r4, r3
 8009908:	d101      	bne.n	800990e <_puts_r+0x6e>
 800990a:	68ac      	ldr	r4, [r5, #8]
 800990c:	e7da      	b.n	80098c4 <_puts_r+0x24>
 800990e:	4b1a      	ldr	r3, [pc, #104]	; (8009978 <_puts_r+0xd8>)
 8009910:	429c      	cmp	r4, r3
 8009912:	bf08      	it	eq
 8009914:	68ec      	ldreq	r4, [r5, #12]
 8009916:	e7d5      	b.n	80098c4 <_puts_r+0x24>
 8009918:	4621      	mov	r1, r4
 800991a:	4628      	mov	r0, r5
 800991c:	f000 f888 	bl	8009a30 <__swsetup_r>
 8009920:	2800      	cmp	r0, #0
 8009922:	d0dd      	beq.n	80098e0 <_puts_r+0x40>
 8009924:	f04f 35ff 	mov.w	r5, #4294967295
 8009928:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800992a:	07da      	lsls	r2, r3, #31
 800992c:	d405      	bmi.n	800993a <_puts_r+0x9a>
 800992e:	89a3      	ldrh	r3, [r4, #12]
 8009930:	059b      	lsls	r3, r3, #22
 8009932:	d402      	bmi.n	800993a <_puts_r+0x9a>
 8009934:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009936:	f000 faa2 	bl	8009e7e <__retarget_lock_release_recursive>
 800993a:	4628      	mov	r0, r5
 800993c:	bd70      	pop	{r4, r5, r6, pc}
 800993e:	2b00      	cmp	r3, #0
 8009940:	da04      	bge.n	800994c <_puts_r+0xac>
 8009942:	69a2      	ldr	r2, [r4, #24]
 8009944:	429a      	cmp	r2, r3
 8009946:	dc06      	bgt.n	8009956 <_puts_r+0xb6>
 8009948:	290a      	cmp	r1, #10
 800994a:	d004      	beq.n	8009956 <_puts_r+0xb6>
 800994c:	6823      	ldr	r3, [r4, #0]
 800994e:	1c5a      	adds	r2, r3, #1
 8009950:	6022      	str	r2, [r4, #0]
 8009952:	7019      	strb	r1, [r3, #0]
 8009954:	e7c5      	b.n	80098e2 <_puts_r+0x42>
 8009956:	4622      	mov	r2, r4
 8009958:	4628      	mov	r0, r5
 800995a:	f000 f817 	bl	800998c <__swbuf_r>
 800995e:	3001      	adds	r0, #1
 8009960:	d1bf      	bne.n	80098e2 <_puts_r+0x42>
 8009962:	e7df      	b.n	8009924 <_puts_r+0x84>
 8009964:	6823      	ldr	r3, [r4, #0]
 8009966:	250a      	movs	r5, #10
 8009968:	1c5a      	adds	r2, r3, #1
 800996a:	6022      	str	r2, [r4, #0]
 800996c:	701d      	strb	r5, [r3, #0]
 800996e:	e7db      	b.n	8009928 <_puts_r+0x88>
 8009970:	0800b9c4 	.word	0x0800b9c4
 8009974:	0800b9e4 	.word	0x0800b9e4
 8009978:	0800b9a4 	.word	0x0800b9a4

0800997c <puts>:
 800997c:	4b02      	ldr	r3, [pc, #8]	; (8009988 <puts+0xc>)
 800997e:	4601      	mov	r1, r0
 8009980:	6818      	ldr	r0, [r3, #0]
 8009982:	f7ff bf8d 	b.w	80098a0 <_puts_r>
 8009986:	bf00      	nop
 8009988:	20000014 	.word	0x20000014

0800998c <__swbuf_r>:
 800998c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800998e:	460e      	mov	r6, r1
 8009990:	4614      	mov	r4, r2
 8009992:	4605      	mov	r5, r0
 8009994:	b118      	cbz	r0, 800999e <__swbuf_r+0x12>
 8009996:	6983      	ldr	r3, [r0, #24]
 8009998:	b90b      	cbnz	r3, 800999e <__swbuf_r+0x12>
 800999a:	f000 f9d1 	bl	8009d40 <__sinit>
 800999e:	4b21      	ldr	r3, [pc, #132]	; (8009a24 <__swbuf_r+0x98>)
 80099a0:	429c      	cmp	r4, r3
 80099a2:	d12b      	bne.n	80099fc <__swbuf_r+0x70>
 80099a4:	686c      	ldr	r4, [r5, #4]
 80099a6:	69a3      	ldr	r3, [r4, #24]
 80099a8:	60a3      	str	r3, [r4, #8]
 80099aa:	89a3      	ldrh	r3, [r4, #12]
 80099ac:	071a      	lsls	r2, r3, #28
 80099ae:	d52f      	bpl.n	8009a10 <__swbuf_r+0x84>
 80099b0:	6923      	ldr	r3, [r4, #16]
 80099b2:	b36b      	cbz	r3, 8009a10 <__swbuf_r+0x84>
 80099b4:	6923      	ldr	r3, [r4, #16]
 80099b6:	6820      	ldr	r0, [r4, #0]
 80099b8:	1ac0      	subs	r0, r0, r3
 80099ba:	6963      	ldr	r3, [r4, #20]
 80099bc:	b2f6      	uxtb	r6, r6
 80099be:	4283      	cmp	r3, r0
 80099c0:	4637      	mov	r7, r6
 80099c2:	dc04      	bgt.n	80099ce <__swbuf_r+0x42>
 80099c4:	4621      	mov	r1, r4
 80099c6:	4628      	mov	r0, r5
 80099c8:	f000 f926 	bl	8009c18 <_fflush_r>
 80099cc:	bb30      	cbnz	r0, 8009a1c <__swbuf_r+0x90>
 80099ce:	68a3      	ldr	r3, [r4, #8]
 80099d0:	3b01      	subs	r3, #1
 80099d2:	60a3      	str	r3, [r4, #8]
 80099d4:	6823      	ldr	r3, [r4, #0]
 80099d6:	1c5a      	adds	r2, r3, #1
 80099d8:	6022      	str	r2, [r4, #0]
 80099da:	701e      	strb	r6, [r3, #0]
 80099dc:	6963      	ldr	r3, [r4, #20]
 80099de:	3001      	adds	r0, #1
 80099e0:	4283      	cmp	r3, r0
 80099e2:	d004      	beq.n	80099ee <__swbuf_r+0x62>
 80099e4:	89a3      	ldrh	r3, [r4, #12]
 80099e6:	07db      	lsls	r3, r3, #31
 80099e8:	d506      	bpl.n	80099f8 <__swbuf_r+0x6c>
 80099ea:	2e0a      	cmp	r6, #10
 80099ec:	d104      	bne.n	80099f8 <__swbuf_r+0x6c>
 80099ee:	4621      	mov	r1, r4
 80099f0:	4628      	mov	r0, r5
 80099f2:	f000 f911 	bl	8009c18 <_fflush_r>
 80099f6:	b988      	cbnz	r0, 8009a1c <__swbuf_r+0x90>
 80099f8:	4638      	mov	r0, r7
 80099fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80099fc:	4b0a      	ldr	r3, [pc, #40]	; (8009a28 <__swbuf_r+0x9c>)
 80099fe:	429c      	cmp	r4, r3
 8009a00:	d101      	bne.n	8009a06 <__swbuf_r+0x7a>
 8009a02:	68ac      	ldr	r4, [r5, #8]
 8009a04:	e7cf      	b.n	80099a6 <__swbuf_r+0x1a>
 8009a06:	4b09      	ldr	r3, [pc, #36]	; (8009a2c <__swbuf_r+0xa0>)
 8009a08:	429c      	cmp	r4, r3
 8009a0a:	bf08      	it	eq
 8009a0c:	68ec      	ldreq	r4, [r5, #12]
 8009a0e:	e7ca      	b.n	80099a6 <__swbuf_r+0x1a>
 8009a10:	4621      	mov	r1, r4
 8009a12:	4628      	mov	r0, r5
 8009a14:	f000 f80c 	bl	8009a30 <__swsetup_r>
 8009a18:	2800      	cmp	r0, #0
 8009a1a:	d0cb      	beq.n	80099b4 <__swbuf_r+0x28>
 8009a1c:	f04f 37ff 	mov.w	r7, #4294967295
 8009a20:	e7ea      	b.n	80099f8 <__swbuf_r+0x6c>
 8009a22:	bf00      	nop
 8009a24:	0800b9c4 	.word	0x0800b9c4
 8009a28:	0800b9e4 	.word	0x0800b9e4
 8009a2c:	0800b9a4 	.word	0x0800b9a4

08009a30 <__swsetup_r>:
 8009a30:	4b32      	ldr	r3, [pc, #200]	; (8009afc <__swsetup_r+0xcc>)
 8009a32:	b570      	push	{r4, r5, r6, lr}
 8009a34:	681d      	ldr	r5, [r3, #0]
 8009a36:	4606      	mov	r6, r0
 8009a38:	460c      	mov	r4, r1
 8009a3a:	b125      	cbz	r5, 8009a46 <__swsetup_r+0x16>
 8009a3c:	69ab      	ldr	r3, [r5, #24]
 8009a3e:	b913      	cbnz	r3, 8009a46 <__swsetup_r+0x16>
 8009a40:	4628      	mov	r0, r5
 8009a42:	f000 f97d 	bl	8009d40 <__sinit>
 8009a46:	4b2e      	ldr	r3, [pc, #184]	; (8009b00 <__swsetup_r+0xd0>)
 8009a48:	429c      	cmp	r4, r3
 8009a4a:	d10f      	bne.n	8009a6c <__swsetup_r+0x3c>
 8009a4c:	686c      	ldr	r4, [r5, #4]
 8009a4e:	89a3      	ldrh	r3, [r4, #12]
 8009a50:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009a54:	0719      	lsls	r1, r3, #28
 8009a56:	d42c      	bmi.n	8009ab2 <__swsetup_r+0x82>
 8009a58:	06dd      	lsls	r5, r3, #27
 8009a5a:	d411      	bmi.n	8009a80 <__swsetup_r+0x50>
 8009a5c:	2309      	movs	r3, #9
 8009a5e:	6033      	str	r3, [r6, #0]
 8009a60:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009a64:	81a3      	strh	r3, [r4, #12]
 8009a66:	f04f 30ff 	mov.w	r0, #4294967295
 8009a6a:	e03e      	b.n	8009aea <__swsetup_r+0xba>
 8009a6c:	4b25      	ldr	r3, [pc, #148]	; (8009b04 <__swsetup_r+0xd4>)
 8009a6e:	429c      	cmp	r4, r3
 8009a70:	d101      	bne.n	8009a76 <__swsetup_r+0x46>
 8009a72:	68ac      	ldr	r4, [r5, #8]
 8009a74:	e7eb      	b.n	8009a4e <__swsetup_r+0x1e>
 8009a76:	4b24      	ldr	r3, [pc, #144]	; (8009b08 <__swsetup_r+0xd8>)
 8009a78:	429c      	cmp	r4, r3
 8009a7a:	bf08      	it	eq
 8009a7c:	68ec      	ldreq	r4, [r5, #12]
 8009a7e:	e7e6      	b.n	8009a4e <__swsetup_r+0x1e>
 8009a80:	0758      	lsls	r0, r3, #29
 8009a82:	d512      	bpl.n	8009aaa <__swsetup_r+0x7a>
 8009a84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009a86:	b141      	cbz	r1, 8009a9a <__swsetup_r+0x6a>
 8009a88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009a8c:	4299      	cmp	r1, r3
 8009a8e:	d002      	beq.n	8009a96 <__swsetup_r+0x66>
 8009a90:	4630      	mov	r0, r6
 8009a92:	f000 fa59 	bl	8009f48 <_free_r>
 8009a96:	2300      	movs	r3, #0
 8009a98:	6363      	str	r3, [r4, #52]	; 0x34
 8009a9a:	89a3      	ldrh	r3, [r4, #12]
 8009a9c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009aa0:	81a3      	strh	r3, [r4, #12]
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	6063      	str	r3, [r4, #4]
 8009aa6:	6923      	ldr	r3, [r4, #16]
 8009aa8:	6023      	str	r3, [r4, #0]
 8009aaa:	89a3      	ldrh	r3, [r4, #12]
 8009aac:	f043 0308 	orr.w	r3, r3, #8
 8009ab0:	81a3      	strh	r3, [r4, #12]
 8009ab2:	6923      	ldr	r3, [r4, #16]
 8009ab4:	b94b      	cbnz	r3, 8009aca <__swsetup_r+0x9a>
 8009ab6:	89a3      	ldrh	r3, [r4, #12]
 8009ab8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009abc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009ac0:	d003      	beq.n	8009aca <__swsetup_r+0x9a>
 8009ac2:	4621      	mov	r1, r4
 8009ac4:	4630      	mov	r0, r6
 8009ac6:	f000 f9ff 	bl	8009ec8 <__smakebuf_r>
 8009aca:	89a0      	ldrh	r0, [r4, #12]
 8009acc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009ad0:	f010 0301 	ands.w	r3, r0, #1
 8009ad4:	d00a      	beq.n	8009aec <__swsetup_r+0xbc>
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	60a3      	str	r3, [r4, #8]
 8009ada:	6963      	ldr	r3, [r4, #20]
 8009adc:	425b      	negs	r3, r3
 8009ade:	61a3      	str	r3, [r4, #24]
 8009ae0:	6923      	ldr	r3, [r4, #16]
 8009ae2:	b943      	cbnz	r3, 8009af6 <__swsetup_r+0xc6>
 8009ae4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009ae8:	d1ba      	bne.n	8009a60 <__swsetup_r+0x30>
 8009aea:	bd70      	pop	{r4, r5, r6, pc}
 8009aec:	0781      	lsls	r1, r0, #30
 8009aee:	bf58      	it	pl
 8009af0:	6963      	ldrpl	r3, [r4, #20]
 8009af2:	60a3      	str	r3, [r4, #8]
 8009af4:	e7f4      	b.n	8009ae0 <__swsetup_r+0xb0>
 8009af6:	2000      	movs	r0, #0
 8009af8:	e7f7      	b.n	8009aea <__swsetup_r+0xba>
 8009afa:	bf00      	nop
 8009afc:	20000014 	.word	0x20000014
 8009b00:	0800b9c4 	.word	0x0800b9c4
 8009b04:	0800b9e4 	.word	0x0800b9e4
 8009b08:	0800b9a4 	.word	0x0800b9a4

08009b0c <__sflush_r>:
 8009b0c:	898a      	ldrh	r2, [r1, #12]
 8009b0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b12:	4605      	mov	r5, r0
 8009b14:	0710      	lsls	r0, r2, #28
 8009b16:	460c      	mov	r4, r1
 8009b18:	d458      	bmi.n	8009bcc <__sflush_r+0xc0>
 8009b1a:	684b      	ldr	r3, [r1, #4]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	dc05      	bgt.n	8009b2c <__sflush_r+0x20>
 8009b20:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	dc02      	bgt.n	8009b2c <__sflush_r+0x20>
 8009b26:	2000      	movs	r0, #0
 8009b28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009b2e:	2e00      	cmp	r6, #0
 8009b30:	d0f9      	beq.n	8009b26 <__sflush_r+0x1a>
 8009b32:	2300      	movs	r3, #0
 8009b34:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009b38:	682f      	ldr	r7, [r5, #0]
 8009b3a:	602b      	str	r3, [r5, #0]
 8009b3c:	d032      	beq.n	8009ba4 <__sflush_r+0x98>
 8009b3e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009b40:	89a3      	ldrh	r3, [r4, #12]
 8009b42:	075a      	lsls	r2, r3, #29
 8009b44:	d505      	bpl.n	8009b52 <__sflush_r+0x46>
 8009b46:	6863      	ldr	r3, [r4, #4]
 8009b48:	1ac0      	subs	r0, r0, r3
 8009b4a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009b4c:	b10b      	cbz	r3, 8009b52 <__sflush_r+0x46>
 8009b4e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009b50:	1ac0      	subs	r0, r0, r3
 8009b52:	2300      	movs	r3, #0
 8009b54:	4602      	mov	r2, r0
 8009b56:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009b58:	6a21      	ldr	r1, [r4, #32]
 8009b5a:	4628      	mov	r0, r5
 8009b5c:	47b0      	blx	r6
 8009b5e:	1c43      	adds	r3, r0, #1
 8009b60:	89a3      	ldrh	r3, [r4, #12]
 8009b62:	d106      	bne.n	8009b72 <__sflush_r+0x66>
 8009b64:	6829      	ldr	r1, [r5, #0]
 8009b66:	291d      	cmp	r1, #29
 8009b68:	d82c      	bhi.n	8009bc4 <__sflush_r+0xb8>
 8009b6a:	4a2a      	ldr	r2, [pc, #168]	; (8009c14 <__sflush_r+0x108>)
 8009b6c:	40ca      	lsrs	r2, r1
 8009b6e:	07d6      	lsls	r6, r2, #31
 8009b70:	d528      	bpl.n	8009bc4 <__sflush_r+0xb8>
 8009b72:	2200      	movs	r2, #0
 8009b74:	6062      	str	r2, [r4, #4]
 8009b76:	04d9      	lsls	r1, r3, #19
 8009b78:	6922      	ldr	r2, [r4, #16]
 8009b7a:	6022      	str	r2, [r4, #0]
 8009b7c:	d504      	bpl.n	8009b88 <__sflush_r+0x7c>
 8009b7e:	1c42      	adds	r2, r0, #1
 8009b80:	d101      	bne.n	8009b86 <__sflush_r+0x7a>
 8009b82:	682b      	ldr	r3, [r5, #0]
 8009b84:	b903      	cbnz	r3, 8009b88 <__sflush_r+0x7c>
 8009b86:	6560      	str	r0, [r4, #84]	; 0x54
 8009b88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009b8a:	602f      	str	r7, [r5, #0]
 8009b8c:	2900      	cmp	r1, #0
 8009b8e:	d0ca      	beq.n	8009b26 <__sflush_r+0x1a>
 8009b90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009b94:	4299      	cmp	r1, r3
 8009b96:	d002      	beq.n	8009b9e <__sflush_r+0x92>
 8009b98:	4628      	mov	r0, r5
 8009b9a:	f000 f9d5 	bl	8009f48 <_free_r>
 8009b9e:	2000      	movs	r0, #0
 8009ba0:	6360      	str	r0, [r4, #52]	; 0x34
 8009ba2:	e7c1      	b.n	8009b28 <__sflush_r+0x1c>
 8009ba4:	6a21      	ldr	r1, [r4, #32]
 8009ba6:	2301      	movs	r3, #1
 8009ba8:	4628      	mov	r0, r5
 8009baa:	47b0      	blx	r6
 8009bac:	1c41      	adds	r1, r0, #1
 8009bae:	d1c7      	bne.n	8009b40 <__sflush_r+0x34>
 8009bb0:	682b      	ldr	r3, [r5, #0]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d0c4      	beq.n	8009b40 <__sflush_r+0x34>
 8009bb6:	2b1d      	cmp	r3, #29
 8009bb8:	d001      	beq.n	8009bbe <__sflush_r+0xb2>
 8009bba:	2b16      	cmp	r3, #22
 8009bbc:	d101      	bne.n	8009bc2 <__sflush_r+0xb6>
 8009bbe:	602f      	str	r7, [r5, #0]
 8009bc0:	e7b1      	b.n	8009b26 <__sflush_r+0x1a>
 8009bc2:	89a3      	ldrh	r3, [r4, #12]
 8009bc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009bc8:	81a3      	strh	r3, [r4, #12]
 8009bca:	e7ad      	b.n	8009b28 <__sflush_r+0x1c>
 8009bcc:	690f      	ldr	r7, [r1, #16]
 8009bce:	2f00      	cmp	r7, #0
 8009bd0:	d0a9      	beq.n	8009b26 <__sflush_r+0x1a>
 8009bd2:	0793      	lsls	r3, r2, #30
 8009bd4:	680e      	ldr	r6, [r1, #0]
 8009bd6:	bf08      	it	eq
 8009bd8:	694b      	ldreq	r3, [r1, #20]
 8009bda:	600f      	str	r7, [r1, #0]
 8009bdc:	bf18      	it	ne
 8009bde:	2300      	movne	r3, #0
 8009be0:	eba6 0807 	sub.w	r8, r6, r7
 8009be4:	608b      	str	r3, [r1, #8]
 8009be6:	f1b8 0f00 	cmp.w	r8, #0
 8009bea:	dd9c      	ble.n	8009b26 <__sflush_r+0x1a>
 8009bec:	6a21      	ldr	r1, [r4, #32]
 8009bee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009bf0:	4643      	mov	r3, r8
 8009bf2:	463a      	mov	r2, r7
 8009bf4:	4628      	mov	r0, r5
 8009bf6:	47b0      	blx	r6
 8009bf8:	2800      	cmp	r0, #0
 8009bfa:	dc06      	bgt.n	8009c0a <__sflush_r+0xfe>
 8009bfc:	89a3      	ldrh	r3, [r4, #12]
 8009bfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c02:	81a3      	strh	r3, [r4, #12]
 8009c04:	f04f 30ff 	mov.w	r0, #4294967295
 8009c08:	e78e      	b.n	8009b28 <__sflush_r+0x1c>
 8009c0a:	4407      	add	r7, r0
 8009c0c:	eba8 0800 	sub.w	r8, r8, r0
 8009c10:	e7e9      	b.n	8009be6 <__sflush_r+0xda>
 8009c12:	bf00      	nop
 8009c14:	20400001 	.word	0x20400001

08009c18 <_fflush_r>:
 8009c18:	b538      	push	{r3, r4, r5, lr}
 8009c1a:	690b      	ldr	r3, [r1, #16]
 8009c1c:	4605      	mov	r5, r0
 8009c1e:	460c      	mov	r4, r1
 8009c20:	b913      	cbnz	r3, 8009c28 <_fflush_r+0x10>
 8009c22:	2500      	movs	r5, #0
 8009c24:	4628      	mov	r0, r5
 8009c26:	bd38      	pop	{r3, r4, r5, pc}
 8009c28:	b118      	cbz	r0, 8009c32 <_fflush_r+0x1a>
 8009c2a:	6983      	ldr	r3, [r0, #24]
 8009c2c:	b90b      	cbnz	r3, 8009c32 <_fflush_r+0x1a>
 8009c2e:	f000 f887 	bl	8009d40 <__sinit>
 8009c32:	4b14      	ldr	r3, [pc, #80]	; (8009c84 <_fflush_r+0x6c>)
 8009c34:	429c      	cmp	r4, r3
 8009c36:	d11b      	bne.n	8009c70 <_fflush_r+0x58>
 8009c38:	686c      	ldr	r4, [r5, #4]
 8009c3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d0ef      	beq.n	8009c22 <_fflush_r+0xa>
 8009c42:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009c44:	07d0      	lsls	r0, r2, #31
 8009c46:	d404      	bmi.n	8009c52 <_fflush_r+0x3a>
 8009c48:	0599      	lsls	r1, r3, #22
 8009c4a:	d402      	bmi.n	8009c52 <_fflush_r+0x3a>
 8009c4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009c4e:	f000 f915 	bl	8009e7c <__retarget_lock_acquire_recursive>
 8009c52:	4628      	mov	r0, r5
 8009c54:	4621      	mov	r1, r4
 8009c56:	f7ff ff59 	bl	8009b0c <__sflush_r>
 8009c5a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009c5c:	07da      	lsls	r2, r3, #31
 8009c5e:	4605      	mov	r5, r0
 8009c60:	d4e0      	bmi.n	8009c24 <_fflush_r+0xc>
 8009c62:	89a3      	ldrh	r3, [r4, #12]
 8009c64:	059b      	lsls	r3, r3, #22
 8009c66:	d4dd      	bmi.n	8009c24 <_fflush_r+0xc>
 8009c68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009c6a:	f000 f908 	bl	8009e7e <__retarget_lock_release_recursive>
 8009c6e:	e7d9      	b.n	8009c24 <_fflush_r+0xc>
 8009c70:	4b05      	ldr	r3, [pc, #20]	; (8009c88 <_fflush_r+0x70>)
 8009c72:	429c      	cmp	r4, r3
 8009c74:	d101      	bne.n	8009c7a <_fflush_r+0x62>
 8009c76:	68ac      	ldr	r4, [r5, #8]
 8009c78:	e7df      	b.n	8009c3a <_fflush_r+0x22>
 8009c7a:	4b04      	ldr	r3, [pc, #16]	; (8009c8c <_fflush_r+0x74>)
 8009c7c:	429c      	cmp	r4, r3
 8009c7e:	bf08      	it	eq
 8009c80:	68ec      	ldreq	r4, [r5, #12]
 8009c82:	e7da      	b.n	8009c3a <_fflush_r+0x22>
 8009c84:	0800b9c4 	.word	0x0800b9c4
 8009c88:	0800b9e4 	.word	0x0800b9e4
 8009c8c:	0800b9a4 	.word	0x0800b9a4

08009c90 <std>:
 8009c90:	2300      	movs	r3, #0
 8009c92:	b510      	push	{r4, lr}
 8009c94:	4604      	mov	r4, r0
 8009c96:	e9c0 3300 	strd	r3, r3, [r0]
 8009c9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009c9e:	6083      	str	r3, [r0, #8]
 8009ca0:	8181      	strh	r1, [r0, #12]
 8009ca2:	6643      	str	r3, [r0, #100]	; 0x64
 8009ca4:	81c2      	strh	r2, [r0, #14]
 8009ca6:	6183      	str	r3, [r0, #24]
 8009ca8:	4619      	mov	r1, r3
 8009caa:	2208      	movs	r2, #8
 8009cac:	305c      	adds	r0, #92	; 0x5c
 8009cae:	f7ff fdd7 	bl	8009860 <memset>
 8009cb2:	4b05      	ldr	r3, [pc, #20]	; (8009cc8 <std+0x38>)
 8009cb4:	6263      	str	r3, [r4, #36]	; 0x24
 8009cb6:	4b05      	ldr	r3, [pc, #20]	; (8009ccc <std+0x3c>)
 8009cb8:	62a3      	str	r3, [r4, #40]	; 0x28
 8009cba:	4b05      	ldr	r3, [pc, #20]	; (8009cd0 <std+0x40>)
 8009cbc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009cbe:	4b05      	ldr	r3, [pc, #20]	; (8009cd4 <std+0x44>)
 8009cc0:	6224      	str	r4, [r4, #32]
 8009cc2:	6323      	str	r3, [r4, #48]	; 0x30
 8009cc4:	bd10      	pop	{r4, pc}
 8009cc6:	bf00      	nop
 8009cc8:	0800a699 	.word	0x0800a699
 8009ccc:	0800a6bb 	.word	0x0800a6bb
 8009cd0:	0800a6f3 	.word	0x0800a6f3
 8009cd4:	0800a717 	.word	0x0800a717

08009cd8 <_cleanup_r>:
 8009cd8:	4901      	ldr	r1, [pc, #4]	; (8009ce0 <_cleanup_r+0x8>)
 8009cda:	f000 b8af 	b.w	8009e3c <_fwalk_reent>
 8009cde:	bf00      	nop
 8009ce0:	08009c19 	.word	0x08009c19

08009ce4 <__sfmoreglue>:
 8009ce4:	b570      	push	{r4, r5, r6, lr}
 8009ce6:	1e4a      	subs	r2, r1, #1
 8009ce8:	2568      	movs	r5, #104	; 0x68
 8009cea:	4355      	muls	r5, r2
 8009cec:	460e      	mov	r6, r1
 8009cee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009cf2:	f000 f979 	bl	8009fe8 <_malloc_r>
 8009cf6:	4604      	mov	r4, r0
 8009cf8:	b140      	cbz	r0, 8009d0c <__sfmoreglue+0x28>
 8009cfa:	2100      	movs	r1, #0
 8009cfc:	e9c0 1600 	strd	r1, r6, [r0]
 8009d00:	300c      	adds	r0, #12
 8009d02:	60a0      	str	r0, [r4, #8]
 8009d04:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009d08:	f7ff fdaa 	bl	8009860 <memset>
 8009d0c:	4620      	mov	r0, r4
 8009d0e:	bd70      	pop	{r4, r5, r6, pc}

08009d10 <__sfp_lock_acquire>:
 8009d10:	4801      	ldr	r0, [pc, #4]	; (8009d18 <__sfp_lock_acquire+0x8>)
 8009d12:	f000 b8b3 	b.w	8009e7c <__retarget_lock_acquire_recursive>
 8009d16:	bf00      	nop
 8009d18:	20001988 	.word	0x20001988

08009d1c <__sfp_lock_release>:
 8009d1c:	4801      	ldr	r0, [pc, #4]	; (8009d24 <__sfp_lock_release+0x8>)
 8009d1e:	f000 b8ae 	b.w	8009e7e <__retarget_lock_release_recursive>
 8009d22:	bf00      	nop
 8009d24:	20001988 	.word	0x20001988

08009d28 <__sinit_lock_acquire>:
 8009d28:	4801      	ldr	r0, [pc, #4]	; (8009d30 <__sinit_lock_acquire+0x8>)
 8009d2a:	f000 b8a7 	b.w	8009e7c <__retarget_lock_acquire_recursive>
 8009d2e:	bf00      	nop
 8009d30:	20001983 	.word	0x20001983

08009d34 <__sinit_lock_release>:
 8009d34:	4801      	ldr	r0, [pc, #4]	; (8009d3c <__sinit_lock_release+0x8>)
 8009d36:	f000 b8a2 	b.w	8009e7e <__retarget_lock_release_recursive>
 8009d3a:	bf00      	nop
 8009d3c:	20001983 	.word	0x20001983

08009d40 <__sinit>:
 8009d40:	b510      	push	{r4, lr}
 8009d42:	4604      	mov	r4, r0
 8009d44:	f7ff fff0 	bl	8009d28 <__sinit_lock_acquire>
 8009d48:	69a3      	ldr	r3, [r4, #24]
 8009d4a:	b11b      	cbz	r3, 8009d54 <__sinit+0x14>
 8009d4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d50:	f7ff bff0 	b.w	8009d34 <__sinit_lock_release>
 8009d54:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009d58:	6523      	str	r3, [r4, #80]	; 0x50
 8009d5a:	4b13      	ldr	r3, [pc, #76]	; (8009da8 <__sinit+0x68>)
 8009d5c:	4a13      	ldr	r2, [pc, #76]	; (8009dac <__sinit+0x6c>)
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	62a2      	str	r2, [r4, #40]	; 0x28
 8009d62:	42a3      	cmp	r3, r4
 8009d64:	bf04      	itt	eq
 8009d66:	2301      	moveq	r3, #1
 8009d68:	61a3      	streq	r3, [r4, #24]
 8009d6a:	4620      	mov	r0, r4
 8009d6c:	f000 f820 	bl	8009db0 <__sfp>
 8009d70:	6060      	str	r0, [r4, #4]
 8009d72:	4620      	mov	r0, r4
 8009d74:	f000 f81c 	bl	8009db0 <__sfp>
 8009d78:	60a0      	str	r0, [r4, #8]
 8009d7a:	4620      	mov	r0, r4
 8009d7c:	f000 f818 	bl	8009db0 <__sfp>
 8009d80:	2200      	movs	r2, #0
 8009d82:	60e0      	str	r0, [r4, #12]
 8009d84:	2104      	movs	r1, #4
 8009d86:	6860      	ldr	r0, [r4, #4]
 8009d88:	f7ff ff82 	bl	8009c90 <std>
 8009d8c:	68a0      	ldr	r0, [r4, #8]
 8009d8e:	2201      	movs	r2, #1
 8009d90:	2109      	movs	r1, #9
 8009d92:	f7ff ff7d 	bl	8009c90 <std>
 8009d96:	68e0      	ldr	r0, [r4, #12]
 8009d98:	2202      	movs	r2, #2
 8009d9a:	2112      	movs	r1, #18
 8009d9c:	f7ff ff78 	bl	8009c90 <std>
 8009da0:	2301      	movs	r3, #1
 8009da2:	61a3      	str	r3, [r4, #24]
 8009da4:	e7d2      	b.n	8009d4c <__sinit+0xc>
 8009da6:	bf00      	nop
 8009da8:	0800b9a0 	.word	0x0800b9a0
 8009dac:	08009cd9 	.word	0x08009cd9

08009db0 <__sfp>:
 8009db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009db2:	4607      	mov	r7, r0
 8009db4:	f7ff ffac 	bl	8009d10 <__sfp_lock_acquire>
 8009db8:	4b1e      	ldr	r3, [pc, #120]	; (8009e34 <__sfp+0x84>)
 8009dba:	681e      	ldr	r6, [r3, #0]
 8009dbc:	69b3      	ldr	r3, [r6, #24]
 8009dbe:	b913      	cbnz	r3, 8009dc6 <__sfp+0x16>
 8009dc0:	4630      	mov	r0, r6
 8009dc2:	f7ff ffbd 	bl	8009d40 <__sinit>
 8009dc6:	3648      	adds	r6, #72	; 0x48
 8009dc8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009dcc:	3b01      	subs	r3, #1
 8009dce:	d503      	bpl.n	8009dd8 <__sfp+0x28>
 8009dd0:	6833      	ldr	r3, [r6, #0]
 8009dd2:	b30b      	cbz	r3, 8009e18 <__sfp+0x68>
 8009dd4:	6836      	ldr	r6, [r6, #0]
 8009dd6:	e7f7      	b.n	8009dc8 <__sfp+0x18>
 8009dd8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009ddc:	b9d5      	cbnz	r5, 8009e14 <__sfp+0x64>
 8009dde:	4b16      	ldr	r3, [pc, #88]	; (8009e38 <__sfp+0x88>)
 8009de0:	60e3      	str	r3, [r4, #12]
 8009de2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009de6:	6665      	str	r5, [r4, #100]	; 0x64
 8009de8:	f000 f847 	bl	8009e7a <__retarget_lock_init_recursive>
 8009dec:	f7ff ff96 	bl	8009d1c <__sfp_lock_release>
 8009df0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009df4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009df8:	6025      	str	r5, [r4, #0]
 8009dfa:	61a5      	str	r5, [r4, #24]
 8009dfc:	2208      	movs	r2, #8
 8009dfe:	4629      	mov	r1, r5
 8009e00:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009e04:	f7ff fd2c 	bl	8009860 <memset>
 8009e08:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009e0c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009e10:	4620      	mov	r0, r4
 8009e12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e14:	3468      	adds	r4, #104	; 0x68
 8009e16:	e7d9      	b.n	8009dcc <__sfp+0x1c>
 8009e18:	2104      	movs	r1, #4
 8009e1a:	4638      	mov	r0, r7
 8009e1c:	f7ff ff62 	bl	8009ce4 <__sfmoreglue>
 8009e20:	4604      	mov	r4, r0
 8009e22:	6030      	str	r0, [r6, #0]
 8009e24:	2800      	cmp	r0, #0
 8009e26:	d1d5      	bne.n	8009dd4 <__sfp+0x24>
 8009e28:	f7ff ff78 	bl	8009d1c <__sfp_lock_release>
 8009e2c:	230c      	movs	r3, #12
 8009e2e:	603b      	str	r3, [r7, #0]
 8009e30:	e7ee      	b.n	8009e10 <__sfp+0x60>
 8009e32:	bf00      	nop
 8009e34:	0800b9a0 	.word	0x0800b9a0
 8009e38:	ffff0001 	.word	0xffff0001

08009e3c <_fwalk_reent>:
 8009e3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e40:	4606      	mov	r6, r0
 8009e42:	4688      	mov	r8, r1
 8009e44:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009e48:	2700      	movs	r7, #0
 8009e4a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009e4e:	f1b9 0901 	subs.w	r9, r9, #1
 8009e52:	d505      	bpl.n	8009e60 <_fwalk_reent+0x24>
 8009e54:	6824      	ldr	r4, [r4, #0]
 8009e56:	2c00      	cmp	r4, #0
 8009e58:	d1f7      	bne.n	8009e4a <_fwalk_reent+0xe>
 8009e5a:	4638      	mov	r0, r7
 8009e5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e60:	89ab      	ldrh	r3, [r5, #12]
 8009e62:	2b01      	cmp	r3, #1
 8009e64:	d907      	bls.n	8009e76 <_fwalk_reent+0x3a>
 8009e66:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009e6a:	3301      	adds	r3, #1
 8009e6c:	d003      	beq.n	8009e76 <_fwalk_reent+0x3a>
 8009e6e:	4629      	mov	r1, r5
 8009e70:	4630      	mov	r0, r6
 8009e72:	47c0      	blx	r8
 8009e74:	4307      	orrs	r7, r0
 8009e76:	3568      	adds	r5, #104	; 0x68
 8009e78:	e7e9      	b.n	8009e4e <_fwalk_reent+0x12>

08009e7a <__retarget_lock_init_recursive>:
 8009e7a:	4770      	bx	lr

08009e7c <__retarget_lock_acquire_recursive>:
 8009e7c:	4770      	bx	lr

08009e7e <__retarget_lock_release_recursive>:
 8009e7e:	4770      	bx	lr

08009e80 <__swhatbuf_r>:
 8009e80:	b570      	push	{r4, r5, r6, lr}
 8009e82:	460e      	mov	r6, r1
 8009e84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e88:	2900      	cmp	r1, #0
 8009e8a:	b096      	sub	sp, #88	; 0x58
 8009e8c:	4614      	mov	r4, r2
 8009e8e:	461d      	mov	r5, r3
 8009e90:	da07      	bge.n	8009ea2 <__swhatbuf_r+0x22>
 8009e92:	2300      	movs	r3, #0
 8009e94:	602b      	str	r3, [r5, #0]
 8009e96:	89b3      	ldrh	r3, [r6, #12]
 8009e98:	061a      	lsls	r2, r3, #24
 8009e9a:	d410      	bmi.n	8009ebe <__swhatbuf_r+0x3e>
 8009e9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009ea0:	e00e      	b.n	8009ec0 <__swhatbuf_r+0x40>
 8009ea2:	466a      	mov	r2, sp
 8009ea4:	f000 fc5e 	bl	800a764 <_fstat_r>
 8009ea8:	2800      	cmp	r0, #0
 8009eaa:	dbf2      	blt.n	8009e92 <__swhatbuf_r+0x12>
 8009eac:	9a01      	ldr	r2, [sp, #4]
 8009eae:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009eb2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009eb6:	425a      	negs	r2, r3
 8009eb8:	415a      	adcs	r2, r3
 8009eba:	602a      	str	r2, [r5, #0]
 8009ebc:	e7ee      	b.n	8009e9c <__swhatbuf_r+0x1c>
 8009ebe:	2340      	movs	r3, #64	; 0x40
 8009ec0:	2000      	movs	r0, #0
 8009ec2:	6023      	str	r3, [r4, #0]
 8009ec4:	b016      	add	sp, #88	; 0x58
 8009ec6:	bd70      	pop	{r4, r5, r6, pc}

08009ec8 <__smakebuf_r>:
 8009ec8:	898b      	ldrh	r3, [r1, #12]
 8009eca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009ecc:	079d      	lsls	r5, r3, #30
 8009ece:	4606      	mov	r6, r0
 8009ed0:	460c      	mov	r4, r1
 8009ed2:	d507      	bpl.n	8009ee4 <__smakebuf_r+0x1c>
 8009ed4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009ed8:	6023      	str	r3, [r4, #0]
 8009eda:	6123      	str	r3, [r4, #16]
 8009edc:	2301      	movs	r3, #1
 8009ede:	6163      	str	r3, [r4, #20]
 8009ee0:	b002      	add	sp, #8
 8009ee2:	bd70      	pop	{r4, r5, r6, pc}
 8009ee4:	ab01      	add	r3, sp, #4
 8009ee6:	466a      	mov	r2, sp
 8009ee8:	f7ff ffca 	bl	8009e80 <__swhatbuf_r>
 8009eec:	9900      	ldr	r1, [sp, #0]
 8009eee:	4605      	mov	r5, r0
 8009ef0:	4630      	mov	r0, r6
 8009ef2:	f000 f879 	bl	8009fe8 <_malloc_r>
 8009ef6:	b948      	cbnz	r0, 8009f0c <__smakebuf_r+0x44>
 8009ef8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009efc:	059a      	lsls	r2, r3, #22
 8009efe:	d4ef      	bmi.n	8009ee0 <__smakebuf_r+0x18>
 8009f00:	f023 0303 	bic.w	r3, r3, #3
 8009f04:	f043 0302 	orr.w	r3, r3, #2
 8009f08:	81a3      	strh	r3, [r4, #12]
 8009f0a:	e7e3      	b.n	8009ed4 <__smakebuf_r+0xc>
 8009f0c:	4b0d      	ldr	r3, [pc, #52]	; (8009f44 <__smakebuf_r+0x7c>)
 8009f0e:	62b3      	str	r3, [r6, #40]	; 0x28
 8009f10:	89a3      	ldrh	r3, [r4, #12]
 8009f12:	6020      	str	r0, [r4, #0]
 8009f14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f18:	81a3      	strh	r3, [r4, #12]
 8009f1a:	9b00      	ldr	r3, [sp, #0]
 8009f1c:	6163      	str	r3, [r4, #20]
 8009f1e:	9b01      	ldr	r3, [sp, #4]
 8009f20:	6120      	str	r0, [r4, #16]
 8009f22:	b15b      	cbz	r3, 8009f3c <__smakebuf_r+0x74>
 8009f24:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009f28:	4630      	mov	r0, r6
 8009f2a:	f000 fc2d 	bl	800a788 <_isatty_r>
 8009f2e:	b128      	cbz	r0, 8009f3c <__smakebuf_r+0x74>
 8009f30:	89a3      	ldrh	r3, [r4, #12]
 8009f32:	f023 0303 	bic.w	r3, r3, #3
 8009f36:	f043 0301 	orr.w	r3, r3, #1
 8009f3a:	81a3      	strh	r3, [r4, #12]
 8009f3c:	89a0      	ldrh	r0, [r4, #12]
 8009f3e:	4305      	orrs	r5, r0
 8009f40:	81a5      	strh	r5, [r4, #12]
 8009f42:	e7cd      	b.n	8009ee0 <__smakebuf_r+0x18>
 8009f44:	08009cd9 	.word	0x08009cd9

08009f48 <_free_r>:
 8009f48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009f4a:	2900      	cmp	r1, #0
 8009f4c:	d048      	beq.n	8009fe0 <_free_r+0x98>
 8009f4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f52:	9001      	str	r0, [sp, #4]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	f1a1 0404 	sub.w	r4, r1, #4
 8009f5a:	bfb8      	it	lt
 8009f5c:	18e4      	addlt	r4, r4, r3
 8009f5e:	f000 fc35 	bl	800a7cc <__malloc_lock>
 8009f62:	4a20      	ldr	r2, [pc, #128]	; (8009fe4 <_free_r+0x9c>)
 8009f64:	9801      	ldr	r0, [sp, #4]
 8009f66:	6813      	ldr	r3, [r2, #0]
 8009f68:	4615      	mov	r5, r2
 8009f6a:	b933      	cbnz	r3, 8009f7a <_free_r+0x32>
 8009f6c:	6063      	str	r3, [r4, #4]
 8009f6e:	6014      	str	r4, [r2, #0]
 8009f70:	b003      	add	sp, #12
 8009f72:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009f76:	f000 bc2f 	b.w	800a7d8 <__malloc_unlock>
 8009f7a:	42a3      	cmp	r3, r4
 8009f7c:	d90b      	bls.n	8009f96 <_free_r+0x4e>
 8009f7e:	6821      	ldr	r1, [r4, #0]
 8009f80:	1862      	adds	r2, r4, r1
 8009f82:	4293      	cmp	r3, r2
 8009f84:	bf04      	itt	eq
 8009f86:	681a      	ldreq	r2, [r3, #0]
 8009f88:	685b      	ldreq	r3, [r3, #4]
 8009f8a:	6063      	str	r3, [r4, #4]
 8009f8c:	bf04      	itt	eq
 8009f8e:	1852      	addeq	r2, r2, r1
 8009f90:	6022      	streq	r2, [r4, #0]
 8009f92:	602c      	str	r4, [r5, #0]
 8009f94:	e7ec      	b.n	8009f70 <_free_r+0x28>
 8009f96:	461a      	mov	r2, r3
 8009f98:	685b      	ldr	r3, [r3, #4]
 8009f9a:	b10b      	cbz	r3, 8009fa0 <_free_r+0x58>
 8009f9c:	42a3      	cmp	r3, r4
 8009f9e:	d9fa      	bls.n	8009f96 <_free_r+0x4e>
 8009fa0:	6811      	ldr	r1, [r2, #0]
 8009fa2:	1855      	adds	r5, r2, r1
 8009fa4:	42a5      	cmp	r5, r4
 8009fa6:	d10b      	bne.n	8009fc0 <_free_r+0x78>
 8009fa8:	6824      	ldr	r4, [r4, #0]
 8009faa:	4421      	add	r1, r4
 8009fac:	1854      	adds	r4, r2, r1
 8009fae:	42a3      	cmp	r3, r4
 8009fb0:	6011      	str	r1, [r2, #0]
 8009fb2:	d1dd      	bne.n	8009f70 <_free_r+0x28>
 8009fb4:	681c      	ldr	r4, [r3, #0]
 8009fb6:	685b      	ldr	r3, [r3, #4]
 8009fb8:	6053      	str	r3, [r2, #4]
 8009fba:	4421      	add	r1, r4
 8009fbc:	6011      	str	r1, [r2, #0]
 8009fbe:	e7d7      	b.n	8009f70 <_free_r+0x28>
 8009fc0:	d902      	bls.n	8009fc8 <_free_r+0x80>
 8009fc2:	230c      	movs	r3, #12
 8009fc4:	6003      	str	r3, [r0, #0]
 8009fc6:	e7d3      	b.n	8009f70 <_free_r+0x28>
 8009fc8:	6825      	ldr	r5, [r4, #0]
 8009fca:	1961      	adds	r1, r4, r5
 8009fcc:	428b      	cmp	r3, r1
 8009fce:	bf04      	itt	eq
 8009fd0:	6819      	ldreq	r1, [r3, #0]
 8009fd2:	685b      	ldreq	r3, [r3, #4]
 8009fd4:	6063      	str	r3, [r4, #4]
 8009fd6:	bf04      	itt	eq
 8009fd8:	1949      	addeq	r1, r1, r5
 8009fda:	6021      	streq	r1, [r4, #0]
 8009fdc:	6054      	str	r4, [r2, #4]
 8009fde:	e7c7      	b.n	8009f70 <_free_r+0x28>
 8009fe0:	b003      	add	sp, #12
 8009fe2:	bd30      	pop	{r4, r5, pc}
 8009fe4:	200000cc 	.word	0x200000cc

08009fe8 <_malloc_r>:
 8009fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fea:	1ccd      	adds	r5, r1, #3
 8009fec:	f025 0503 	bic.w	r5, r5, #3
 8009ff0:	3508      	adds	r5, #8
 8009ff2:	2d0c      	cmp	r5, #12
 8009ff4:	bf38      	it	cc
 8009ff6:	250c      	movcc	r5, #12
 8009ff8:	2d00      	cmp	r5, #0
 8009ffa:	4606      	mov	r6, r0
 8009ffc:	db01      	blt.n	800a002 <_malloc_r+0x1a>
 8009ffe:	42a9      	cmp	r1, r5
 800a000:	d903      	bls.n	800a00a <_malloc_r+0x22>
 800a002:	230c      	movs	r3, #12
 800a004:	6033      	str	r3, [r6, #0]
 800a006:	2000      	movs	r0, #0
 800a008:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a00a:	f000 fbdf 	bl	800a7cc <__malloc_lock>
 800a00e:	4921      	ldr	r1, [pc, #132]	; (800a094 <_malloc_r+0xac>)
 800a010:	680a      	ldr	r2, [r1, #0]
 800a012:	4614      	mov	r4, r2
 800a014:	b99c      	cbnz	r4, 800a03e <_malloc_r+0x56>
 800a016:	4f20      	ldr	r7, [pc, #128]	; (800a098 <_malloc_r+0xb0>)
 800a018:	683b      	ldr	r3, [r7, #0]
 800a01a:	b923      	cbnz	r3, 800a026 <_malloc_r+0x3e>
 800a01c:	4621      	mov	r1, r4
 800a01e:	4630      	mov	r0, r6
 800a020:	f000 fb2a 	bl	800a678 <_sbrk_r>
 800a024:	6038      	str	r0, [r7, #0]
 800a026:	4629      	mov	r1, r5
 800a028:	4630      	mov	r0, r6
 800a02a:	f000 fb25 	bl	800a678 <_sbrk_r>
 800a02e:	1c43      	adds	r3, r0, #1
 800a030:	d123      	bne.n	800a07a <_malloc_r+0x92>
 800a032:	230c      	movs	r3, #12
 800a034:	6033      	str	r3, [r6, #0]
 800a036:	4630      	mov	r0, r6
 800a038:	f000 fbce 	bl	800a7d8 <__malloc_unlock>
 800a03c:	e7e3      	b.n	800a006 <_malloc_r+0x1e>
 800a03e:	6823      	ldr	r3, [r4, #0]
 800a040:	1b5b      	subs	r3, r3, r5
 800a042:	d417      	bmi.n	800a074 <_malloc_r+0x8c>
 800a044:	2b0b      	cmp	r3, #11
 800a046:	d903      	bls.n	800a050 <_malloc_r+0x68>
 800a048:	6023      	str	r3, [r4, #0]
 800a04a:	441c      	add	r4, r3
 800a04c:	6025      	str	r5, [r4, #0]
 800a04e:	e004      	b.n	800a05a <_malloc_r+0x72>
 800a050:	6863      	ldr	r3, [r4, #4]
 800a052:	42a2      	cmp	r2, r4
 800a054:	bf0c      	ite	eq
 800a056:	600b      	streq	r3, [r1, #0]
 800a058:	6053      	strne	r3, [r2, #4]
 800a05a:	4630      	mov	r0, r6
 800a05c:	f000 fbbc 	bl	800a7d8 <__malloc_unlock>
 800a060:	f104 000b 	add.w	r0, r4, #11
 800a064:	1d23      	adds	r3, r4, #4
 800a066:	f020 0007 	bic.w	r0, r0, #7
 800a06a:	1ac2      	subs	r2, r0, r3
 800a06c:	d0cc      	beq.n	800a008 <_malloc_r+0x20>
 800a06e:	1a1b      	subs	r3, r3, r0
 800a070:	50a3      	str	r3, [r4, r2]
 800a072:	e7c9      	b.n	800a008 <_malloc_r+0x20>
 800a074:	4622      	mov	r2, r4
 800a076:	6864      	ldr	r4, [r4, #4]
 800a078:	e7cc      	b.n	800a014 <_malloc_r+0x2c>
 800a07a:	1cc4      	adds	r4, r0, #3
 800a07c:	f024 0403 	bic.w	r4, r4, #3
 800a080:	42a0      	cmp	r0, r4
 800a082:	d0e3      	beq.n	800a04c <_malloc_r+0x64>
 800a084:	1a21      	subs	r1, r4, r0
 800a086:	4630      	mov	r0, r6
 800a088:	f000 faf6 	bl	800a678 <_sbrk_r>
 800a08c:	3001      	adds	r0, #1
 800a08e:	d1dd      	bne.n	800a04c <_malloc_r+0x64>
 800a090:	e7cf      	b.n	800a032 <_malloc_r+0x4a>
 800a092:	bf00      	nop
 800a094:	200000cc 	.word	0x200000cc
 800a098:	200000d0 	.word	0x200000d0

0800a09c <__sfputc_r>:
 800a09c:	6893      	ldr	r3, [r2, #8]
 800a09e:	3b01      	subs	r3, #1
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	b410      	push	{r4}
 800a0a4:	6093      	str	r3, [r2, #8]
 800a0a6:	da08      	bge.n	800a0ba <__sfputc_r+0x1e>
 800a0a8:	6994      	ldr	r4, [r2, #24]
 800a0aa:	42a3      	cmp	r3, r4
 800a0ac:	db01      	blt.n	800a0b2 <__sfputc_r+0x16>
 800a0ae:	290a      	cmp	r1, #10
 800a0b0:	d103      	bne.n	800a0ba <__sfputc_r+0x1e>
 800a0b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a0b6:	f7ff bc69 	b.w	800998c <__swbuf_r>
 800a0ba:	6813      	ldr	r3, [r2, #0]
 800a0bc:	1c58      	adds	r0, r3, #1
 800a0be:	6010      	str	r0, [r2, #0]
 800a0c0:	7019      	strb	r1, [r3, #0]
 800a0c2:	4608      	mov	r0, r1
 800a0c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a0c8:	4770      	bx	lr

0800a0ca <__sfputs_r>:
 800a0ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0cc:	4606      	mov	r6, r0
 800a0ce:	460f      	mov	r7, r1
 800a0d0:	4614      	mov	r4, r2
 800a0d2:	18d5      	adds	r5, r2, r3
 800a0d4:	42ac      	cmp	r4, r5
 800a0d6:	d101      	bne.n	800a0dc <__sfputs_r+0x12>
 800a0d8:	2000      	movs	r0, #0
 800a0da:	e007      	b.n	800a0ec <__sfputs_r+0x22>
 800a0dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0e0:	463a      	mov	r2, r7
 800a0e2:	4630      	mov	r0, r6
 800a0e4:	f7ff ffda 	bl	800a09c <__sfputc_r>
 800a0e8:	1c43      	adds	r3, r0, #1
 800a0ea:	d1f3      	bne.n	800a0d4 <__sfputs_r+0xa>
 800a0ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a0f0 <_vfiprintf_r>:
 800a0f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0f4:	460d      	mov	r5, r1
 800a0f6:	b09d      	sub	sp, #116	; 0x74
 800a0f8:	4614      	mov	r4, r2
 800a0fa:	4698      	mov	r8, r3
 800a0fc:	4606      	mov	r6, r0
 800a0fe:	b118      	cbz	r0, 800a108 <_vfiprintf_r+0x18>
 800a100:	6983      	ldr	r3, [r0, #24]
 800a102:	b90b      	cbnz	r3, 800a108 <_vfiprintf_r+0x18>
 800a104:	f7ff fe1c 	bl	8009d40 <__sinit>
 800a108:	4b89      	ldr	r3, [pc, #548]	; (800a330 <_vfiprintf_r+0x240>)
 800a10a:	429d      	cmp	r5, r3
 800a10c:	d11b      	bne.n	800a146 <_vfiprintf_r+0x56>
 800a10e:	6875      	ldr	r5, [r6, #4]
 800a110:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a112:	07d9      	lsls	r1, r3, #31
 800a114:	d405      	bmi.n	800a122 <_vfiprintf_r+0x32>
 800a116:	89ab      	ldrh	r3, [r5, #12]
 800a118:	059a      	lsls	r2, r3, #22
 800a11a:	d402      	bmi.n	800a122 <_vfiprintf_r+0x32>
 800a11c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a11e:	f7ff fead 	bl	8009e7c <__retarget_lock_acquire_recursive>
 800a122:	89ab      	ldrh	r3, [r5, #12]
 800a124:	071b      	lsls	r3, r3, #28
 800a126:	d501      	bpl.n	800a12c <_vfiprintf_r+0x3c>
 800a128:	692b      	ldr	r3, [r5, #16]
 800a12a:	b9eb      	cbnz	r3, 800a168 <_vfiprintf_r+0x78>
 800a12c:	4629      	mov	r1, r5
 800a12e:	4630      	mov	r0, r6
 800a130:	f7ff fc7e 	bl	8009a30 <__swsetup_r>
 800a134:	b1c0      	cbz	r0, 800a168 <_vfiprintf_r+0x78>
 800a136:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a138:	07dc      	lsls	r4, r3, #31
 800a13a:	d50e      	bpl.n	800a15a <_vfiprintf_r+0x6a>
 800a13c:	f04f 30ff 	mov.w	r0, #4294967295
 800a140:	b01d      	add	sp, #116	; 0x74
 800a142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a146:	4b7b      	ldr	r3, [pc, #492]	; (800a334 <_vfiprintf_r+0x244>)
 800a148:	429d      	cmp	r5, r3
 800a14a:	d101      	bne.n	800a150 <_vfiprintf_r+0x60>
 800a14c:	68b5      	ldr	r5, [r6, #8]
 800a14e:	e7df      	b.n	800a110 <_vfiprintf_r+0x20>
 800a150:	4b79      	ldr	r3, [pc, #484]	; (800a338 <_vfiprintf_r+0x248>)
 800a152:	429d      	cmp	r5, r3
 800a154:	bf08      	it	eq
 800a156:	68f5      	ldreq	r5, [r6, #12]
 800a158:	e7da      	b.n	800a110 <_vfiprintf_r+0x20>
 800a15a:	89ab      	ldrh	r3, [r5, #12]
 800a15c:	0598      	lsls	r0, r3, #22
 800a15e:	d4ed      	bmi.n	800a13c <_vfiprintf_r+0x4c>
 800a160:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a162:	f7ff fe8c 	bl	8009e7e <__retarget_lock_release_recursive>
 800a166:	e7e9      	b.n	800a13c <_vfiprintf_r+0x4c>
 800a168:	2300      	movs	r3, #0
 800a16a:	9309      	str	r3, [sp, #36]	; 0x24
 800a16c:	2320      	movs	r3, #32
 800a16e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a172:	f8cd 800c 	str.w	r8, [sp, #12]
 800a176:	2330      	movs	r3, #48	; 0x30
 800a178:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a33c <_vfiprintf_r+0x24c>
 800a17c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a180:	f04f 0901 	mov.w	r9, #1
 800a184:	4623      	mov	r3, r4
 800a186:	469a      	mov	sl, r3
 800a188:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a18c:	b10a      	cbz	r2, 800a192 <_vfiprintf_r+0xa2>
 800a18e:	2a25      	cmp	r2, #37	; 0x25
 800a190:	d1f9      	bne.n	800a186 <_vfiprintf_r+0x96>
 800a192:	ebba 0b04 	subs.w	fp, sl, r4
 800a196:	d00b      	beq.n	800a1b0 <_vfiprintf_r+0xc0>
 800a198:	465b      	mov	r3, fp
 800a19a:	4622      	mov	r2, r4
 800a19c:	4629      	mov	r1, r5
 800a19e:	4630      	mov	r0, r6
 800a1a0:	f7ff ff93 	bl	800a0ca <__sfputs_r>
 800a1a4:	3001      	adds	r0, #1
 800a1a6:	f000 80aa 	beq.w	800a2fe <_vfiprintf_r+0x20e>
 800a1aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a1ac:	445a      	add	r2, fp
 800a1ae:	9209      	str	r2, [sp, #36]	; 0x24
 800a1b0:	f89a 3000 	ldrb.w	r3, [sl]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	f000 80a2 	beq.w	800a2fe <_vfiprintf_r+0x20e>
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	f04f 32ff 	mov.w	r2, #4294967295
 800a1c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a1c4:	f10a 0a01 	add.w	sl, sl, #1
 800a1c8:	9304      	str	r3, [sp, #16]
 800a1ca:	9307      	str	r3, [sp, #28]
 800a1cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a1d0:	931a      	str	r3, [sp, #104]	; 0x68
 800a1d2:	4654      	mov	r4, sl
 800a1d4:	2205      	movs	r2, #5
 800a1d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1da:	4858      	ldr	r0, [pc, #352]	; (800a33c <_vfiprintf_r+0x24c>)
 800a1dc:	f7f5 fff8 	bl	80001d0 <memchr>
 800a1e0:	9a04      	ldr	r2, [sp, #16]
 800a1e2:	b9d8      	cbnz	r0, 800a21c <_vfiprintf_r+0x12c>
 800a1e4:	06d1      	lsls	r1, r2, #27
 800a1e6:	bf44      	itt	mi
 800a1e8:	2320      	movmi	r3, #32
 800a1ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a1ee:	0713      	lsls	r3, r2, #28
 800a1f0:	bf44      	itt	mi
 800a1f2:	232b      	movmi	r3, #43	; 0x2b
 800a1f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a1f8:	f89a 3000 	ldrb.w	r3, [sl]
 800a1fc:	2b2a      	cmp	r3, #42	; 0x2a
 800a1fe:	d015      	beq.n	800a22c <_vfiprintf_r+0x13c>
 800a200:	9a07      	ldr	r2, [sp, #28]
 800a202:	4654      	mov	r4, sl
 800a204:	2000      	movs	r0, #0
 800a206:	f04f 0c0a 	mov.w	ip, #10
 800a20a:	4621      	mov	r1, r4
 800a20c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a210:	3b30      	subs	r3, #48	; 0x30
 800a212:	2b09      	cmp	r3, #9
 800a214:	d94e      	bls.n	800a2b4 <_vfiprintf_r+0x1c4>
 800a216:	b1b0      	cbz	r0, 800a246 <_vfiprintf_r+0x156>
 800a218:	9207      	str	r2, [sp, #28]
 800a21a:	e014      	b.n	800a246 <_vfiprintf_r+0x156>
 800a21c:	eba0 0308 	sub.w	r3, r0, r8
 800a220:	fa09 f303 	lsl.w	r3, r9, r3
 800a224:	4313      	orrs	r3, r2
 800a226:	9304      	str	r3, [sp, #16]
 800a228:	46a2      	mov	sl, r4
 800a22a:	e7d2      	b.n	800a1d2 <_vfiprintf_r+0xe2>
 800a22c:	9b03      	ldr	r3, [sp, #12]
 800a22e:	1d19      	adds	r1, r3, #4
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	9103      	str	r1, [sp, #12]
 800a234:	2b00      	cmp	r3, #0
 800a236:	bfbb      	ittet	lt
 800a238:	425b      	neglt	r3, r3
 800a23a:	f042 0202 	orrlt.w	r2, r2, #2
 800a23e:	9307      	strge	r3, [sp, #28]
 800a240:	9307      	strlt	r3, [sp, #28]
 800a242:	bfb8      	it	lt
 800a244:	9204      	strlt	r2, [sp, #16]
 800a246:	7823      	ldrb	r3, [r4, #0]
 800a248:	2b2e      	cmp	r3, #46	; 0x2e
 800a24a:	d10c      	bne.n	800a266 <_vfiprintf_r+0x176>
 800a24c:	7863      	ldrb	r3, [r4, #1]
 800a24e:	2b2a      	cmp	r3, #42	; 0x2a
 800a250:	d135      	bne.n	800a2be <_vfiprintf_r+0x1ce>
 800a252:	9b03      	ldr	r3, [sp, #12]
 800a254:	1d1a      	adds	r2, r3, #4
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	9203      	str	r2, [sp, #12]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	bfb8      	it	lt
 800a25e:	f04f 33ff 	movlt.w	r3, #4294967295
 800a262:	3402      	adds	r4, #2
 800a264:	9305      	str	r3, [sp, #20]
 800a266:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a34c <_vfiprintf_r+0x25c>
 800a26a:	7821      	ldrb	r1, [r4, #0]
 800a26c:	2203      	movs	r2, #3
 800a26e:	4650      	mov	r0, sl
 800a270:	f7f5 ffae 	bl	80001d0 <memchr>
 800a274:	b140      	cbz	r0, 800a288 <_vfiprintf_r+0x198>
 800a276:	2340      	movs	r3, #64	; 0x40
 800a278:	eba0 000a 	sub.w	r0, r0, sl
 800a27c:	fa03 f000 	lsl.w	r0, r3, r0
 800a280:	9b04      	ldr	r3, [sp, #16]
 800a282:	4303      	orrs	r3, r0
 800a284:	3401      	adds	r4, #1
 800a286:	9304      	str	r3, [sp, #16]
 800a288:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a28c:	482c      	ldr	r0, [pc, #176]	; (800a340 <_vfiprintf_r+0x250>)
 800a28e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a292:	2206      	movs	r2, #6
 800a294:	f7f5 ff9c 	bl	80001d0 <memchr>
 800a298:	2800      	cmp	r0, #0
 800a29a:	d03f      	beq.n	800a31c <_vfiprintf_r+0x22c>
 800a29c:	4b29      	ldr	r3, [pc, #164]	; (800a344 <_vfiprintf_r+0x254>)
 800a29e:	bb1b      	cbnz	r3, 800a2e8 <_vfiprintf_r+0x1f8>
 800a2a0:	9b03      	ldr	r3, [sp, #12]
 800a2a2:	3307      	adds	r3, #7
 800a2a4:	f023 0307 	bic.w	r3, r3, #7
 800a2a8:	3308      	adds	r3, #8
 800a2aa:	9303      	str	r3, [sp, #12]
 800a2ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2ae:	443b      	add	r3, r7
 800a2b0:	9309      	str	r3, [sp, #36]	; 0x24
 800a2b2:	e767      	b.n	800a184 <_vfiprintf_r+0x94>
 800a2b4:	fb0c 3202 	mla	r2, ip, r2, r3
 800a2b8:	460c      	mov	r4, r1
 800a2ba:	2001      	movs	r0, #1
 800a2bc:	e7a5      	b.n	800a20a <_vfiprintf_r+0x11a>
 800a2be:	2300      	movs	r3, #0
 800a2c0:	3401      	adds	r4, #1
 800a2c2:	9305      	str	r3, [sp, #20]
 800a2c4:	4619      	mov	r1, r3
 800a2c6:	f04f 0c0a 	mov.w	ip, #10
 800a2ca:	4620      	mov	r0, r4
 800a2cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a2d0:	3a30      	subs	r2, #48	; 0x30
 800a2d2:	2a09      	cmp	r2, #9
 800a2d4:	d903      	bls.n	800a2de <_vfiprintf_r+0x1ee>
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d0c5      	beq.n	800a266 <_vfiprintf_r+0x176>
 800a2da:	9105      	str	r1, [sp, #20]
 800a2dc:	e7c3      	b.n	800a266 <_vfiprintf_r+0x176>
 800a2de:	fb0c 2101 	mla	r1, ip, r1, r2
 800a2e2:	4604      	mov	r4, r0
 800a2e4:	2301      	movs	r3, #1
 800a2e6:	e7f0      	b.n	800a2ca <_vfiprintf_r+0x1da>
 800a2e8:	ab03      	add	r3, sp, #12
 800a2ea:	9300      	str	r3, [sp, #0]
 800a2ec:	462a      	mov	r2, r5
 800a2ee:	4b16      	ldr	r3, [pc, #88]	; (800a348 <_vfiprintf_r+0x258>)
 800a2f0:	a904      	add	r1, sp, #16
 800a2f2:	4630      	mov	r0, r6
 800a2f4:	f3af 8000 	nop.w
 800a2f8:	4607      	mov	r7, r0
 800a2fa:	1c78      	adds	r0, r7, #1
 800a2fc:	d1d6      	bne.n	800a2ac <_vfiprintf_r+0x1bc>
 800a2fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a300:	07d9      	lsls	r1, r3, #31
 800a302:	d405      	bmi.n	800a310 <_vfiprintf_r+0x220>
 800a304:	89ab      	ldrh	r3, [r5, #12]
 800a306:	059a      	lsls	r2, r3, #22
 800a308:	d402      	bmi.n	800a310 <_vfiprintf_r+0x220>
 800a30a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a30c:	f7ff fdb7 	bl	8009e7e <__retarget_lock_release_recursive>
 800a310:	89ab      	ldrh	r3, [r5, #12]
 800a312:	065b      	lsls	r3, r3, #25
 800a314:	f53f af12 	bmi.w	800a13c <_vfiprintf_r+0x4c>
 800a318:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a31a:	e711      	b.n	800a140 <_vfiprintf_r+0x50>
 800a31c:	ab03      	add	r3, sp, #12
 800a31e:	9300      	str	r3, [sp, #0]
 800a320:	462a      	mov	r2, r5
 800a322:	4b09      	ldr	r3, [pc, #36]	; (800a348 <_vfiprintf_r+0x258>)
 800a324:	a904      	add	r1, sp, #16
 800a326:	4630      	mov	r0, r6
 800a328:	f000 f880 	bl	800a42c <_printf_i>
 800a32c:	e7e4      	b.n	800a2f8 <_vfiprintf_r+0x208>
 800a32e:	bf00      	nop
 800a330:	0800b9c4 	.word	0x0800b9c4
 800a334:	0800b9e4 	.word	0x0800b9e4
 800a338:	0800b9a4 	.word	0x0800b9a4
 800a33c:	0800ba04 	.word	0x0800ba04
 800a340:	0800ba0e 	.word	0x0800ba0e
 800a344:	00000000 	.word	0x00000000
 800a348:	0800a0cb 	.word	0x0800a0cb
 800a34c:	0800ba0a 	.word	0x0800ba0a

0800a350 <_printf_common>:
 800a350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a354:	4616      	mov	r6, r2
 800a356:	4699      	mov	r9, r3
 800a358:	688a      	ldr	r2, [r1, #8]
 800a35a:	690b      	ldr	r3, [r1, #16]
 800a35c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a360:	4293      	cmp	r3, r2
 800a362:	bfb8      	it	lt
 800a364:	4613      	movlt	r3, r2
 800a366:	6033      	str	r3, [r6, #0]
 800a368:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a36c:	4607      	mov	r7, r0
 800a36e:	460c      	mov	r4, r1
 800a370:	b10a      	cbz	r2, 800a376 <_printf_common+0x26>
 800a372:	3301      	adds	r3, #1
 800a374:	6033      	str	r3, [r6, #0]
 800a376:	6823      	ldr	r3, [r4, #0]
 800a378:	0699      	lsls	r1, r3, #26
 800a37a:	bf42      	ittt	mi
 800a37c:	6833      	ldrmi	r3, [r6, #0]
 800a37e:	3302      	addmi	r3, #2
 800a380:	6033      	strmi	r3, [r6, #0]
 800a382:	6825      	ldr	r5, [r4, #0]
 800a384:	f015 0506 	ands.w	r5, r5, #6
 800a388:	d106      	bne.n	800a398 <_printf_common+0x48>
 800a38a:	f104 0a19 	add.w	sl, r4, #25
 800a38e:	68e3      	ldr	r3, [r4, #12]
 800a390:	6832      	ldr	r2, [r6, #0]
 800a392:	1a9b      	subs	r3, r3, r2
 800a394:	42ab      	cmp	r3, r5
 800a396:	dc26      	bgt.n	800a3e6 <_printf_common+0x96>
 800a398:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a39c:	1e13      	subs	r3, r2, #0
 800a39e:	6822      	ldr	r2, [r4, #0]
 800a3a0:	bf18      	it	ne
 800a3a2:	2301      	movne	r3, #1
 800a3a4:	0692      	lsls	r2, r2, #26
 800a3a6:	d42b      	bmi.n	800a400 <_printf_common+0xb0>
 800a3a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a3ac:	4649      	mov	r1, r9
 800a3ae:	4638      	mov	r0, r7
 800a3b0:	47c0      	blx	r8
 800a3b2:	3001      	adds	r0, #1
 800a3b4:	d01e      	beq.n	800a3f4 <_printf_common+0xa4>
 800a3b6:	6823      	ldr	r3, [r4, #0]
 800a3b8:	68e5      	ldr	r5, [r4, #12]
 800a3ba:	6832      	ldr	r2, [r6, #0]
 800a3bc:	f003 0306 	and.w	r3, r3, #6
 800a3c0:	2b04      	cmp	r3, #4
 800a3c2:	bf08      	it	eq
 800a3c4:	1aad      	subeq	r5, r5, r2
 800a3c6:	68a3      	ldr	r3, [r4, #8]
 800a3c8:	6922      	ldr	r2, [r4, #16]
 800a3ca:	bf0c      	ite	eq
 800a3cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a3d0:	2500      	movne	r5, #0
 800a3d2:	4293      	cmp	r3, r2
 800a3d4:	bfc4      	itt	gt
 800a3d6:	1a9b      	subgt	r3, r3, r2
 800a3d8:	18ed      	addgt	r5, r5, r3
 800a3da:	2600      	movs	r6, #0
 800a3dc:	341a      	adds	r4, #26
 800a3de:	42b5      	cmp	r5, r6
 800a3e0:	d11a      	bne.n	800a418 <_printf_common+0xc8>
 800a3e2:	2000      	movs	r0, #0
 800a3e4:	e008      	b.n	800a3f8 <_printf_common+0xa8>
 800a3e6:	2301      	movs	r3, #1
 800a3e8:	4652      	mov	r2, sl
 800a3ea:	4649      	mov	r1, r9
 800a3ec:	4638      	mov	r0, r7
 800a3ee:	47c0      	blx	r8
 800a3f0:	3001      	adds	r0, #1
 800a3f2:	d103      	bne.n	800a3fc <_printf_common+0xac>
 800a3f4:	f04f 30ff 	mov.w	r0, #4294967295
 800a3f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3fc:	3501      	adds	r5, #1
 800a3fe:	e7c6      	b.n	800a38e <_printf_common+0x3e>
 800a400:	18e1      	adds	r1, r4, r3
 800a402:	1c5a      	adds	r2, r3, #1
 800a404:	2030      	movs	r0, #48	; 0x30
 800a406:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a40a:	4422      	add	r2, r4
 800a40c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a410:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a414:	3302      	adds	r3, #2
 800a416:	e7c7      	b.n	800a3a8 <_printf_common+0x58>
 800a418:	2301      	movs	r3, #1
 800a41a:	4622      	mov	r2, r4
 800a41c:	4649      	mov	r1, r9
 800a41e:	4638      	mov	r0, r7
 800a420:	47c0      	blx	r8
 800a422:	3001      	adds	r0, #1
 800a424:	d0e6      	beq.n	800a3f4 <_printf_common+0xa4>
 800a426:	3601      	adds	r6, #1
 800a428:	e7d9      	b.n	800a3de <_printf_common+0x8e>
	...

0800a42c <_printf_i>:
 800a42c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a430:	460c      	mov	r4, r1
 800a432:	4691      	mov	r9, r2
 800a434:	7e27      	ldrb	r7, [r4, #24]
 800a436:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a438:	2f78      	cmp	r7, #120	; 0x78
 800a43a:	4680      	mov	r8, r0
 800a43c:	469a      	mov	sl, r3
 800a43e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a442:	d807      	bhi.n	800a454 <_printf_i+0x28>
 800a444:	2f62      	cmp	r7, #98	; 0x62
 800a446:	d80a      	bhi.n	800a45e <_printf_i+0x32>
 800a448:	2f00      	cmp	r7, #0
 800a44a:	f000 80d8 	beq.w	800a5fe <_printf_i+0x1d2>
 800a44e:	2f58      	cmp	r7, #88	; 0x58
 800a450:	f000 80a3 	beq.w	800a59a <_printf_i+0x16e>
 800a454:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a458:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a45c:	e03a      	b.n	800a4d4 <_printf_i+0xa8>
 800a45e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a462:	2b15      	cmp	r3, #21
 800a464:	d8f6      	bhi.n	800a454 <_printf_i+0x28>
 800a466:	a001      	add	r0, pc, #4	; (adr r0, 800a46c <_printf_i+0x40>)
 800a468:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a46c:	0800a4c5 	.word	0x0800a4c5
 800a470:	0800a4d9 	.word	0x0800a4d9
 800a474:	0800a455 	.word	0x0800a455
 800a478:	0800a455 	.word	0x0800a455
 800a47c:	0800a455 	.word	0x0800a455
 800a480:	0800a455 	.word	0x0800a455
 800a484:	0800a4d9 	.word	0x0800a4d9
 800a488:	0800a455 	.word	0x0800a455
 800a48c:	0800a455 	.word	0x0800a455
 800a490:	0800a455 	.word	0x0800a455
 800a494:	0800a455 	.word	0x0800a455
 800a498:	0800a5e5 	.word	0x0800a5e5
 800a49c:	0800a509 	.word	0x0800a509
 800a4a0:	0800a5c7 	.word	0x0800a5c7
 800a4a4:	0800a455 	.word	0x0800a455
 800a4a8:	0800a455 	.word	0x0800a455
 800a4ac:	0800a607 	.word	0x0800a607
 800a4b0:	0800a455 	.word	0x0800a455
 800a4b4:	0800a509 	.word	0x0800a509
 800a4b8:	0800a455 	.word	0x0800a455
 800a4bc:	0800a455 	.word	0x0800a455
 800a4c0:	0800a5cf 	.word	0x0800a5cf
 800a4c4:	680b      	ldr	r3, [r1, #0]
 800a4c6:	1d1a      	adds	r2, r3, #4
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	600a      	str	r2, [r1, #0]
 800a4cc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a4d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a4d4:	2301      	movs	r3, #1
 800a4d6:	e0a3      	b.n	800a620 <_printf_i+0x1f4>
 800a4d8:	6825      	ldr	r5, [r4, #0]
 800a4da:	6808      	ldr	r0, [r1, #0]
 800a4dc:	062e      	lsls	r6, r5, #24
 800a4de:	f100 0304 	add.w	r3, r0, #4
 800a4e2:	d50a      	bpl.n	800a4fa <_printf_i+0xce>
 800a4e4:	6805      	ldr	r5, [r0, #0]
 800a4e6:	600b      	str	r3, [r1, #0]
 800a4e8:	2d00      	cmp	r5, #0
 800a4ea:	da03      	bge.n	800a4f4 <_printf_i+0xc8>
 800a4ec:	232d      	movs	r3, #45	; 0x2d
 800a4ee:	426d      	negs	r5, r5
 800a4f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a4f4:	485e      	ldr	r0, [pc, #376]	; (800a670 <_printf_i+0x244>)
 800a4f6:	230a      	movs	r3, #10
 800a4f8:	e019      	b.n	800a52e <_printf_i+0x102>
 800a4fa:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a4fe:	6805      	ldr	r5, [r0, #0]
 800a500:	600b      	str	r3, [r1, #0]
 800a502:	bf18      	it	ne
 800a504:	b22d      	sxthne	r5, r5
 800a506:	e7ef      	b.n	800a4e8 <_printf_i+0xbc>
 800a508:	680b      	ldr	r3, [r1, #0]
 800a50a:	6825      	ldr	r5, [r4, #0]
 800a50c:	1d18      	adds	r0, r3, #4
 800a50e:	6008      	str	r0, [r1, #0]
 800a510:	0628      	lsls	r0, r5, #24
 800a512:	d501      	bpl.n	800a518 <_printf_i+0xec>
 800a514:	681d      	ldr	r5, [r3, #0]
 800a516:	e002      	b.n	800a51e <_printf_i+0xf2>
 800a518:	0669      	lsls	r1, r5, #25
 800a51a:	d5fb      	bpl.n	800a514 <_printf_i+0xe8>
 800a51c:	881d      	ldrh	r5, [r3, #0]
 800a51e:	4854      	ldr	r0, [pc, #336]	; (800a670 <_printf_i+0x244>)
 800a520:	2f6f      	cmp	r7, #111	; 0x6f
 800a522:	bf0c      	ite	eq
 800a524:	2308      	moveq	r3, #8
 800a526:	230a      	movne	r3, #10
 800a528:	2100      	movs	r1, #0
 800a52a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a52e:	6866      	ldr	r6, [r4, #4]
 800a530:	60a6      	str	r6, [r4, #8]
 800a532:	2e00      	cmp	r6, #0
 800a534:	bfa2      	ittt	ge
 800a536:	6821      	ldrge	r1, [r4, #0]
 800a538:	f021 0104 	bicge.w	r1, r1, #4
 800a53c:	6021      	strge	r1, [r4, #0]
 800a53e:	b90d      	cbnz	r5, 800a544 <_printf_i+0x118>
 800a540:	2e00      	cmp	r6, #0
 800a542:	d04d      	beq.n	800a5e0 <_printf_i+0x1b4>
 800a544:	4616      	mov	r6, r2
 800a546:	fbb5 f1f3 	udiv	r1, r5, r3
 800a54a:	fb03 5711 	mls	r7, r3, r1, r5
 800a54e:	5dc7      	ldrb	r7, [r0, r7]
 800a550:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a554:	462f      	mov	r7, r5
 800a556:	42bb      	cmp	r3, r7
 800a558:	460d      	mov	r5, r1
 800a55a:	d9f4      	bls.n	800a546 <_printf_i+0x11a>
 800a55c:	2b08      	cmp	r3, #8
 800a55e:	d10b      	bne.n	800a578 <_printf_i+0x14c>
 800a560:	6823      	ldr	r3, [r4, #0]
 800a562:	07df      	lsls	r7, r3, #31
 800a564:	d508      	bpl.n	800a578 <_printf_i+0x14c>
 800a566:	6923      	ldr	r3, [r4, #16]
 800a568:	6861      	ldr	r1, [r4, #4]
 800a56a:	4299      	cmp	r1, r3
 800a56c:	bfde      	ittt	le
 800a56e:	2330      	movle	r3, #48	; 0x30
 800a570:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a574:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a578:	1b92      	subs	r2, r2, r6
 800a57a:	6122      	str	r2, [r4, #16]
 800a57c:	f8cd a000 	str.w	sl, [sp]
 800a580:	464b      	mov	r3, r9
 800a582:	aa03      	add	r2, sp, #12
 800a584:	4621      	mov	r1, r4
 800a586:	4640      	mov	r0, r8
 800a588:	f7ff fee2 	bl	800a350 <_printf_common>
 800a58c:	3001      	adds	r0, #1
 800a58e:	d14c      	bne.n	800a62a <_printf_i+0x1fe>
 800a590:	f04f 30ff 	mov.w	r0, #4294967295
 800a594:	b004      	add	sp, #16
 800a596:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a59a:	4835      	ldr	r0, [pc, #212]	; (800a670 <_printf_i+0x244>)
 800a59c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a5a0:	6823      	ldr	r3, [r4, #0]
 800a5a2:	680e      	ldr	r6, [r1, #0]
 800a5a4:	061f      	lsls	r7, r3, #24
 800a5a6:	f856 5b04 	ldr.w	r5, [r6], #4
 800a5aa:	600e      	str	r6, [r1, #0]
 800a5ac:	d514      	bpl.n	800a5d8 <_printf_i+0x1ac>
 800a5ae:	07d9      	lsls	r1, r3, #31
 800a5b0:	bf44      	itt	mi
 800a5b2:	f043 0320 	orrmi.w	r3, r3, #32
 800a5b6:	6023      	strmi	r3, [r4, #0]
 800a5b8:	b91d      	cbnz	r5, 800a5c2 <_printf_i+0x196>
 800a5ba:	6823      	ldr	r3, [r4, #0]
 800a5bc:	f023 0320 	bic.w	r3, r3, #32
 800a5c0:	6023      	str	r3, [r4, #0]
 800a5c2:	2310      	movs	r3, #16
 800a5c4:	e7b0      	b.n	800a528 <_printf_i+0xfc>
 800a5c6:	6823      	ldr	r3, [r4, #0]
 800a5c8:	f043 0320 	orr.w	r3, r3, #32
 800a5cc:	6023      	str	r3, [r4, #0]
 800a5ce:	2378      	movs	r3, #120	; 0x78
 800a5d0:	4828      	ldr	r0, [pc, #160]	; (800a674 <_printf_i+0x248>)
 800a5d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a5d6:	e7e3      	b.n	800a5a0 <_printf_i+0x174>
 800a5d8:	065e      	lsls	r6, r3, #25
 800a5da:	bf48      	it	mi
 800a5dc:	b2ad      	uxthmi	r5, r5
 800a5de:	e7e6      	b.n	800a5ae <_printf_i+0x182>
 800a5e0:	4616      	mov	r6, r2
 800a5e2:	e7bb      	b.n	800a55c <_printf_i+0x130>
 800a5e4:	680b      	ldr	r3, [r1, #0]
 800a5e6:	6826      	ldr	r6, [r4, #0]
 800a5e8:	6960      	ldr	r0, [r4, #20]
 800a5ea:	1d1d      	adds	r5, r3, #4
 800a5ec:	600d      	str	r5, [r1, #0]
 800a5ee:	0635      	lsls	r5, r6, #24
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	d501      	bpl.n	800a5f8 <_printf_i+0x1cc>
 800a5f4:	6018      	str	r0, [r3, #0]
 800a5f6:	e002      	b.n	800a5fe <_printf_i+0x1d2>
 800a5f8:	0671      	lsls	r1, r6, #25
 800a5fa:	d5fb      	bpl.n	800a5f4 <_printf_i+0x1c8>
 800a5fc:	8018      	strh	r0, [r3, #0]
 800a5fe:	2300      	movs	r3, #0
 800a600:	6123      	str	r3, [r4, #16]
 800a602:	4616      	mov	r6, r2
 800a604:	e7ba      	b.n	800a57c <_printf_i+0x150>
 800a606:	680b      	ldr	r3, [r1, #0]
 800a608:	1d1a      	adds	r2, r3, #4
 800a60a:	600a      	str	r2, [r1, #0]
 800a60c:	681e      	ldr	r6, [r3, #0]
 800a60e:	6862      	ldr	r2, [r4, #4]
 800a610:	2100      	movs	r1, #0
 800a612:	4630      	mov	r0, r6
 800a614:	f7f5 fddc 	bl	80001d0 <memchr>
 800a618:	b108      	cbz	r0, 800a61e <_printf_i+0x1f2>
 800a61a:	1b80      	subs	r0, r0, r6
 800a61c:	6060      	str	r0, [r4, #4]
 800a61e:	6863      	ldr	r3, [r4, #4]
 800a620:	6123      	str	r3, [r4, #16]
 800a622:	2300      	movs	r3, #0
 800a624:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a628:	e7a8      	b.n	800a57c <_printf_i+0x150>
 800a62a:	6923      	ldr	r3, [r4, #16]
 800a62c:	4632      	mov	r2, r6
 800a62e:	4649      	mov	r1, r9
 800a630:	4640      	mov	r0, r8
 800a632:	47d0      	blx	sl
 800a634:	3001      	adds	r0, #1
 800a636:	d0ab      	beq.n	800a590 <_printf_i+0x164>
 800a638:	6823      	ldr	r3, [r4, #0]
 800a63a:	079b      	lsls	r3, r3, #30
 800a63c:	d413      	bmi.n	800a666 <_printf_i+0x23a>
 800a63e:	68e0      	ldr	r0, [r4, #12]
 800a640:	9b03      	ldr	r3, [sp, #12]
 800a642:	4298      	cmp	r0, r3
 800a644:	bfb8      	it	lt
 800a646:	4618      	movlt	r0, r3
 800a648:	e7a4      	b.n	800a594 <_printf_i+0x168>
 800a64a:	2301      	movs	r3, #1
 800a64c:	4632      	mov	r2, r6
 800a64e:	4649      	mov	r1, r9
 800a650:	4640      	mov	r0, r8
 800a652:	47d0      	blx	sl
 800a654:	3001      	adds	r0, #1
 800a656:	d09b      	beq.n	800a590 <_printf_i+0x164>
 800a658:	3501      	adds	r5, #1
 800a65a:	68e3      	ldr	r3, [r4, #12]
 800a65c:	9903      	ldr	r1, [sp, #12]
 800a65e:	1a5b      	subs	r3, r3, r1
 800a660:	42ab      	cmp	r3, r5
 800a662:	dcf2      	bgt.n	800a64a <_printf_i+0x21e>
 800a664:	e7eb      	b.n	800a63e <_printf_i+0x212>
 800a666:	2500      	movs	r5, #0
 800a668:	f104 0619 	add.w	r6, r4, #25
 800a66c:	e7f5      	b.n	800a65a <_printf_i+0x22e>
 800a66e:	bf00      	nop
 800a670:	0800ba15 	.word	0x0800ba15
 800a674:	0800ba26 	.word	0x0800ba26

0800a678 <_sbrk_r>:
 800a678:	b538      	push	{r3, r4, r5, lr}
 800a67a:	4d06      	ldr	r5, [pc, #24]	; (800a694 <_sbrk_r+0x1c>)
 800a67c:	2300      	movs	r3, #0
 800a67e:	4604      	mov	r4, r0
 800a680:	4608      	mov	r0, r1
 800a682:	602b      	str	r3, [r5, #0]
 800a684:	f7f8 f822 	bl	80026cc <_sbrk>
 800a688:	1c43      	adds	r3, r0, #1
 800a68a:	d102      	bne.n	800a692 <_sbrk_r+0x1a>
 800a68c:	682b      	ldr	r3, [r5, #0]
 800a68e:	b103      	cbz	r3, 800a692 <_sbrk_r+0x1a>
 800a690:	6023      	str	r3, [r4, #0]
 800a692:	bd38      	pop	{r3, r4, r5, pc}
 800a694:	2000198c 	.word	0x2000198c

0800a698 <__sread>:
 800a698:	b510      	push	{r4, lr}
 800a69a:	460c      	mov	r4, r1
 800a69c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6a0:	f000 f8a0 	bl	800a7e4 <_read_r>
 800a6a4:	2800      	cmp	r0, #0
 800a6a6:	bfab      	itete	ge
 800a6a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a6aa:	89a3      	ldrhlt	r3, [r4, #12]
 800a6ac:	181b      	addge	r3, r3, r0
 800a6ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a6b2:	bfac      	ite	ge
 800a6b4:	6563      	strge	r3, [r4, #84]	; 0x54
 800a6b6:	81a3      	strhlt	r3, [r4, #12]
 800a6b8:	bd10      	pop	{r4, pc}

0800a6ba <__swrite>:
 800a6ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6be:	461f      	mov	r7, r3
 800a6c0:	898b      	ldrh	r3, [r1, #12]
 800a6c2:	05db      	lsls	r3, r3, #23
 800a6c4:	4605      	mov	r5, r0
 800a6c6:	460c      	mov	r4, r1
 800a6c8:	4616      	mov	r6, r2
 800a6ca:	d505      	bpl.n	800a6d8 <__swrite+0x1e>
 800a6cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6d0:	2302      	movs	r3, #2
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	f000 f868 	bl	800a7a8 <_lseek_r>
 800a6d8:	89a3      	ldrh	r3, [r4, #12]
 800a6da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a6de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a6e2:	81a3      	strh	r3, [r4, #12]
 800a6e4:	4632      	mov	r2, r6
 800a6e6:	463b      	mov	r3, r7
 800a6e8:	4628      	mov	r0, r5
 800a6ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a6ee:	f000 b817 	b.w	800a720 <_write_r>

0800a6f2 <__sseek>:
 800a6f2:	b510      	push	{r4, lr}
 800a6f4:	460c      	mov	r4, r1
 800a6f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6fa:	f000 f855 	bl	800a7a8 <_lseek_r>
 800a6fe:	1c43      	adds	r3, r0, #1
 800a700:	89a3      	ldrh	r3, [r4, #12]
 800a702:	bf15      	itete	ne
 800a704:	6560      	strne	r0, [r4, #84]	; 0x54
 800a706:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a70a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a70e:	81a3      	strheq	r3, [r4, #12]
 800a710:	bf18      	it	ne
 800a712:	81a3      	strhne	r3, [r4, #12]
 800a714:	bd10      	pop	{r4, pc}

0800a716 <__sclose>:
 800a716:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a71a:	f000 b813 	b.w	800a744 <_close_r>
	...

0800a720 <_write_r>:
 800a720:	b538      	push	{r3, r4, r5, lr}
 800a722:	4d07      	ldr	r5, [pc, #28]	; (800a740 <_write_r+0x20>)
 800a724:	4604      	mov	r4, r0
 800a726:	4608      	mov	r0, r1
 800a728:	4611      	mov	r1, r2
 800a72a:	2200      	movs	r2, #0
 800a72c:	602a      	str	r2, [r5, #0]
 800a72e:	461a      	mov	r2, r3
 800a730:	f7f7 ff7b 	bl	800262a <_write>
 800a734:	1c43      	adds	r3, r0, #1
 800a736:	d102      	bne.n	800a73e <_write_r+0x1e>
 800a738:	682b      	ldr	r3, [r5, #0]
 800a73a:	b103      	cbz	r3, 800a73e <_write_r+0x1e>
 800a73c:	6023      	str	r3, [r4, #0]
 800a73e:	bd38      	pop	{r3, r4, r5, pc}
 800a740:	2000198c 	.word	0x2000198c

0800a744 <_close_r>:
 800a744:	b538      	push	{r3, r4, r5, lr}
 800a746:	4d06      	ldr	r5, [pc, #24]	; (800a760 <_close_r+0x1c>)
 800a748:	2300      	movs	r3, #0
 800a74a:	4604      	mov	r4, r0
 800a74c:	4608      	mov	r0, r1
 800a74e:	602b      	str	r3, [r5, #0]
 800a750:	f7f7 ff87 	bl	8002662 <_close>
 800a754:	1c43      	adds	r3, r0, #1
 800a756:	d102      	bne.n	800a75e <_close_r+0x1a>
 800a758:	682b      	ldr	r3, [r5, #0]
 800a75a:	b103      	cbz	r3, 800a75e <_close_r+0x1a>
 800a75c:	6023      	str	r3, [r4, #0]
 800a75e:	bd38      	pop	{r3, r4, r5, pc}
 800a760:	2000198c 	.word	0x2000198c

0800a764 <_fstat_r>:
 800a764:	b538      	push	{r3, r4, r5, lr}
 800a766:	4d07      	ldr	r5, [pc, #28]	; (800a784 <_fstat_r+0x20>)
 800a768:	2300      	movs	r3, #0
 800a76a:	4604      	mov	r4, r0
 800a76c:	4608      	mov	r0, r1
 800a76e:	4611      	mov	r1, r2
 800a770:	602b      	str	r3, [r5, #0]
 800a772:	f7f7 ff82 	bl	800267a <_fstat>
 800a776:	1c43      	adds	r3, r0, #1
 800a778:	d102      	bne.n	800a780 <_fstat_r+0x1c>
 800a77a:	682b      	ldr	r3, [r5, #0]
 800a77c:	b103      	cbz	r3, 800a780 <_fstat_r+0x1c>
 800a77e:	6023      	str	r3, [r4, #0]
 800a780:	bd38      	pop	{r3, r4, r5, pc}
 800a782:	bf00      	nop
 800a784:	2000198c 	.word	0x2000198c

0800a788 <_isatty_r>:
 800a788:	b538      	push	{r3, r4, r5, lr}
 800a78a:	4d06      	ldr	r5, [pc, #24]	; (800a7a4 <_isatty_r+0x1c>)
 800a78c:	2300      	movs	r3, #0
 800a78e:	4604      	mov	r4, r0
 800a790:	4608      	mov	r0, r1
 800a792:	602b      	str	r3, [r5, #0]
 800a794:	f7f7 ff81 	bl	800269a <_isatty>
 800a798:	1c43      	adds	r3, r0, #1
 800a79a:	d102      	bne.n	800a7a2 <_isatty_r+0x1a>
 800a79c:	682b      	ldr	r3, [r5, #0]
 800a79e:	b103      	cbz	r3, 800a7a2 <_isatty_r+0x1a>
 800a7a0:	6023      	str	r3, [r4, #0]
 800a7a2:	bd38      	pop	{r3, r4, r5, pc}
 800a7a4:	2000198c 	.word	0x2000198c

0800a7a8 <_lseek_r>:
 800a7a8:	b538      	push	{r3, r4, r5, lr}
 800a7aa:	4d07      	ldr	r5, [pc, #28]	; (800a7c8 <_lseek_r+0x20>)
 800a7ac:	4604      	mov	r4, r0
 800a7ae:	4608      	mov	r0, r1
 800a7b0:	4611      	mov	r1, r2
 800a7b2:	2200      	movs	r2, #0
 800a7b4:	602a      	str	r2, [r5, #0]
 800a7b6:	461a      	mov	r2, r3
 800a7b8:	f7f7 ff7a 	bl	80026b0 <_lseek>
 800a7bc:	1c43      	adds	r3, r0, #1
 800a7be:	d102      	bne.n	800a7c6 <_lseek_r+0x1e>
 800a7c0:	682b      	ldr	r3, [r5, #0]
 800a7c2:	b103      	cbz	r3, 800a7c6 <_lseek_r+0x1e>
 800a7c4:	6023      	str	r3, [r4, #0]
 800a7c6:	bd38      	pop	{r3, r4, r5, pc}
 800a7c8:	2000198c 	.word	0x2000198c

0800a7cc <__malloc_lock>:
 800a7cc:	4801      	ldr	r0, [pc, #4]	; (800a7d4 <__malloc_lock+0x8>)
 800a7ce:	f7ff bb55 	b.w	8009e7c <__retarget_lock_acquire_recursive>
 800a7d2:	bf00      	nop
 800a7d4:	20001984 	.word	0x20001984

0800a7d8 <__malloc_unlock>:
 800a7d8:	4801      	ldr	r0, [pc, #4]	; (800a7e0 <__malloc_unlock+0x8>)
 800a7da:	f7ff bb50 	b.w	8009e7e <__retarget_lock_release_recursive>
 800a7de:	bf00      	nop
 800a7e0:	20001984 	.word	0x20001984

0800a7e4 <_read_r>:
 800a7e4:	b538      	push	{r3, r4, r5, lr}
 800a7e6:	4d07      	ldr	r5, [pc, #28]	; (800a804 <_read_r+0x20>)
 800a7e8:	4604      	mov	r4, r0
 800a7ea:	4608      	mov	r0, r1
 800a7ec:	4611      	mov	r1, r2
 800a7ee:	2200      	movs	r2, #0
 800a7f0:	602a      	str	r2, [r5, #0]
 800a7f2:	461a      	mov	r2, r3
 800a7f4:	f7f7 fefc 	bl	80025f0 <_read>
 800a7f8:	1c43      	adds	r3, r0, #1
 800a7fa:	d102      	bne.n	800a802 <_read_r+0x1e>
 800a7fc:	682b      	ldr	r3, [r5, #0]
 800a7fe:	b103      	cbz	r3, 800a802 <_read_r+0x1e>
 800a800:	6023      	str	r3, [r4, #0]
 800a802:	bd38      	pop	{r3, r4, r5, pc}
 800a804:	2000198c 	.word	0x2000198c

0800a808 <tan>:
 800a808:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a80a:	ec53 2b10 	vmov	r2, r3, d0
 800a80e:	4814      	ldr	r0, [pc, #80]	; (800a860 <tan+0x58>)
 800a810:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a814:	4281      	cmp	r1, r0
 800a816:	dc05      	bgt.n	800a824 <tan+0x1c>
 800a818:	ed9f 1b0f 	vldr	d1, [pc, #60]	; 800a858 <tan+0x50>
 800a81c:	2001      	movs	r0, #1
 800a81e:	f000 fd6f 	bl	800b300 <__kernel_tan>
 800a822:	e009      	b.n	800a838 <tan+0x30>
 800a824:	480f      	ldr	r0, [pc, #60]	; (800a864 <tan+0x5c>)
 800a826:	4281      	cmp	r1, r0
 800a828:	dd09      	ble.n	800a83e <tan+0x36>
 800a82a:	ee10 0a10 	vmov	r0, s0
 800a82e:	4619      	mov	r1, r3
 800a830:	f7f5 fd22 	bl	8000278 <__aeabi_dsub>
 800a834:	ec41 0b10 	vmov	d0, r0, r1
 800a838:	b005      	add	sp, #20
 800a83a:	f85d fb04 	ldr.w	pc, [sp], #4
 800a83e:	4668      	mov	r0, sp
 800a840:	f000 f812 	bl	800a868 <__ieee754_rem_pio2>
 800a844:	0040      	lsls	r0, r0, #1
 800a846:	f000 0002 	and.w	r0, r0, #2
 800a84a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a84e:	ed9d 0b00 	vldr	d0, [sp]
 800a852:	f1c0 0001 	rsb	r0, r0, #1
 800a856:	e7e2      	b.n	800a81e <tan+0x16>
	...
 800a860:	3fe921fb 	.word	0x3fe921fb
 800a864:	7fefffff 	.word	0x7fefffff

0800a868 <__ieee754_rem_pio2>:
 800a868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a86c:	ed2d 8b02 	vpush	{d8}
 800a870:	ec55 4b10 	vmov	r4, r5, d0
 800a874:	4bca      	ldr	r3, [pc, #808]	; (800aba0 <__ieee754_rem_pio2+0x338>)
 800a876:	b08b      	sub	sp, #44	; 0x2c
 800a878:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800a87c:	4598      	cmp	r8, r3
 800a87e:	4682      	mov	sl, r0
 800a880:	9502      	str	r5, [sp, #8]
 800a882:	dc08      	bgt.n	800a896 <__ieee754_rem_pio2+0x2e>
 800a884:	2200      	movs	r2, #0
 800a886:	2300      	movs	r3, #0
 800a888:	ed80 0b00 	vstr	d0, [r0]
 800a88c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800a890:	f04f 0b00 	mov.w	fp, #0
 800a894:	e028      	b.n	800a8e8 <__ieee754_rem_pio2+0x80>
 800a896:	4bc3      	ldr	r3, [pc, #780]	; (800aba4 <__ieee754_rem_pio2+0x33c>)
 800a898:	4598      	cmp	r8, r3
 800a89a:	dc78      	bgt.n	800a98e <__ieee754_rem_pio2+0x126>
 800a89c:	9b02      	ldr	r3, [sp, #8]
 800a89e:	4ec2      	ldr	r6, [pc, #776]	; (800aba8 <__ieee754_rem_pio2+0x340>)
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	ee10 0a10 	vmov	r0, s0
 800a8a6:	a3b0      	add	r3, pc, #704	; (adr r3, 800ab68 <__ieee754_rem_pio2+0x300>)
 800a8a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8ac:	4629      	mov	r1, r5
 800a8ae:	dd39      	ble.n	800a924 <__ieee754_rem_pio2+0xbc>
 800a8b0:	f7f5 fce2 	bl	8000278 <__aeabi_dsub>
 800a8b4:	45b0      	cmp	r8, r6
 800a8b6:	4604      	mov	r4, r0
 800a8b8:	460d      	mov	r5, r1
 800a8ba:	d01b      	beq.n	800a8f4 <__ieee754_rem_pio2+0x8c>
 800a8bc:	a3ac      	add	r3, pc, #688	; (adr r3, 800ab70 <__ieee754_rem_pio2+0x308>)
 800a8be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8c2:	f7f5 fcd9 	bl	8000278 <__aeabi_dsub>
 800a8c6:	4602      	mov	r2, r0
 800a8c8:	460b      	mov	r3, r1
 800a8ca:	e9ca 2300 	strd	r2, r3, [sl]
 800a8ce:	4620      	mov	r0, r4
 800a8d0:	4629      	mov	r1, r5
 800a8d2:	f7f5 fcd1 	bl	8000278 <__aeabi_dsub>
 800a8d6:	a3a6      	add	r3, pc, #664	; (adr r3, 800ab70 <__ieee754_rem_pio2+0x308>)
 800a8d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8dc:	f7f5 fccc 	bl	8000278 <__aeabi_dsub>
 800a8e0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a8e4:	f04f 0b01 	mov.w	fp, #1
 800a8e8:	4658      	mov	r0, fp
 800a8ea:	b00b      	add	sp, #44	; 0x2c
 800a8ec:	ecbd 8b02 	vpop	{d8}
 800a8f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8f4:	a3a0      	add	r3, pc, #640	; (adr r3, 800ab78 <__ieee754_rem_pio2+0x310>)
 800a8f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8fa:	f7f5 fcbd 	bl	8000278 <__aeabi_dsub>
 800a8fe:	a3a0      	add	r3, pc, #640	; (adr r3, 800ab80 <__ieee754_rem_pio2+0x318>)
 800a900:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a904:	4604      	mov	r4, r0
 800a906:	460d      	mov	r5, r1
 800a908:	f7f5 fcb6 	bl	8000278 <__aeabi_dsub>
 800a90c:	4602      	mov	r2, r0
 800a90e:	460b      	mov	r3, r1
 800a910:	e9ca 2300 	strd	r2, r3, [sl]
 800a914:	4620      	mov	r0, r4
 800a916:	4629      	mov	r1, r5
 800a918:	f7f5 fcae 	bl	8000278 <__aeabi_dsub>
 800a91c:	a398      	add	r3, pc, #608	; (adr r3, 800ab80 <__ieee754_rem_pio2+0x318>)
 800a91e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a922:	e7db      	b.n	800a8dc <__ieee754_rem_pio2+0x74>
 800a924:	f7f5 fcaa 	bl	800027c <__adddf3>
 800a928:	45b0      	cmp	r8, r6
 800a92a:	4604      	mov	r4, r0
 800a92c:	460d      	mov	r5, r1
 800a92e:	d016      	beq.n	800a95e <__ieee754_rem_pio2+0xf6>
 800a930:	a38f      	add	r3, pc, #572	; (adr r3, 800ab70 <__ieee754_rem_pio2+0x308>)
 800a932:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a936:	f7f5 fca1 	bl	800027c <__adddf3>
 800a93a:	4602      	mov	r2, r0
 800a93c:	460b      	mov	r3, r1
 800a93e:	e9ca 2300 	strd	r2, r3, [sl]
 800a942:	4620      	mov	r0, r4
 800a944:	4629      	mov	r1, r5
 800a946:	f7f5 fc97 	bl	8000278 <__aeabi_dsub>
 800a94a:	a389      	add	r3, pc, #548	; (adr r3, 800ab70 <__ieee754_rem_pio2+0x308>)
 800a94c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a950:	f7f5 fc94 	bl	800027c <__adddf3>
 800a954:	f04f 3bff 	mov.w	fp, #4294967295
 800a958:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a95c:	e7c4      	b.n	800a8e8 <__ieee754_rem_pio2+0x80>
 800a95e:	a386      	add	r3, pc, #536	; (adr r3, 800ab78 <__ieee754_rem_pio2+0x310>)
 800a960:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a964:	f7f5 fc8a 	bl	800027c <__adddf3>
 800a968:	a385      	add	r3, pc, #532	; (adr r3, 800ab80 <__ieee754_rem_pio2+0x318>)
 800a96a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a96e:	4604      	mov	r4, r0
 800a970:	460d      	mov	r5, r1
 800a972:	f7f5 fc83 	bl	800027c <__adddf3>
 800a976:	4602      	mov	r2, r0
 800a978:	460b      	mov	r3, r1
 800a97a:	e9ca 2300 	strd	r2, r3, [sl]
 800a97e:	4620      	mov	r0, r4
 800a980:	4629      	mov	r1, r5
 800a982:	f7f5 fc79 	bl	8000278 <__aeabi_dsub>
 800a986:	a37e      	add	r3, pc, #504	; (adr r3, 800ab80 <__ieee754_rem_pio2+0x318>)
 800a988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a98c:	e7e0      	b.n	800a950 <__ieee754_rem_pio2+0xe8>
 800a98e:	4b87      	ldr	r3, [pc, #540]	; (800abac <__ieee754_rem_pio2+0x344>)
 800a990:	4598      	cmp	r8, r3
 800a992:	f300 80d9 	bgt.w	800ab48 <__ieee754_rem_pio2+0x2e0>
 800a996:	f000 fe87 	bl	800b6a8 <fabs>
 800a99a:	ec55 4b10 	vmov	r4, r5, d0
 800a99e:	ee10 0a10 	vmov	r0, s0
 800a9a2:	a379      	add	r3, pc, #484	; (adr r3, 800ab88 <__ieee754_rem_pio2+0x320>)
 800a9a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9a8:	4629      	mov	r1, r5
 800a9aa:	f7f5 fe1d 	bl	80005e8 <__aeabi_dmul>
 800a9ae:	4b80      	ldr	r3, [pc, #512]	; (800abb0 <__ieee754_rem_pio2+0x348>)
 800a9b0:	2200      	movs	r2, #0
 800a9b2:	f7f5 fc63 	bl	800027c <__adddf3>
 800a9b6:	f7f6 f8b1 	bl	8000b1c <__aeabi_d2iz>
 800a9ba:	4683      	mov	fp, r0
 800a9bc:	f7f5 fdaa 	bl	8000514 <__aeabi_i2d>
 800a9c0:	4602      	mov	r2, r0
 800a9c2:	460b      	mov	r3, r1
 800a9c4:	ec43 2b18 	vmov	d8, r2, r3
 800a9c8:	a367      	add	r3, pc, #412	; (adr r3, 800ab68 <__ieee754_rem_pio2+0x300>)
 800a9ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9ce:	f7f5 fe0b 	bl	80005e8 <__aeabi_dmul>
 800a9d2:	4602      	mov	r2, r0
 800a9d4:	460b      	mov	r3, r1
 800a9d6:	4620      	mov	r0, r4
 800a9d8:	4629      	mov	r1, r5
 800a9da:	f7f5 fc4d 	bl	8000278 <__aeabi_dsub>
 800a9de:	a364      	add	r3, pc, #400	; (adr r3, 800ab70 <__ieee754_rem_pio2+0x308>)
 800a9e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9e4:	4606      	mov	r6, r0
 800a9e6:	460f      	mov	r7, r1
 800a9e8:	ec51 0b18 	vmov	r0, r1, d8
 800a9ec:	f7f5 fdfc 	bl	80005e8 <__aeabi_dmul>
 800a9f0:	f1bb 0f1f 	cmp.w	fp, #31
 800a9f4:	4604      	mov	r4, r0
 800a9f6:	460d      	mov	r5, r1
 800a9f8:	dc0d      	bgt.n	800aa16 <__ieee754_rem_pio2+0x1ae>
 800a9fa:	4b6e      	ldr	r3, [pc, #440]	; (800abb4 <__ieee754_rem_pio2+0x34c>)
 800a9fc:	f10b 32ff 	add.w	r2, fp, #4294967295
 800aa00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa04:	4543      	cmp	r3, r8
 800aa06:	d006      	beq.n	800aa16 <__ieee754_rem_pio2+0x1ae>
 800aa08:	4622      	mov	r2, r4
 800aa0a:	462b      	mov	r3, r5
 800aa0c:	4630      	mov	r0, r6
 800aa0e:	4639      	mov	r1, r7
 800aa10:	f7f5 fc32 	bl	8000278 <__aeabi_dsub>
 800aa14:	e00f      	b.n	800aa36 <__ieee754_rem_pio2+0x1ce>
 800aa16:	462b      	mov	r3, r5
 800aa18:	4622      	mov	r2, r4
 800aa1a:	4630      	mov	r0, r6
 800aa1c:	4639      	mov	r1, r7
 800aa1e:	f7f5 fc2b 	bl	8000278 <__aeabi_dsub>
 800aa22:	ea4f 5328 	mov.w	r3, r8, asr #20
 800aa26:	9303      	str	r3, [sp, #12]
 800aa28:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800aa2c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800aa30:	f1b8 0f10 	cmp.w	r8, #16
 800aa34:	dc02      	bgt.n	800aa3c <__ieee754_rem_pio2+0x1d4>
 800aa36:	e9ca 0100 	strd	r0, r1, [sl]
 800aa3a:	e039      	b.n	800aab0 <__ieee754_rem_pio2+0x248>
 800aa3c:	a34e      	add	r3, pc, #312	; (adr r3, 800ab78 <__ieee754_rem_pio2+0x310>)
 800aa3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa42:	ec51 0b18 	vmov	r0, r1, d8
 800aa46:	f7f5 fdcf 	bl	80005e8 <__aeabi_dmul>
 800aa4a:	4604      	mov	r4, r0
 800aa4c:	460d      	mov	r5, r1
 800aa4e:	4602      	mov	r2, r0
 800aa50:	460b      	mov	r3, r1
 800aa52:	4630      	mov	r0, r6
 800aa54:	4639      	mov	r1, r7
 800aa56:	f7f5 fc0f 	bl	8000278 <__aeabi_dsub>
 800aa5a:	4602      	mov	r2, r0
 800aa5c:	460b      	mov	r3, r1
 800aa5e:	4680      	mov	r8, r0
 800aa60:	4689      	mov	r9, r1
 800aa62:	4630      	mov	r0, r6
 800aa64:	4639      	mov	r1, r7
 800aa66:	f7f5 fc07 	bl	8000278 <__aeabi_dsub>
 800aa6a:	4622      	mov	r2, r4
 800aa6c:	462b      	mov	r3, r5
 800aa6e:	f7f5 fc03 	bl	8000278 <__aeabi_dsub>
 800aa72:	a343      	add	r3, pc, #268	; (adr r3, 800ab80 <__ieee754_rem_pio2+0x318>)
 800aa74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa78:	4604      	mov	r4, r0
 800aa7a:	460d      	mov	r5, r1
 800aa7c:	ec51 0b18 	vmov	r0, r1, d8
 800aa80:	f7f5 fdb2 	bl	80005e8 <__aeabi_dmul>
 800aa84:	4622      	mov	r2, r4
 800aa86:	462b      	mov	r3, r5
 800aa88:	f7f5 fbf6 	bl	8000278 <__aeabi_dsub>
 800aa8c:	4602      	mov	r2, r0
 800aa8e:	460b      	mov	r3, r1
 800aa90:	4604      	mov	r4, r0
 800aa92:	460d      	mov	r5, r1
 800aa94:	4640      	mov	r0, r8
 800aa96:	4649      	mov	r1, r9
 800aa98:	f7f5 fbee 	bl	8000278 <__aeabi_dsub>
 800aa9c:	9a03      	ldr	r2, [sp, #12]
 800aa9e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800aaa2:	1ad3      	subs	r3, r2, r3
 800aaa4:	2b31      	cmp	r3, #49	; 0x31
 800aaa6:	dc24      	bgt.n	800aaf2 <__ieee754_rem_pio2+0x28a>
 800aaa8:	e9ca 0100 	strd	r0, r1, [sl]
 800aaac:	4646      	mov	r6, r8
 800aaae:	464f      	mov	r7, r9
 800aab0:	e9da 8900 	ldrd	r8, r9, [sl]
 800aab4:	4630      	mov	r0, r6
 800aab6:	4642      	mov	r2, r8
 800aab8:	464b      	mov	r3, r9
 800aaba:	4639      	mov	r1, r7
 800aabc:	f7f5 fbdc 	bl	8000278 <__aeabi_dsub>
 800aac0:	462b      	mov	r3, r5
 800aac2:	4622      	mov	r2, r4
 800aac4:	f7f5 fbd8 	bl	8000278 <__aeabi_dsub>
 800aac8:	9b02      	ldr	r3, [sp, #8]
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800aad0:	f6bf af0a 	bge.w	800a8e8 <__ieee754_rem_pio2+0x80>
 800aad4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800aad8:	f8ca 3004 	str.w	r3, [sl, #4]
 800aadc:	f8ca 8000 	str.w	r8, [sl]
 800aae0:	f8ca 0008 	str.w	r0, [sl, #8]
 800aae4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800aae8:	f8ca 300c 	str.w	r3, [sl, #12]
 800aaec:	f1cb 0b00 	rsb	fp, fp, #0
 800aaf0:	e6fa      	b.n	800a8e8 <__ieee754_rem_pio2+0x80>
 800aaf2:	a327      	add	r3, pc, #156	; (adr r3, 800ab90 <__ieee754_rem_pio2+0x328>)
 800aaf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaf8:	ec51 0b18 	vmov	r0, r1, d8
 800aafc:	f7f5 fd74 	bl	80005e8 <__aeabi_dmul>
 800ab00:	4604      	mov	r4, r0
 800ab02:	460d      	mov	r5, r1
 800ab04:	4602      	mov	r2, r0
 800ab06:	460b      	mov	r3, r1
 800ab08:	4640      	mov	r0, r8
 800ab0a:	4649      	mov	r1, r9
 800ab0c:	f7f5 fbb4 	bl	8000278 <__aeabi_dsub>
 800ab10:	4602      	mov	r2, r0
 800ab12:	460b      	mov	r3, r1
 800ab14:	4606      	mov	r6, r0
 800ab16:	460f      	mov	r7, r1
 800ab18:	4640      	mov	r0, r8
 800ab1a:	4649      	mov	r1, r9
 800ab1c:	f7f5 fbac 	bl	8000278 <__aeabi_dsub>
 800ab20:	4622      	mov	r2, r4
 800ab22:	462b      	mov	r3, r5
 800ab24:	f7f5 fba8 	bl	8000278 <__aeabi_dsub>
 800ab28:	a31b      	add	r3, pc, #108	; (adr r3, 800ab98 <__ieee754_rem_pio2+0x330>)
 800ab2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab2e:	4604      	mov	r4, r0
 800ab30:	460d      	mov	r5, r1
 800ab32:	ec51 0b18 	vmov	r0, r1, d8
 800ab36:	f7f5 fd57 	bl	80005e8 <__aeabi_dmul>
 800ab3a:	4622      	mov	r2, r4
 800ab3c:	462b      	mov	r3, r5
 800ab3e:	f7f5 fb9b 	bl	8000278 <__aeabi_dsub>
 800ab42:	4604      	mov	r4, r0
 800ab44:	460d      	mov	r5, r1
 800ab46:	e75f      	b.n	800aa08 <__ieee754_rem_pio2+0x1a0>
 800ab48:	4b1b      	ldr	r3, [pc, #108]	; (800abb8 <__ieee754_rem_pio2+0x350>)
 800ab4a:	4598      	cmp	r8, r3
 800ab4c:	dd36      	ble.n	800abbc <__ieee754_rem_pio2+0x354>
 800ab4e:	ee10 2a10 	vmov	r2, s0
 800ab52:	462b      	mov	r3, r5
 800ab54:	4620      	mov	r0, r4
 800ab56:	4629      	mov	r1, r5
 800ab58:	f7f5 fb8e 	bl	8000278 <__aeabi_dsub>
 800ab5c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ab60:	e9ca 0100 	strd	r0, r1, [sl]
 800ab64:	e694      	b.n	800a890 <__ieee754_rem_pio2+0x28>
 800ab66:	bf00      	nop
 800ab68:	54400000 	.word	0x54400000
 800ab6c:	3ff921fb 	.word	0x3ff921fb
 800ab70:	1a626331 	.word	0x1a626331
 800ab74:	3dd0b461 	.word	0x3dd0b461
 800ab78:	1a600000 	.word	0x1a600000
 800ab7c:	3dd0b461 	.word	0x3dd0b461
 800ab80:	2e037073 	.word	0x2e037073
 800ab84:	3ba3198a 	.word	0x3ba3198a
 800ab88:	6dc9c883 	.word	0x6dc9c883
 800ab8c:	3fe45f30 	.word	0x3fe45f30
 800ab90:	2e000000 	.word	0x2e000000
 800ab94:	3ba3198a 	.word	0x3ba3198a
 800ab98:	252049c1 	.word	0x252049c1
 800ab9c:	397b839a 	.word	0x397b839a
 800aba0:	3fe921fb 	.word	0x3fe921fb
 800aba4:	4002d97b 	.word	0x4002d97b
 800aba8:	3ff921fb 	.word	0x3ff921fb
 800abac:	413921fb 	.word	0x413921fb
 800abb0:	3fe00000 	.word	0x3fe00000
 800abb4:	0800ba38 	.word	0x0800ba38
 800abb8:	7fefffff 	.word	0x7fefffff
 800abbc:	ea4f 5428 	mov.w	r4, r8, asr #20
 800abc0:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800abc4:	ee10 0a10 	vmov	r0, s0
 800abc8:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800abcc:	ee10 6a10 	vmov	r6, s0
 800abd0:	460f      	mov	r7, r1
 800abd2:	f7f5 ffa3 	bl	8000b1c <__aeabi_d2iz>
 800abd6:	f7f5 fc9d 	bl	8000514 <__aeabi_i2d>
 800abda:	4602      	mov	r2, r0
 800abdc:	460b      	mov	r3, r1
 800abde:	4630      	mov	r0, r6
 800abe0:	4639      	mov	r1, r7
 800abe2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800abe6:	f7f5 fb47 	bl	8000278 <__aeabi_dsub>
 800abea:	4b22      	ldr	r3, [pc, #136]	; (800ac74 <__ieee754_rem_pio2+0x40c>)
 800abec:	2200      	movs	r2, #0
 800abee:	f7f5 fcfb 	bl	80005e8 <__aeabi_dmul>
 800abf2:	460f      	mov	r7, r1
 800abf4:	4606      	mov	r6, r0
 800abf6:	f7f5 ff91 	bl	8000b1c <__aeabi_d2iz>
 800abfa:	f7f5 fc8b 	bl	8000514 <__aeabi_i2d>
 800abfe:	4602      	mov	r2, r0
 800ac00:	460b      	mov	r3, r1
 800ac02:	4630      	mov	r0, r6
 800ac04:	4639      	mov	r1, r7
 800ac06:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ac0a:	f7f5 fb35 	bl	8000278 <__aeabi_dsub>
 800ac0e:	4b19      	ldr	r3, [pc, #100]	; (800ac74 <__ieee754_rem_pio2+0x40c>)
 800ac10:	2200      	movs	r2, #0
 800ac12:	f7f5 fce9 	bl	80005e8 <__aeabi_dmul>
 800ac16:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ac1a:	ad04      	add	r5, sp, #16
 800ac1c:	f04f 0803 	mov.w	r8, #3
 800ac20:	46a9      	mov	r9, r5
 800ac22:	2600      	movs	r6, #0
 800ac24:	2700      	movs	r7, #0
 800ac26:	4632      	mov	r2, r6
 800ac28:	463b      	mov	r3, r7
 800ac2a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800ac2e:	46c3      	mov	fp, r8
 800ac30:	3d08      	subs	r5, #8
 800ac32:	f108 38ff 	add.w	r8, r8, #4294967295
 800ac36:	f7f5 ff3f 	bl	8000ab8 <__aeabi_dcmpeq>
 800ac3a:	2800      	cmp	r0, #0
 800ac3c:	d1f3      	bne.n	800ac26 <__ieee754_rem_pio2+0x3be>
 800ac3e:	4b0e      	ldr	r3, [pc, #56]	; (800ac78 <__ieee754_rem_pio2+0x410>)
 800ac40:	9301      	str	r3, [sp, #4]
 800ac42:	2302      	movs	r3, #2
 800ac44:	9300      	str	r3, [sp, #0]
 800ac46:	4622      	mov	r2, r4
 800ac48:	465b      	mov	r3, fp
 800ac4a:	4651      	mov	r1, sl
 800ac4c:	4648      	mov	r0, r9
 800ac4e:	f000 f817 	bl	800ac80 <__kernel_rem_pio2>
 800ac52:	9b02      	ldr	r3, [sp, #8]
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	4683      	mov	fp, r0
 800ac58:	f6bf ae46 	bge.w	800a8e8 <__ieee754_rem_pio2+0x80>
 800ac5c:	f8da 3004 	ldr.w	r3, [sl, #4]
 800ac60:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ac64:	f8ca 3004 	str.w	r3, [sl, #4]
 800ac68:	f8da 300c 	ldr.w	r3, [sl, #12]
 800ac6c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ac70:	e73a      	b.n	800aae8 <__ieee754_rem_pio2+0x280>
 800ac72:	bf00      	nop
 800ac74:	41700000 	.word	0x41700000
 800ac78:	0800bab8 	.word	0x0800bab8
 800ac7c:	00000000 	.word	0x00000000

0800ac80 <__kernel_rem_pio2>:
 800ac80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac84:	ed2d 8b02 	vpush	{d8}
 800ac88:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800ac8c:	f112 0f14 	cmn.w	r2, #20
 800ac90:	9308      	str	r3, [sp, #32]
 800ac92:	9101      	str	r1, [sp, #4]
 800ac94:	4bc6      	ldr	r3, [pc, #792]	; (800afb0 <__kernel_rem_pio2+0x330>)
 800ac96:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800ac98:	9009      	str	r0, [sp, #36]	; 0x24
 800ac9a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ac9e:	9304      	str	r3, [sp, #16]
 800aca0:	9b08      	ldr	r3, [sp, #32]
 800aca2:	f103 33ff 	add.w	r3, r3, #4294967295
 800aca6:	bfa8      	it	ge
 800aca8:	1ed4      	subge	r4, r2, #3
 800acaa:	9306      	str	r3, [sp, #24]
 800acac:	bfb2      	itee	lt
 800acae:	2400      	movlt	r4, #0
 800acb0:	2318      	movge	r3, #24
 800acb2:	fb94 f4f3 	sdivge	r4, r4, r3
 800acb6:	f06f 0317 	mvn.w	r3, #23
 800acba:	fb04 3303 	mla	r3, r4, r3, r3
 800acbe:	eb03 0a02 	add.w	sl, r3, r2
 800acc2:	9b04      	ldr	r3, [sp, #16]
 800acc4:	9a06      	ldr	r2, [sp, #24]
 800acc6:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800afa0 <__kernel_rem_pio2+0x320>
 800acca:	eb03 0802 	add.w	r8, r3, r2
 800acce:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800acd0:	1aa7      	subs	r7, r4, r2
 800acd2:	ae20      	add	r6, sp, #128	; 0x80
 800acd4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800acd8:	2500      	movs	r5, #0
 800acda:	4545      	cmp	r5, r8
 800acdc:	dd18      	ble.n	800ad10 <__kernel_rem_pio2+0x90>
 800acde:	9b08      	ldr	r3, [sp, #32]
 800ace0:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800ace4:	aa20      	add	r2, sp, #128	; 0x80
 800ace6:	ed9f 8bae 	vldr	d8, [pc, #696]	; 800afa0 <__kernel_rem_pio2+0x320>
 800acea:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800acee:	f1c3 0301 	rsb	r3, r3, #1
 800acf2:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800acf6:	9307      	str	r3, [sp, #28]
 800acf8:	9b07      	ldr	r3, [sp, #28]
 800acfa:	9a04      	ldr	r2, [sp, #16]
 800acfc:	4443      	add	r3, r8
 800acfe:	429a      	cmp	r2, r3
 800ad00:	db2f      	blt.n	800ad62 <__kernel_rem_pio2+0xe2>
 800ad02:	ed8d 8b02 	vstr	d8, [sp, #8]
 800ad06:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800ad0a:	462f      	mov	r7, r5
 800ad0c:	2600      	movs	r6, #0
 800ad0e:	e01b      	b.n	800ad48 <__kernel_rem_pio2+0xc8>
 800ad10:	42ef      	cmn	r7, r5
 800ad12:	d407      	bmi.n	800ad24 <__kernel_rem_pio2+0xa4>
 800ad14:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800ad18:	f7f5 fbfc 	bl	8000514 <__aeabi_i2d>
 800ad1c:	e8e6 0102 	strd	r0, r1, [r6], #8
 800ad20:	3501      	adds	r5, #1
 800ad22:	e7da      	b.n	800acda <__kernel_rem_pio2+0x5a>
 800ad24:	ec51 0b18 	vmov	r0, r1, d8
 800ad28:	e7f8      	b.n	800ad1c <__kernel_rem_pio2+0x9c>
 800ad2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad2e:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800ad32:	f7f5 fc59 	bl	80005e8 <__aeabi_dmul>
 800ad36:	4602      	mov	r2, r0
 800ad38:	460b      	mov	r3, r1
 800ad3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ad3e:	f7f5 fa9d 	bl	800027c <__adddf3>
 800ad42:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ad46:	3601      	adds	r6, #1
 800ad48:	9b06      	ldr	r3, [sp, #24]
 800ad4a:	429e      	cmp	r6, r3
 800ad4c:	f1a7 0708 	sub.w	r7, r7, #8
 800ad50:	ddeb      	ble.n	800ad2a <__kernel_rem_pio2+0xaa>
 800ad52:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ad56:	3508      	adds	r5, #8
 800ad58:	ecab 7b02 	vstmia	fp!, {d7}
 800ad5c:	f108 0801 	add.w	r8, r8, #1
 800ad60:	e7ca      	b.n	800acf8 <__kernel_rem_pio2+0x78>
 800ad62:	9b04      	ldr	r3, [sp, #16]
 800ad64:	aa0c      	add	r2, sp, #48	; 0x30
 800ad66:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ad6a:	930b      	str	r3, [sp, #44]	; 0x2c
 800ad6c:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800ad6e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800ad72:	9c04      	ldr	r4, [sp, #16]
 800ad74:	930a      	str	r3, [sp, #40]	; 0x28
 800ad76:	ab98      	add	r3, sp, #608	; 0x260
 800ad78:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ad7c:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800ad80:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800ad84:	f8cd b008 	str.w	fp, [sp, #8]
 800ad88:	4625      	mov	r5, r4
 800ad8a:	2d00      	cmp	r5, #0
 800ad8c:	dc78      	bgt.n	800ae80 <__kernel_rem_pio2+0x200>
 800ad8e:	ec47 6b10 	vmov	d0, r6, r7
 800ad92:	4650      	mov	r0, sl
 800ad94:	f000 fd14 	bl	800b7c0 <scalbn>
 800ad98:	ec57 6b10 	vmov	r6, r7, d0
 800ad9c:	2200      	movs	r2, #0
 800ad9e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800ada2:	ee10 0a10 	vmov	r0, s0
 800ada6:	4639      	mov	r1, r7
 800ada8:	f7f5 fc1e 	bl	80005e8 <__aeabi_dmul>
 800adac:	ec41 0b10 	vmov	d0, r0, r1
 800adb0:	f000 fc86 	bl	800b6c0 <floor>
 800adb4:	4b7f      	ldr	r3, [pc, #508]	; (800afb4 <__kernel_rem_pio2+0x334>)
 800adb6:	ec51 0b10 	vmov	r0, r1, d0
 800adba:	2200      	movs	r2, #0
 800adbc:	f7f5 fc14 	bl	80005e8 <__aeabi_dmul>
 800adc0:	4602      	mov	r2, r0
 800adc2:	460b      	mov	r3, r1
 800adc4:	4630      	mov	r0, r6
 800adc6:	4639      	mov	r1, r7
 800adc8:	f7f5 fa56 	bl	8000278 <__aeabi_dsub>
 800adcc:	460f      	mov	r7, r1
 800adce:	4606      	mov	r6, r0
 800add0:	f7f5 fea4 	bl	8000b1c <__aeabi_d2iz>
 800add4:	9007      	str	r0, [sp, #28]
 800add6:	f7f5 fb9d 	bl	8000514 <__aeabi_i2d>
 800adda:	4602      	mov	r2, r0
 800addc:	460b      	mov	r3, r1
 800adde:	4630      	mov	r0, r6
 800ade0:	4639      	mov	r1, r7
 800ade2:	f7f5 fa49 	bl	8000278 <__aeabi_dsub>
 800ade6:	f1ba 0f00 	cmp.w	sl, #0
 800adea:	4606      	mov	r6, r0
 800adec:	460f      	mov	r7, r1
 800adee:	dd70      	ble.n	800aed2 <__kernel_rem_pio2+0x252>
 800adf0:	1e62      	subs	r2, r4, #1
 800adf2:	ab0c      	add	r3, sp, #48	; 0x30
 800adf4:	9d07      	ldr	r5, [sp, #28]
 800adf6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800adfa:	f1ca 0118 	rsb	r1, sl, #24
 800adfe:	fa40 f301 	asr.w	r3, r0, r1
 800ae02:	441d      	add	r5, r3
 800ae04:	408b      	lsls	r3, r1
 800ae06:	1ac0      	subs	r0, r0, r3
 800ae08:	ab0c      	add	r3, sp, #48	; 0x30
 800ae0a:	9507      	str	r5, [sp, #28]
 800ae0c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800ae10:	f1ca 0317 	rsb	r3, sl, #23
 800ae14:	fa40 f303 	asr.w	r3, r0, r3
 800ae18:	9302      	str	r3, [sp, #8]
 800ae1a:	9b02      	ldr	r3, [sp, #8]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	dd66      	ble.n	800aeee <__kernel_rem_pio2+0x26e>
 800ae20:	9b07      	ldr	r3, [sp, #28]
 800ae22:	2200      	movs	r2, #0
 800ae24:	3301      	adds	r3, #1
 800ae26:	9307      	str	r3, [sp, #28]
 800ae28:	4615      	mov	r5, r2
 800ae2a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800ae2e:	4294      	cmp	r4, r2
 800ae30:	f300 8099 	bgt.w	800af66 <__kernel_rem_pio2+0x2e6>
 800ae34:	f1ba 0f00 	cmp.w	sl, #0
 800ae38:	dd07      	ble.n	800ae4a <__kernel_rem_pio2+0x1ca>
 800ae3a:	f1ba 0f01 	cmp.w	sl, #1
 800ae3e:	f000 80a5 	beq.w	800af8c <__kernel_rem_pio2+0x30c>
 800ae42:	f1ba 0f02 	cmp.w	sl, #2
 800ae46:	f000 80c1 	beq.w	800afcc <__kernel_rem_pio2+0x34c>
 800ae4a:	9b02      	ldr	r3, [sp, #8]
 800ae4c:	2b02      	cmp	r3, #2
 800ae4e:	d14e      	bne.n	800aeee <__kernel_rem_pio2+0x26e>
 800ae50:	4632      	mov	r2, r6
 800ae52:	463b      	mov	r3, r7
 800ae54:	4958      	ldr	r1, [pc, #352]	; (800afb8 <__kernel_rem_pio2+0x338>)
 800ae56:	2000      	movs	r0, #0
 800ae58:	f7f5 fa0e 	bl	8000278 <__aeabi_dsub>
 800ae5c:	4606      	mov	r6, r0
 800ae5e:	460f      	mov	r7, r1
 800ae60:	2d00      	cmp	r5, #0
 800ae62:	d044      	beq.n	800aeee <__kernel_rem_pio2+0x26e>
 800ae64:	4650      	mov	r0, sl
 800ae66:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800afa8 <__kernel_rem_pio2+0x328>
 800ae6a:	f000 fca9 	bl	800b7c0 <scalbn>
 800ae6e:	4630      	mov	r0, r6
 800ae70:	4639      	mov	r1, r7
 800ae72:	ec53 2b10 	vmov	r2, r3, d0
 800ae76:	f7f5 f9ff 	bl	8000278 <__aeabi_dsub>
 800ae7a:	4606      	mov	r6, r0
 800ae7c:	460f      	mov	r7, r1
 800ae7e:	e036      	b.n	800aeee <__kernel_rem_pio2+0x26e>
 800ae80:	4b4e      	ldr	r3, [pc, #312]	; (800afbc <__kernel_rem_pio2+0x33c>)
 800ae82:	2200      	movs	r2, #0
 800ae84:	4630      	mov	r0, r6
 800ae86:	4639      	mov	r1, r7
 800ae88:	f7f5 fbae 	bl	80005e8 <__aeabi_dmul>
 800ae8c:	f7f5 fe46 	bl	8000b1c <__aeabi_d2iz>
 800ae90:	f7f5 fb40 	bl	8000514 <__aeabi_i2d>
 800ae94:	4b4a      	ldr	r3, [pc, #296]	; (800afc0 <__kernel_rem_pio2+0x340>)
 800ae96:	2200      	movs	r2, #0
 800ae98:	4680      	mov	r8, r0
 800ae9a:	4689      	mov	r9, r1
 800ae9c:	f7f5 fba4 	bl	80005e8 <__aeabi_dmul>
 800aea0:	4602      	mov	r2, r0
 800aea2:	460b      	mov	r3, r1
 800aea4:	4630      	mov	r0, r6
 800aea6:	4639      	mov	r1, r7
 800aea8:	f7f5 f9e6 	bl	8000278 <__aeabi_dsub>
 800aeac:	f7f5 fe36 	bl	8000b1c <__aeabi_d2iz>
 800aeb0:	9b02      	ldr	r3, [sp, #8]
 800aeb2:	f843 0b04 	str.w	r0, [r3], #4
 800aeb6:	3d01      	subs	r5, #1
 800aeb8:	9302      	str	r3, [sp, #8]
 800aeba:	ab70      	add	r3, sp, #448	; 0x1c0
 800aebc:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800aec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aec4:	4640      	mov	r0, r8
 800aec6:	4649      	mov	r1, r9
 800aec8:	f7f5 f9d8 	bl	800027c <__adddf3>
 800aecc:	4606      	mov	r6, r0
 800aece:	460f      	mov	r7, r1
 800aed0:	e75b      	b.n	800ad8a <__kernel_rem_pio2+0x10a>
 800aed2:	d105      	bne.n	800aee0 <__kernel_rem_pio2+0x260>
 800aed4:	1e63      	subs	r3, r4, #1
 800aed6:	aa0c      	add	r2, sp, #48	; 0x30
 800aed8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800aedc:	15c3      	asrs	r3, r0, #23
 800aede:	e79b      	b.n	800ae18 <__kernel_rem_pio2+0x198>
 800aee0:	4b38      	ldr	r3, [pc, #224]	; (800afc4 <__kernel_rem_pio2+0x344>)
 800aee2:	2200      	movs	r2, #0
 800aee4:	f7f5 fe06 	bl	8000af4 <__aeabi_dcmpge>
 800aee8:	2800      	cmp	r0, #0
 800aeea:	d139      	bne.n	800af60 <__kernel_rem_pio2+0x2e0>
 800aeec:	9002      	str	r0, [sp, #8]
 800aeee:	2200      	movs	r2, #0
 800aef0:	2300      	movs	r3, #0
 800aef2:	4630      	mov	r0, r6
 800aef4:	4639      	mov	r1, r7
 800aef6:	f7f5 fddf 	bl	8000ab8 <__aeabi_dcmpeq>
 800aefa:	2800      	cmp	r0, #0
 800aefc:	f000 80b4 	beq.w	800b068 <__kernel_rem_pio2+0x3e8>
 800af00:	f104 3bff 	add.w	fp, r4, #4294967295
 800af04:	465b      	mov	r3, fp
 800af06:	2200      	movs	r2, #0
 800af08:	9904      	ldr	r1, [sp, #16]
 800af0a:	428b      	cmp	r3, r1
 800af0c:	da65      	bge.n	800afda <__kernel_rem_pio2+0x35a>
 800af0e:	2a00      	cmp	r2, #0
 800af10:	d07b      	beq.n	800b00a <__kernel_rem_pio2+0x38a>
 800af12:	ab0c      	add	r3, sp, #48	; 0x30
 800af14:	f1aa 0a18 	sub.w	sl, sl, #24
 800af18:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	f000 80a0 	beq.w	800b062 <__kernel_rem_pio2+0x3e2>
 800af22:	ed9f 0b21 	vldr	d0, [pc, #132]	; 800afa8 <__kernel_rem_pio2+0x328>
 800af26:	4650      	mov	r0, sl
 800af28:	f000 fc4a 	bl	800b7c0 <scalbn>
 800af2c:	4f23      	ldr	r7, [pc, #140]	; (800afbc <__kernel_rem_pio2+0x33c>)
 800af2e:	ec55 4b10 	vmov	r4, r5, d0
 800af32:	46d8      	mov	r8, fp
 800af34:	2600      	movs	r6, #0
 800af36:	f1b8 0f00 	cmp.w	r8, #0
 800af3a:	f280 80cf 	bge.w	800b0dc <__kernel_rem_pio2+0x45c>
 800af3e:	ed9f 8b18 	vldr	d8, [pc, #96]	; 800afa0 <__kernel_rem_pio2+0x320>
 800af42:	465f      	mov	r7, fp
 800af44:	f04f 0800 	mov.w	r8, #0
 800af48:	2f00      	cmp	r7, #0
 800af4a:	f2c0 80fd 	blt.w	800b148 <__kernel_rem_pio2+0x4c8>
 800af4e:	ab70      	add	r3, sp, #448	; 0x1c0
 800af50:	f8df a074 	ldr.w	sl, [pc, #116]	; 800afc8 <__kernel_rem_pio2+0x348>
 800af54:	ec55 4b18 	vmov	r4, r5, d8
 800af58:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800af5c:	2600      	movs	r6, #0
 800af5e:	e0e5      	b.n	800b12c <__kernel_rem_pio2+0x4ac>
 800af60:	2302      	movs	r3, #2
 800af62:	9302      	str	r3, [sp, #8]
 800af64:	e75c      	b.n	800ae20 <__kernel_rem_pio2+0x1a0>
 800af66:	f8db 3000 	ldr.w	r3, [fp]
 800af6a:	b955      	cbnz	r5, 800af82 <__kernel_rem_pio2+0x302>
 800af6c:	b123      	cbz	r3, 800af78 <__kernel_rem_pio2+0x2f8>
 800af6e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800af72:	f8cb 3000 	str.w	r3, [fp]
 800af76:	2301      	movs	r3, #1
 800af78:	3201      	adds	r2, #1
 800af7a:	f10b 0b04 	add.w	fp, fp, #4
 800af7e:	461d      	mov	r5, r3
 800af80:	e755      	b.n	800ae2e <__kernel_rem_pio2+0x1ae>
 800af82:	1acb      	subs	r3, r1, r3
 800af84:	f8cb 3000 	str.w	r3, [fp]
 800af88:	462b      	mov	r3, r5
 800af8a:	e7f5      	b.n	800af78 <__kernel_rem_pio2+0x2f8>
 800af8c:	1e62      	subs	r2, r4, #1
 800af8e:	ab0c      	add	r3, sp, #48	; 0x30
 800af90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af94:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800af98:	a90c      	add	r1, sp, #48	; 0x30
 800af9a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800af9e:	e754      	b.n	800ae4a <__kernel_rem_pio2+0x1ca>
	...
 800afac:	3ff00000 	.word	0x3ff00000
 800afb0:	0800bc00 	.word	0x0800bc00
 800afb4:	40200000 	.word	0x40200000
 800afb8:	3ff00000 	.word	0x3ff00000
 800afbc:	3e700000 	.word	0x3e700000
 800afc0:	41700000 	.word	0x41700000
 800afc4:	3fe00000 	.word	0x3fe00000
 800afc8:	0800bbc0 	.word	0x0800bbc0
 800afcc:	1e62      	subs	r2, r4, #1
 800afce:	ab0c      	add	r3, sp, #48	; 0x30
 800afd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afd4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800afd8:	e7de      	b.n	800af98 <__kernel_rem_pio2+0x318>
 800afda:	a90c      	add	r1, sp, #48	; 0x30
 800afdc:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800afe0:	3b01      	subs	r3, #1
 800afe2:	430a      	orrs	r2, r1
 800afe4:	e790      	b.n	800af08 <__kernel_rem_pio2+0x288>
 800afe6:	3301      	adds	r3, #1
 800afe8:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800afec:	2900      	cmp	r1, #0
 800afee:	d0fa      	beq.n	800afe6 <__kernel_rem_pio2+0x366>
 800aff0:	9a08      	ldr	r2, [sp, #32]
 800aff2:	18e3      	adds	r3, r4, r3
 800aff4:	18a6      	adds	r6, r4, r2
 800aff6:	aa20      	add	r2, sp, #128	; 0x80
 800aff8:	1c65      	adds	r5, r4, #1
 800affa:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800affe:	9302      	str	r3, [sp, #8]
 800b000:	9b02      	ldr	r3, [sp, #8]
 800b002:	42ab      	cmp	r3, r5
 800b004:	da04      	bge.n	800b010 <__kernel_rem_pio2+0x390>
 800b006:	461c      	mov	r4, r3
 800b008:	e6b5      	b.n	800ad76 <__kernel_rem_pio2+0xf6>
 800b00a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b00c:	2301      	movs	r3, #1
 800b00e:	e7eb      	b.n	800afe8 <__kernel_rem_pio2+0x368>
 800b010:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b012:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b016:	f7f5 fa7d 	bl	8000514 <__aeabi_i2d>
 800b01a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800b01e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b020:	46b3      	mov	fp, r6
 800b022:	461c      	mov	r4, r3
 800b024:	2700      	movs	r7, #0
 800b026:	f04f 0800 	mov.w	r8, #0
 800b02a:	f04f 0900 	mov.w	r9, #0
 800b02e:	9b06      	ldr	r3, [sp, #24]
 800b030:	429f      	cmp	r7, r3
 800b032:	dd06      	ble.n	800b042 <__kernel_rem_pio2+0x3c2>
 800b034:	ab70      	add	r3, sp, #448	; 0x1c0
 800b036:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800b03a:	e9c3 8900 	strd	r8, r9, [r3]
 800b03e:	3501      	adds	r5, #1
 800b040:	e7de      	b.n	800b000 <__kernel_rem_pio2+0x380>
 800b042:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800b046:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800b04a:	f7f5 facd 	bl	80005e8 <__aeabi_dmul>
 800b04e:	4602      	mov	r2, r0
 800b050:	460b      	mov	r3, r1
 800b052:	4640      	mov	r0, r8
 800b054:	4649      	mov	r1, r9
 800b056:	f7f5 f911 	bl	800027c <__adddf3>
 800b05a:	3701      	adds	r7, #1
 800b05c:	4680      	mov	r8, r0
 800b05e:	4689      	mov	r9, r1
 800b060:	e7e5      	b.n	800b02e <__kernel_rem_pio2+0x3ae>
 800b062:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b066:	e754      	b.n	800af12 <__kernel_rem_pio2+0x292>
 800b068:	ec47 6b10 	vmov	d0, r6, r7
 800b06c:	f1ca 0000 	rsb	r0, sl, #0
 800b070:	f000 fba6 	bl	800b7c0 <scalbn>
 800b074:	ec57 6b10 	vmov	r6, r7, d0
 800b078:	4b9f      	ldr	r3, [pc, #636]	; (800b2f8 <__kernel_rem_pio2+0x678>)
 800b07a:	ee10 0a10 	vmov	r0, s0
 800b07e:	2200      	movs	r2, #0
 800b080:	4639      	mov	r1, r7
 800b082:	f7f5 fd37 	bl	8000af4 <__aeabi_dcmpge>
 800b086:	b300      	cbz	r0, 800b0ca <__kernel_rem_pio2+0x44a>
 800b088:	4b9c      	ldr	r3, [pc, #624]	; (800b2fc <__kernel_rem_pio2+0x67c>)
 800b08a:	2200      	movs	r2, #0
 800b08c:	4630      	mov	r0, r6
 800b08e:	4639      	mov	r1, r7
 800b090:	f7f5 faaa 	bl	80005e8 <__aeabi_dmul>
 800b094:	f7f5 fd42 	bl	8000b1c <__aeabi_d2iz>
 800b098:	4605      	mov	r5, r0
 800b09a:	f7f5 fa3b 	bl	8000514 <__aeabi_i2d>
 800b09e:	4b96      	ldr	r3, [pc, #600]	; (800b2f8 <__kernel_rem_pio2+0x678>)
 800b0a0:	2200      	movs	r2, #0
 800b0a2:	f7f5 faa1 	bl	80005e8 <__aeabi_dmul>
 800b0a6:	460b      	mov	r3, r1
 800b0a8:	4602      	mov	r2, r0
 800b0aa:	4639      	mov	r1, r7
 800b0ac:	4630      	mov	r0, r6
 800b0ae:	f7f5 f8e3 	bl	8000278 <__aeabi_dsub>
 800b0b2:	f7f5 fd33 	bl	8000b1c <__aeabi_d2iz>
 800b0b6:	f104 0b01 	add.w	fp, r4, #1
 800b0ba:	ab0c      	add	r3, sp, #48	; 0x30
 800b0bc:	f10a 0a18 	add.w	sl, sl, #24
 800b0c0:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800b0c4:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 800b0c8:	e72b      	b.n	800af22 <__kernel_rem_pio2+0x2a2>
 800b0ca:	4630      	mov	r0, r6
 800b0cc:	4639      	mov	r1, r7
 800b0ce:	f7f5 fd25 	bl	8000b1c <__aeabi_d2iz>
 800b0d2:	ab0c      	add	r3, sp, #48	; 0x30
 800b0d4:	46a3      	mov	fp, r4
 800b0d6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800b0da:	e722      	b.n	800af22 <__kernel_rem_pio2+0x2a2>
 800b0dc:	ab70      	add	r3, sp, #448	; 0x1c0
 800b0de:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 800b0e2:	ab0c      	add	r3, sp, #48	; 0x30
 800b0e4:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800b0e8:	f7f5 fa14 	bl	8000514 <__aeabi_i2d>
 800b0ec:	4622      	mov	r2, r4
 800b0ee:	462b      	mov	r3, r5
 800b0f0:	f7f5 fa7a 	bl	80005e8 <__aeabi_dmul>
 800b0f4:	4632      	mov	r2, r6
 800b0f6:	e9c9 0100 	strd	r0, r1, [r9]
 800b0fa:	463b      	mov	r3, r7
 800b0fc:	4620      	mov	r0, r4
 800b0fe:	4629      	mov	r1, r5
 800b100:	f7f5 fa72 	bl	80005e8 <__aeabi_dmul>
 800b104:	f108 38ff 	add.w	r8, r8, #4294967295
 800b108:	4604      	mov	r4, r0
 800b10a:	460d      	mov	r5, r1
 800b10c:	e713      	b.n	800af36 <__kernel_rem_pio2+0x2b6>
 800b10e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800b112:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800b116:	f7f5 fa67 	bl	80005e8 <__aeabi_dmul>
 800b11a:	4602      	mov	r2, r0
 800b11c:	460b      	mov	r3, r1
 800b11e:	4620      	mov	r0, r4
 800b120:	4629      	mov	r1, r5
 800b122:	f7f5 f8ab 	bl	800027c <__adddf3>
 800b126:	3601      	adds	r6, #1
 800b128:	4604      	mov	r4, r0
 800b12a:	460d      	mov	r5, r1
 800b12c:	9b04      	ldr	r3, [sp, #16]
 800b12e:	429e      	cmp	r6, r3
 800b130:	dc01      	bgt.n	800b136 <__kernel_rem_pio2+0x4b6>
 800b132:	45b0      	cmp	r8, r6
 800b134:	daeb      	bge.n	800b10e <__kernel_rem_pio2+0x48e>
 800b136:	ab48      	add	r3, sp, #288	; 0x120
 800b138:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800b13c:	e9c3 4500 	strd	r4, r5, [r3]
 800b140:	3f01      	subs	r7, #1
 800b142:	f108 0801 	add.w	r8, r8, #1
 800b146:	e6ff      	b.n	800af48 <__kernel_rem_pio2+0x2c8>
 800b148:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800b14a:	2b02      	cmp	r3, #2
 800b14c:	dc0b      	bgt.n	800b166 <__kernel_rem_pio2+0x4e6>
 800b14e:	2b00      	cmp	r3, #0
 800b150:	dc6e      	bgt.n	800b230 <__kernel_rem_pio2+0x5b0>
 800b152:	d045      	beq.n	800b1e0 <__kernel_rem_pio2+0x560>
 800b154:	9b07      	ldr	r3, [sp, #28]
 800b156:	f003 0007 	and.w	r0, r3, #7
 800b15a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800b15e:	ecbd 8b02 	vpop	{d8}
 800b162:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b166:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800b168:	2b03      	cmp	r3, #3
 800b16a:	d1f3      	bne.n	800b154 <__kernel_rem_pio2+0x4d4>
 800b16c:	ab48      	add	r3, sp, #288	; 0x120
 800b16e:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 800b172:	46d0      	mov	r8, sl
 800b174:	46d9      	mov	r9, fp
 800b176:	f1b9 0f00 	cmp.w	r9, #0
 800b17a:	f1a8 0808 	sub.w	r8, r8, #8
 800b17e:	dc64      	bgt.n	800b24a <__kernel_rem_pio2+0x5ca>
 800b180:	465c      	mov	r4, fp
 800b182:	2c01      	cmp	r4, #1
 800b184:	f1aa 0a08 	sub.w	sl, sl, #8
 800b188:	dc7e      	bgt.n	800b288 <__kernel_rem_pio2+0x608>
 800b18a:	2000      	movs	r0, #0
 800b18c:	2100      	movs	r1, #0
 800b18e:	f1bb 0f01 	cmp.w	fp, #1
 800b192:	f300 8097 	bgt.w	800b2c4 <__kernel_rem_pio2+0x644>
 800b196:	9b02      	ldr	r3, [sp, #8]
 800b198:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 800b19c:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	f040 8099 	bne.w	800b2d8 <__kernel_rem_pio2+0x658>
 800b1a6:	9b01      	ldr	r3, [sp, #4]
 800b1a8:	e9c3 5600 	strd	r5, r6, [r3]
 800b1ac:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800b1b0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800b1b4:	e7ce      	b.n	800b154 <__kernel_rem_pio2+0x4d4>
 800b1b6:	ab48      	add	r3, sp, #288	; 0x120
 800b1b8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b1bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1c0:	f7f5 f85c 	bl	800027c <__adddf3>
 800b1c4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b1c8:	f1bb 0f00 	cmp.w	fp, #0
 800b1cc:	daf3      	bge.n	800b1b6 <__kernel_rem_pio2+0x536>
 800b1ce:	9b02      	ldr	r3, [sp, #8]
 800b1d0:	b113      	cbz	r3, 800b1d8 <__kernel_rem_pio2+0x558>
 800b1d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b1d6:	4619      	mov	r1, r3
 800b1d8:	9b01      	ldr	r3, [sp, #4]
 800b1da:	e9c3 0100 	strd	r0, r1, [r3]
 800b1de:	e7b9      	b.n	800b154 <__kernel_rem_pio2+0x4d4>
 800b1e0:	2000      	movs	r0, #0
 800b1e2:	2100      	movs	r1, #0
 800b1e4:	e7f0      	b.n	800b1c8 <__kernel_rem_pio2+0x548>
 800b1e6:	ab48      	add	r3, sp, #288	; 0x120
 800b1e8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b1ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1f0:	f7f5 f844 	bl	800027c <__adddf3>
 800b1f4:	3c01      	subs	r4, #1
 800b1f6:	2c00      	cmp	r4, #0
 800b1f8:	daf5      	bge.n	800b1e6 <__kernel_rem_pio2+0x566>
 800b1fa:	9b02      	ldr	r3, [sp, #8]
 800b1fc:	b1e3      	cbz	r3, 800b238 <__kernel_rem_pio2+0x5b8>
 800b1fe:	4602      	mov	r2, r0
 800b200:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b204:	9c01      	ldr	r4, [sp, #4]
 800b206:	e9c4 2300 	strd	r2, r3, [r4]
 800b20a:	4602      	mov	r2, r0
 800b20c:	460b      	mov	r3, r1
 800b20e:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800b212:	f7f5 f831 	bl	8000278 <__aeabi_dsub>
 800b216:	ad4a      	add	r5, sp, #296	; 0x128
 800b218:	2401      	movs	r4, #1
 800b21a:	45a3      	cmp	fp, r4
 800b21c:	da0f      	bge.n	800b23e <__kernel_rem_pio2+0x5be>
 800b21e:	9b02      	ldr	r3, [sp, #8]
 800b220:	b113      	cbz	r3, 800b228 <__kernel_rem_pio2+0x5a8>
 800b222:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b226:	4619      	mov	r1, r3
 800b228:	9b01      	ldr	r3, [sp, #4]
 800b22a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800b22e:	e791      	b.n	800b154 <__kernel_rem_pio2+0x4d4>
 800b230:	465c      	mov	r4, fp
 800b232:	2000      	movs	r0, #0
 800b234:	2100      	movs	r1, #0
 800b236:	e7de      	b.n	800b1f6 <__kernel_rem_pio2+0x576>
 800b238:	4602      	mov	r2, r0
 800b23a:	460b      	mov	r3, r1
 800b23c:	e7e2      	b.n	800b204 <__kernel_rem_pio2+0x584>
 800b23e:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800b242:	f7f5 f81b 	bl	800027c <__adddf3>
 800b246:	3401      	adds	r4, #1
 800b248:	e7e7      	b.n	800b21a <__kernel_rem_pio2+0x59a>
 800b24a:	e9d8 4500 	ldrd	r4, r5, [r8]
 800b24e:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 800b252:	4620      	mov	r0, r4
 800b254:	4632      	mov	r2, r6
 800b256:	463b      	mov	r3, r7
 800b258:	4629      	mov	r1, r5
 800b25a:	f7f5 f80f 	bl	800027c <__adddf3>
 800b25e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b262:	4602      	mov	r2, r0
 800b264:	460b      	mov	r3, r1
 800b266:	4620      	mov	r0, r4
 800b268:	4629      	mov	r1, r5
 800b26a:	f7f5 f805 	bl	8000278 <__aeabi_dsub>
 800b26e:	4632      	mov	r2, r6
 800b270:	463b      	mov	r3, r7
 800b272:	f7f5 f803 	bl	800027c <__adddf3>
 800b276:	ed9d 7b04 	vldr	d7, [sp, #16]
 800b27a:	e9c8 0102 	strd	r0, r1, [r8, #8]
 800b27e:	ed88 7b00 	vstr	d7, [r8]
 800b282:	f109 39ff 	add.w	r9, r9, #4294967295
 800b286:	e776      	b.n	800b176 <__kernel_rem_pio2+0x4f6>
 800b288:	e9da 8900 	ldrd	r8, r9, [sl]
 800b28c:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800b290:	4640      	mov	r0, r8
 800b292:	4632      	mov	r2, r6
 800b294:	463b      	mov	r3, r7
 800b296:	4649      	mov	r1, r9
 800b298:	f7f4 fff0 	bl	800027c <__adddf3>
 800b29c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b2a0:	4602      	mov	r2, r0
 800b2a2:	460b      	mov	r3, r1
 800b2a4:	4640      	mov	r0, r8
 800b2a6:	4649      	mov	r1, r9
 800b2a8:	f7f4 ffe6 	bl	8000278 <__aeabi_dsub>
 800b2ac:	4632      	mov	r2, r6
 800b2ae:	463b      	mov	r3, r7
 800b2b0:	f7f4 ffe4 	bl	800027c <__adddf3>
 800b2b4:	ed9d 7b04 	vldr	d7, [sp, #16]
 800b2b8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b2bc:	ed8a 7b00 	vstr	d7, [sl]
 800b2c0:	3c01      	subs	r4, #1
 800b2c2:	e75e      	b.n	800b182 <__kernel_rem_pio2+0x502>
 800b2c4:	ab48      	add	r3, sp, #288	; 0x120
 800b2c6:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b2ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2ce:	f7f4 ffd5 	bl	800027c <__adddf3>
 800b2d2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b2d6:	e75a      	b.n	800b18e <__kernel_rem_pio2+0x50e>
 800b2d8:	9b01      	ldr	r3, [sp, #4]
 800b2da:	9a01      	ldr	r2, [sp, #4]
 800b2dc:	601d      	str	r5, [r3, #0]
 800b2de:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800b2e2:	605c      	str	r4, [r3, #4]
 800b2e4:	609f      	str	r7, [r3, #8]
 800b2e6:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800b2ea:	60d3      	str	r3, [r2, #12]
 800b2ec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b2f0:	6110      	str	r0, [r2, #16]
 800b2f2:	6153      	str	r3, [r2, #20]
 800b2f4:	e72e      	b.n	800b154 <__kernel_rem_pio2+0x4d4>
 800b2f6:	bf00      	nop
 800b2f8:	41700000 	.word	0x41700000
 800b2fc:	3e700000 	.word	0x3e700000

0800b300 <__kernel_tan>:
 800b300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b304:	ed2d 8b04 	vpush	{d8-d9}
 800b308:	ec5b ab10 	vmov	sl, fp, d0
 800b30c:	4be2      	ldr	r3, [pc, #904]	; (800b698 <__kernel_tan+0x398>)
 800b30e:	b085      	sub	sp, #20
 800b310:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 800b314:	429f      	cmp	r7, r3
 800b316:	ed8d 1b00 	vstr	d1, [sp]
 800b31a:	4606      	mov	r6, r0
 800b31c:	f8cd b00c 	str.w	fp, [sp, #12]
 800b320:	dc24      	bgt.n	800b36c <__kernel_tan+0x6c>
 800b322:	ee10 0a10 	vmov	r0, s0
 800b326:	4659      	mov	r1, fp
 800b328:	f7f5 fbf8 	bl	8000b1c <__aeabi_d2iz>
 800b32c:	2800      	cmp	r0, #0
 800b32e:	d148      	bne.n	800b3c2 <__kernel_tan+0xc2>
 800b330:	1c73      	adds	r3, r6, #1
 800b332:	4652      	mov	r2, sl
 800b334:	4313      	orrs	r3, r2
 800b336:	433b      	orrs	r3, r7
 800b338:	d112      	bne.n	800b360 <__kernel_tan+0x60>
 800b33a:	ec4b ab10 	vmov	d0, sl, fp
 800b33e:	f000 f9b3 	bl	800b6a8 <fabs>
 800b342:	49d6      	ldr	r1, [pc, #856]	; (800b69c <__kernel_tan+0x39c>)
 800b344:	ec53 2b10 	vmov	r2, r3, d0
 800b348:	2000      	movs	r0, #0
 800b34a:	f7f5 fa77 	bl	800083c <__aeabi_ddiv>
 800b34e:	4682      	mov	sl, r0
 800b350:	468b      	mov	fp, r1
 800b352:	ec4b ab10 	vmov	d0, sl, fp
 800b356:	b005      	add	sp, #20
 800b358:	ecbd 8b04 	vpop	{d8-d9}
 800b35c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b360:	2e01      	cmp	r6, #1
 800b362:	d0f6      	beq.n	800b352 <__kernel_tan+0x52>
 800b364:	49ce      	ldr	r1, [pc, #824]	; (800b6a0 <__kernel_tan+0x3a0>)
 800b366:	465b      	mov	r3, fp
 800b368:	2000      	movs	r0, #0
 800b36a:	e7ee      	b.n	800b34a <__kernel_tan+0x4a>
 800b36c:	4bcd      	ldr	r3, [pc, #820]	; (800b6a4 <__kernel_tan+0x3a4>)
 800b36e:	429f      	cmp	r7, r3
 800b370:	dd27      	ble.n	800b3c2 <__kernel_tan+0xc2>
 800b372:	9b03      	ldr	r3, [sp, #12]
 800b374:	2b00      	cmp	r3, #0
 800b376:	da0a      	bge.n	800b38e <__kernel_tan+0x8e>
 800b378:	e9dd 2100 	ldrd	r2, r1, [sp]
 800b37c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b380:	469b      	mov	fp, r3
 800b382:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b386:	e9cd 2300 	strd	r2, r3, [sp]
 800b38a:	ee10 aa10 	vmov	sl, s0
 800b38e:	4652      	mov	r2, sl
 800b390:	465b      	mov	r3, fp
 800b392:	a1a1      	add	r1, pc, #644	; (adr r1, 800b618 <__kernel_tan+0x318>)
 800b394:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b398:	f7f4 ff6e 	bl	8000278 <__aeabi_dsub>
 800b39c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b3a0:	4604      	mov	r4, r0
 800b3a2:	460d      	mov	r5, r1
 800b3a4:	a19e      	add	r1, pc, #632	; (adr r1, 800b620 <__kernel_tan+0x320>)
 800b3a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b3aa:	f7f4 ff65 	bl	8000278 <__aeabi_dsub>
 800b3ae:	4622      	mov	r2, r4
 800b3b0:	462b      	mov	r3, r5
 800b3b2:	f7f4 ff63 	bl	800027c <__adddf3>
 800b3b6:	ed9f 7b9c 	vldr	d7, [pc, #624]	; 800b628 <__kernel_tan+0x328>
 800b3ba:	ed8d 7b00 	vstr	d7, [sp]
 800b3be:	4682      	mov	sl, r0
 800b3c0:	468b      	mov	fp, r1
 800b3c2:	4652      	mov	r2, sl
 800b3c4:	465b      	mov	r3, fp
 800b3c6:	4650      	mov	r0, sl
 800b3c8:	4659      	mov	r1, fp
 800b3ca:	f7f5 f90d 	bl	80005e8 <__aeabi_dmul>
 800b3ce:	4602      	mov	r2, r0
 800b3d0:	460b      	mov	r3, r1
 800b3d2:	4680      	mov	r8, r0
 800b3d4:	4689      	mov	r9, r1
 800b3d6:	f7f5 f907 	bl	80005e8 <__aeabi_dmul>
 800b3da:	4642      	mov	r2, r8
 800b3dc:	4604      	mov	r4, r0
 800b3de:	460d      	mov	r5, r1
 800b3e0:	464b      	mov	r3, r9
 800b3e2:	4650      	mov	r0, sl
 800b3e4:	4659      	mov	r1, fp
 800b3e6:	f7f5 f8ff 	bl	80005e8 <__aeabi_dmul>
 800b3ea:	a391      	add	r3, pc, #580	; (adr r3, 800b630 <__kernel_tan+0x330>)
 800b3ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3f0:	ec41 0b18 	vmov	d8, r0, r1
 800b3f4:	4620      	mov	r0, r4
 800b3f6:	4629      	mov	r1, r5
 800b3f8:	f7f5 f8f6 	bl	80005e8 <__aeabi_dmul>
 800b3fc:	a38e      	add	r3, pc, #568	; (adr r3, 800b638 <__kernel_tan+0x338>)
 800b3fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b402:	f7f4 ff3b 	bl	800027c <__adddf3>
 800b406:	4622      	mov	r2, r4
 800b408:	462b      	mov	r3, r5
 800b40a:	f7f5 f8ed 	bl	80005e8 <__aeabi_dmul>
 800b40e:	a38c      	add	r3, pc, #560	; (adr r3, 800b640 <__kernel_tan+0x340>)
 800b410:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b414:	f7f4 ff32 	bl	800027c <__adddf3>
 800b418:	4622      	mov	r2, r4
 800b41a:	462b      	mov	r3, r5
 800b41c:	f7f5 f8e4 	bl	80005e8 <__aeabi_dmul>
 800b420:	a389      	add	r3, pc, #548	; (adr r3, 800b648 <__kernel_tan+0x348>)
 800b422:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b426:	f7f4 ff29 	bl	800027c <__adddf3>
 800b42a:	4622      	mov	r2, r4
 800b42c:	462b      	mov	r3, r5
 800b42e:	f7f5 f8db 	bl	80005e8 <__aeabi_dmul>
 800b432:	a387      	add	r3, pc, #540	; (adr r3, 800b650 <__kernel_tan+0x350>)
 800b434:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b438:	f7f4 ff20 	bl	800027c <__adddf3>
 800b43c:	4622      	mov	r2, r4
 800b43e:	462b      	mov	r3, r5
 800b440:	f7f5 f8d2 	bl	80005e8 <__aeabi_dmul>
 800b444:	a384      	add	r3, pc, #528	; (adr r3, 800b658 <__kernel_tan+0x358>)
 800b446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b44a:	f7f4 ff17 	bl	800027c <__adddf3>
 800b44e:	4642      	mov	r2, r8
 800b450:	464b      	mov	r3, r9
 800b452:	f7f5 f8c9 	bl	80005e8 <__aeabi_dmul>
 800b456:	a382      	add	r3, pc, #520	; (adr r3, 800b660 <__kernel_tan+0x360>)
 800b458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b45c:	ec41 0b19 	vmov	d9, r0, r1
 800b460:	4620      	mov	r0, r4
 800b462:	4629      	mov	r1, r5
 800b464:	f7f5 f8c0 	bl	80005e8 <__aeabi_dmul>
 800b468:	a37f      	add	r3, pc, #508	; (adr r3, 800b668 <__kernel_tan+0x368>)
 800b46a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b46e:	f7f4 ff05 	bl	800027c <__adddf3>
 800b472:	4622      	mov	r2, r4
 800b474:	462b      	mov	r3, r5
 800b476:	f7f5 f8b7 	bl	80005e8 <__aeabi_dmul>
 800b47a:	a37d      	add	r3, pc, #500	; (adr r3, 800b670 <__kernel_tan+0x370>)
 800b47c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b480:	f7f4 fefc 	bl	800027c <__adddf3>
 800b484:	4622      	mov	r2, r4
 800b486:	462b      	mov	r3, r5
 800b488:	f7f5 f8ae 	bl	80005e8 <__aeabi_dmul>
 800b48c:	a37a      	add	r3, pc, #488	; (adr r3, 800b678 <__kernel_tan+0x378>)
 800b48e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b492:	f7f4 fef3 	bl	800027c <__adddf3>
 800b496:	4622      	mov	r2, r4
 800b498:	462b      	mov	r3, r5
 800b49a:	f7f5 f8a5 	bl	80005e8 <__aeabi_dmul>
 800b49e:	a378      	add	r3, pc, #480	; (adr r3, 800b680 <__kernel_tan+0x380>)
 800b4a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4a4:	f7f4 feea 	bl	800027c <__adddf3>
 800b4a8:	4622      	mov	r2, r4
 800b4aa:	462b      	mov	r3, r5
 800b4ac:	f7f5 f89c 	bl	80005e8 <__aeabi_dmul>
 800b4b0:	a375      	add	r3, pc, #468	; (adr r3, 800b688 <__kernel_tan+0x388>)
 800b4b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4b6:	f7f4 fee1 	bl	800027c <__adddf3>
 800b4ba:	4602      	mov	r2, r0
 800b4bc:	460b      	mov	r3, r1
 800b4be:	ec51 0b19 	vmov	r0, r1, d9
 800b4c2:	f7f4 fedb 	bl	800027c <__adddf3>
 800b4c6:	ec53 2b18 	vmov	r2, r3, d8
 800b4ca:	f7f5 f88d 	bl	80005e8 <__aeabi_dmul>
 800b4ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b4d2:	f7f4 fed3 	bl	800027c <__adddf3>
 800b4d6:	4642      	mov	r2, r8
 800b4d8:	464b      	mov	r3, r9
 800b4da:	f7f5 f885 	bl	80005e8 <__aeabi_dmul>
 800b4de:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b4e2:	f7f4 fecb 	bl	800027c <__adddf3>
 800b4e6:	a36a      	add	r3, pc, #424	; (adr r3, 800b690 <__kernel_tan+0x390>)
 800b4e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4ec:	4604      	mov	r4, r0
 800b4ee:	460d      	mov	r5, r1
 800b4f0:	ec51 0b18 	vmov	r0, r1, d8
 800b4f4:	f7f5 f878 	bl	80005e8 <__aeabi_dmul>
 800b4f8:	4622      	mov	r2, r4
 800b4fa:	462b      	mov	r3, r5
 800b4fc:	f7f4 febe 	bl	800027c <__adddf3>
 800b500:	460b      	mov	r3, r1
 800b502:	ec41 0b18 	vmov	d8, r0, r1
 800b506:	4602      	mov	r2, r0
 800b508:	4659      	mov	r1, fp
 800b50a:	4650      	mov	r0, sl
 800b50c:	f7f4 feb6 	bl	800027c <__adddf3>
 800b510:	4b64      	ldr	r3, [pc, #400]	; (800b6a4 <__kernel_tan+0x3a4>)
 800b512:	429f      	cmp	r7, r3
 800b514:	4604      	mov	r4, r0
 800b516:	460d      	mov	r5, r1
 800b518:	dd3e      	ble.n	800b598 <__kernel_tan+0x298>
 800b51a:	4630      	mov	r0, r6
 800b51c:	f7f4 fffa 	bl	8000514 <__aeabi_i2d>
 800b520:	4622      	mov	r2, r4
 800b522:	4680      	mov	r8, r0
 800b524:	4689      	mov	r9, r1
 800b526:	462b      	mov	r3, r5
 800b528:	4620      	mov	r0, r4
 800b52a:	4629      	mov	r1, r5
 800b52c:	f7f5 f85c 	bl	80005e8 <__aeabi_dmul>
 800b530:	4642      	mov	r2, r8
 800b532:	4606      	mov	r6, r0
 800b534:	460f      	mov	r7, r1
 800b536:	464b      	mov	r3, r9
 800b538:	4620      	mov	r0, r4
 800b53a:	4629      	mov	r1, r5
 800b53c:	f7f4 fe9e 	bl	800027c <__adddf3>
 800b540:	4602      	mov	r2, r0
 800b542:	460b      	mov	r3, r1
 800b544:	4630      	mov	r0, r6
 800b546:	4639      	mov	r1, r7
 800b548:	f7f5 f978 	bl	800083c <__aeabi_ddiv>
 800b54c:	ec53 2b18 	vmov	r2, r3, d8
 800b550:	f7f4 fe92 	bl	8000278 <__aeabi_dsub>
 800b554:	4602      	mov	r2, r0
 800b556:	460b      	mov	r3, r1
 800b558:	4650      	mov	r0, sl
 800b55a:	4659      	mov	r1, fp
 800b55c:	f7f4 fe8c 	bl	8000278 <__aeabi_dsub>
 800b560:	4602      	mov	r2, r0
 800b562:	460b      	mov	r3, r1
 800b564:	f7f4 fe8a 	bl	800027c <__adddf3>
 800b568:	4602      	mov	r2, r0
 800b56a:	460b      	mov	r3, r1
 800b56c:	4640      	mov	r0, r8
 800b56e:	4649      	mov	r1, r9
 800b570:	f7f4 fe82 	bl	8000278 <__aeabi_dsub>
 800b574:	9b03      	ldr	r3, [sp, #12]
 800b576:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 800b57a:	f00a 0a02 	and.w	sl, sl, #2
 800b57e:	4604      	mov	r4, r0
 800b580:	f1ca 0001 	rsb	r0, sl, #1
 800b584:	460d      	mov	r5, r1
 800b586:	f7f4 ffc5 	bl	8000514 <__aeabi_i2d>
 800b58a:	4602      	mov	r2, r0
 800b58c:	460b      	mov	r3, r1
 800b58e:	4620      	mov	r0, r4
 800b590:	4629      	mov	r1, r5
 800b592:	f7f5 f829 	bl	80005e8 <__aeabi_dmul>
 800b596:	e6da      	b.n	800b34e <__kernel_tan+0x4e>
 800b598:	2e01      	cmp	r6, #1
 800b59a:	d038      	beq.n	800b60e <__kernel_tan+0x30e>
 800b59c:	460f      	mov	r7, r1
 800b59e:	4689      	mov	r9, r1
 800b5a0:	4602      	mov	r2, r0
 800b5a2:	460b      	mov	r3, r1
 800b5a4:	2000      	movs	r0, #0
 800b5a6:	493e      	ldr	r1, [pc, #248]	; (800b6a0 <__kernel_tan+0x3a0>)
 800b5a8:	f7f5 f948 	bl	800083c <__aeabi_ddiv>
 800b5ac:	2600      	movs	r6, #0
 800b5ae:	e9cd 0100 	strd	r0, r1, [sp]
 800b5b2:	4652      	mov	r2, sl
 800b5b4:	465b      	mov	r3, fp
 800b5b6:	4630      	mov	r0, r6
 800b5b8:	4639      	mov	r1, r7
 800b5ba:	f7f4 fe5d 	bl	8000278 <__aeabi_dsub>
 800b5be:	e9dd 4500 	ldrd	r4, r5, [sp]
 800b5c2:	4602      	mov	r2, r0
 800b5c4:	460b      	mov	r3, r1
 800b5c6:	ec51 0b18 	vmov	r0, r1, d8
 800b5ca:	f7f4 fe55 	bl	8000278 <__aeabi_dsub>
 800b5ce:	4632      	mov	r2, r6
 800b5d0:	462b      	mov	r3, r5
 800b5d2:	f7f5 f809 	bl	80005e8 <__aeabi_dmul>
 800b5d6:	46b0      	mov	r8, r6
 800b5d8:	460f      	mov	r7, r1
 800b5da:	4606      	mov	r6, r0
 800b5dc:	4642      	mov	r2, r8
 800b5de:	462b      	mov	r3, r5
 800b5e0:	4640      	mov	r0, r8
 800b5e2:	4649      	mov	r1, r9
 800b5e4:	f7f5 f800 	bl	80005e8 <__aeabi_dmul>
 800b5e8:	4b2c      	ldr	r3, [pc, #176]	; (800b69c <__kernel_tan+0x39c>)
 800b5ea:	2200      	movs	r2, #0
 800b5ec:	f7f4 fe46 	bl	800027c <__adddf3>
 800b5f0:	4602      	mov	r2, r0
 800b5f2:	460b      	mov	r3, r1
 800b5f4:	4630      	mov	r0, r6
 800b5f6:	4639      	mov	r1, r7
 800b5f8:	f7f4 fe40 	bl	800027c <__adddf3>
 800b5fc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b600:	f7f4 fff2 	bl	80005e8 <__aeabi_dmul>
 800b604:	4642      	mov	r2, r8
 800b606:	462b      	mov	r3, r5
 800b608:	f7f4 fe38 	bl	800027c <__adddf3>
 800b60c:	e69f      	b.n	800b34e <__kernel_tan+0x4e>
 800b60e:	4682      	mov	sl, r0
 800b610:	468b      	mov	fp, r1
 800b612:	e69e      	b.n	800b352 <__kernel_tan+0x52>
 800b614:	f3af 8000 	nop.w
 800b618:	54442d18 	.word	0x54442d18
 800b61c:	3fe921fb 	.word	0x3fe921fb
 800b620:	33145c07 	.word	0x33145c07
 800b624:	3c81a626 	.word	0x3c81a626
	...
 800b630:	74bf7ad4 	.word	0x74bf7ad4
 800b634:	3efb2a70 	.word	0x3efb2a70
 800b638:	32f0a7e9 	.word	0x32f0a7e9
 800b63c:	3f12b80f 	.word	0x3f12b80f
 800b640:	1a8d1068 	.word	0x1a8d1068
 800b644:	3f3026f7 	.word	0x3f3026f7
 800b648:	fee08315 	.word	0xfee08315
 800b64c:	3f57dbc8 	.word	0x3f57dbc8
 800b650:	e96e8493 	.word	0xe96e8493
 800b654:	3f8226e3 	.word	0x3f8226e3
 800b658:	1bb341fe 	.word	0x1bb341fe
 800b65c:	3faba1ba 	.word	0x3faba1ba
 800b660:	db605373 	.word	0xdb605373
 800b664:	bef375cb 	.word	0xbef375cb
 800b668:	a03792a6 	.word	0xa03792a6
 800b66c:	3f147e88 	.word	0x3f147e88
 800b670:	f2f26501 	.word	0xf2f26501
 800b674:	3f4344d8 	.word	0x3f4344d8
 800b678:	c9560328 	.word	0xc9560328
 800b67c:	3f6d6d22 	.word	0x3f6d6d22
 800b680:	8406d637 	.word	0x8406d637
 800b684:	3f9664f4 	.word	0x3f9664f4
 800b688:	1110fe7a 	.word	0x1110fe7a
 800b68c:	3fc11111 	.word	0x3fc11111
 800b690:	55555563 	.word	0x55555563
 800b694:	3fd55555 	.word	0x3fd55555
 800b698:	3e2fffff 	.word	0x3e2fffff
 800b69c:	3ff00000 	.word	0x3ff00000
 800b6a0:	bff00000 	.word	0xbff00000
 800b6a4:	3fe59427 	.word	0x3fe59427

0800b6a8 <fabs>:
 800b6a8:	ec51 0b10 	vmov	r0, r1, d0
 800b6ac:	ee10 2a10 	vmov	r2, s0
 800b6b0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b6b4:	ec43 2b10 	vmov	d0, r2, r3
 800b6b8:	4770      	bx	lr
 800b6ba:	0000      	movs	r0, r0
 800b6bc:	0000      	movs	r0, r0
	...

0800b6c0 <floor>:
 800b6c0:	ec51 0b10 	vmov	r0, r1, d0
 800b6c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6c8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800b6cc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800b6d0:	2e13      	cmp	r6, #19
 800b6d2:	ee10 5a10 	vmov	r5, s0
 800b6d6:	ee10 8a10 	vmov	r8, s0
 800b6da:	460c      	mov	r4, r1
 800b6dc:	dc32      	bgt.n	800b744 <floor+0x84>
 800b6de:	2e00      	cmp	r6, #0
 800b6e0:	da14      	bge.n	800b70c <floor+0x4c>
 800b6e2:	a333      	add	r3, pc, #204	; (adr r3, 800b7b0 <floor+0xf0>)
 800b6e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6e8:	f7f4 fdc8 	bl	800027c <__adddf3>
 800b6ec:	2200      	movs	r2, #0
 800b6ee:	2300      	movs	r3, #0
 800b6f0:	f7f5 fa0a 	bl	8000b08 <__aeabi_dcmpgt>
 800b6f4:	b138      	cbz	r0, 800b706 <floor+0x46>
 800b6f6:	2c00      	cmp	r4, #0
 800b6f8:	da57      	bge.n	800b7aa <floor+0xea>
 800b6fa:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800b6fe:	431d      	orrs	r5, r3
 800b700:	d001      	beq.n	800b706 <floor+0x46>
 800b702:	4c2d      	ldr	r4, [pc, #180]	; (800b7b8 <floor+0xf8>)
 800b704:	2500      	movs	r5, #0
 800b706:	4621      	mov	r1, r4
 800b708:	4628      	mov	r0, r5
 800b70a:	e025      	b.n	800b758 <floor+0x98>
 800b70c:	4f2b      	ldr	r7, [pc, #172]	; (800b7bc <floor+0xfc>)
 800b70e:	4137      	asrs	r7, r6
 800b710:	ea01 0307 	and.w	r3, r1, r7
 800b714:	4303      	orrs	r3, r0
 800b716:	d01f      	beq.n	800b758 <floor+0x98>
 800b718:	a325      	add	r3, pc, #148	; (adr r3, 800b7b0 <floor+0xf0>)
 800b71a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b71e:	f7f4 fdad 	bl	800027c <__adddf3>
 800b722:	2200      	movs	r2, #0
 800b724:	2300      	movs	r3, #0
 800b726:	f7f5 f9ef 	bl	8000b08 <__aeabi_dcmpgt>
 800b72a:	2800      	cmp	r0, #0
 800b72c:	d0eb      	beq.n	800b706 <floor+0x46>
 800b72e:	2c00      	cmp	r4, #0
 800b730:	bfbe      	ittt	lt
 800b732:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800b736:	fa43 f606 	asrlt.w	r6, r3, r6
 800b73a:	19a4      	addlt	r4, r4, r6
 800b73c:	ea24 0407 	bic.w	r4, r4, r7
 800b740:	2500      	movs	r5, #0
 800b742:	e7e0      	b.n	800b706 <floor+0x46>
 800b744:	2e33      	cmp	r6, #51	; 0x33
 800b746:	dd0b      	ble.n	800b760 <floor+0xa0>
 800b748:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800b74c:	d104      	bne.n	800b758 <floor+0x98>
 800b74e:	ee10 2a10 	vmov	r2, s0
 800b752:	460b      	mov	r3, r1
 800b754:	f7f4 fd92 	bl	800027c <__adddf3>
 800b758:	ec41 0b10 	vmov	d0, r0, r1
 800b75c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b760:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800b764:	f04f 33ff 	mov.w	r3, #4294967295
 800b768:	fa23 f707 	lsr.w	r7, r3, r7
 800b76c:	4207      	tst	r7, r0
 800b76e:	d0f3      	beq.n	800b758 <floor+0x98>
 800b770:	a30f      	add	r3, pc, #60	; (adr r3, 800b7b0 <floor+0xf0>)
 800b772:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b776:	f7f4 fd81 	bl	800027c <__adddf3>
 800b77a:	2200      	movs	r2, #0
 800b77c:	2300      	movs	r3, #0
 800b77e:	f7f5 f9c3 	bl	8000b08 <__aeabi_dcmpgt>
 800b782:	2800      	cmp	r0, #0
 800b784:	d0bf      	beq.n	800b706 <floor+0x46>
 800b786:	2c00      	cmp	r4, #0
 800b788:	da02      	bge.n	800b790 <floor+0xd0>
 800b78a:	2e14      	cmp	r6, #20
 800b78c:	d103      	bne.n	800b796 <floor+0xd6>
 800b78e:	3401      	adds	r4, #1
 800b790:	ea25 0507 	bic.w	r5, r5, r7
 800b794:	e7b7      	b.n	800b706 <floor+0x46>
 800b796:	2301      	movs	r3, #1
 800b798:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800b79c:	fa03 f606 	lsl.w	r6, r3, r6
 800b7a0:	4435      	add	r5, r6
 800b7a2:	4545      	cmp	r5, r8
 800b7a4:	bf38      	it	cc
 800b7a6:	18e4      	addcc	r4, r4, r3
 800b7a8:	e7f2      	b.n	800b790 <floor+0xd0>
 800b7aa:	2500      	movs	r5, #0
 800b7ac:	462c      	mov	r4, r5
 800b7ae:	e7aa      	b.n	800b706 <floor+0x46>
 800b7b0:	8800759c 	.word	0x8800759c
 800b7b4:	7e37e43c 	.word	0x7e37e43c
 800b7b8:	bff00000 	.word	0xbff00000
 800b7bc:	000fffff 	.word	0x000fffff

0800b7c0 <scalbn>:
 800b7c0:	b570      	push	{r4, r5, r6, lr}
 800b7c2:	ec55 4b10 	vmov	r4, r5, d0
 800b7c6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800b7ca:	4606      	mov	r6, r0
 800b7cc:	462b      	mov	r3, r5
 800b7ce:	b99a      	cbnz	r2, 800b7f8 <scalbn+0x38>
 800b7d0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b7d4:	4323      	orrs	r3, r4
 800b7d6:	d036      	beq.n	800b846 <scalbn+0x86>
 800b7d8:	4b39      	ldr	r3, [pc, #228]	; (800b8c0 <scalbn+0x100>)
 800b7da:	4629      	mov	r1, r5
 800b7dc:	ee10 0a10 	vmov	r0, s0
 800b7e0:	2200      	movs	r2, #0
 800b7e2:	f7f4 ff01 	bl	80005e8 <__aeabi_dmul>
 800b7e6:	4b37      	ldr	r3, [pc, #220]	; (800b8c4 <scalbn+0x104>)
 800b7e8:	429e      	cmp	r6, r3
 800b7ea:	4604      	mov	r4, r0
 800b7ec:	460d      	mov	r5, r1
 800b7ee:	da10      	bge.n	800b812 <scalbn+0x52>
 800b7f0:	a32b      	add	r3, pc, #172	; (adr r3, 800b8a0 <scalbn+0xe0>)
 800b7f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7f6:	e03a      	b.n	800b86e <scalbn+0xae>
 800b7f8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800b7fc:	428a      	cmp	r2, r1
 800b7fe:	d10c      	bne.n	800b81a <scalbn+0x5a>
 800b800:	ee10 2a10 	vmov	r2, s0
 800b804:	4620      	mov	r0, r4
 800b806:	4629      	mov	r1, r5
 800b808:	f7f4 fd38 	bl	800027c <__adddf3>
 800b80c:	4604      	mov	r4, r0
 800b80e:	460d      	mov	r5, r1
 800b810:	e019      	b.n	800b846 <scalbn+0x86>
 800b812:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b816:	460b      	mov	r3, r1
 800b818:	3a36      	subs	r2, #54	; 0x36
 800b81a:	4432      	add	r2, r6
 800b81c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800b820:	428a      	cmp	r2, r1
 800b822:	dd08      	ble.n	800b836 <scalbn+0x76>
 800b824:	2d00      	cmp	r5, #0
 800b826:	a120      	add	r1, pc, #128	; (adr r1, 800b8a8 <scalbn+0xe8>)
 800b828:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b82c:	da1c      	bge.n	800b868 <scalbn+0xa8>
 800b82e:	a120      	add	r1, pc, #128	; (adr r1, 800b8b0 <scalbn+0xf0>)
 800b830:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b834:	e018      	b.n	800b868 <scalbn+0xa8>
 800b836:	2a00      	cmp	r2, #0
 800b838:	dd08      	ble.n	800b84c <scalbn+0x8c>
 800b83a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b83e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b842:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b846:	ec45 4b10 	vmov	d0, r4, r5
 800b84a:	bd70      	pop	{r4, r5, r6, pc}
 800b84c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800b850:	da19      	bge.n	800b886 <scalbn+0xc6>
 800b852:	f24c 3350 	movw	r3, #50000	; 0xc350
 800b856:	429e      	cmp	r6, r3
 800b858:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800b85c:	dd0a      	ble.n	800b874 <scalbn+0xb4>
 800b85e:	a112      	add	r1, pc, #72	; (adr r1, 800b8a8 <scalbn+0xe8>)
 800b860:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b864:	2b00      	cmp	r3, #0
 800b866:	d1e2      	bne.n	800b82e <scalbn+0x6e>
 800b868:	a30f      	add	r3, pc, #60	; (adr r3, 800b8a8 <scalbn+0xe8>)
 800b86a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b86e:	f7f4 febb 	bl	80005e8 <__aeabi_dmul>
 800b872:	e7cb      	b.n	800b80c <scalbn+0x4c>
 800b874:	a10a      	add	r1, pc, #40	; (adr r1, 800b8a0 <scalbn+0xe0>)
 800b876:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d0b8      	beq.n	800b7f0 <scalbn+0x30>
 800b87e:	a10e      	add	r1, pc, #56	; (adr r1, 800b8b8 <scalbn+0xf8>)
 800b880:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b884:	e7b4      	b.n	800b7f0 <scalbn+0x30>
 800b886:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b88a:	3236      	adds	r2, #54	; 0x36
 800b88c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b890:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800b894:	4620      	mov	r0, r4
 800b896:	4b0c      	ldr	r3, [pc, #48]	; (800b8c8 <scalbn+0x108>)
 800b898:	2200      	movs	r2, #0
 800b89a:	e7e8      	b.n	800b86e <scalbn+0xae>
 800b89c:	f3af 8000 	nop.w
 800b8a0:	c2f8f359 	.word	0xc2f8f359
 800b8a4:	01a56e1f 	.word	0x01a56e1f
 800b8a8:	8800759c 	.word	0x8800759c
 800b8ac:	7e37e43c 	.word	0x7e37e43c
 800b8b0:	8800759c 	.word	0x8800759c
 800b8b4:	fe37e43c 	.word	0xfe37e43c
 800b8b8:	c2f8f359 	.word	0xc2f8f359
 800b8bc:	81a56e1f 	.word	0x81a56e1f
 800b8c0:	43500000 	.word	0x43500000
 800b8c4:	ffff3cb0 	.word	0xffff3cb0
 800b8c8:	3c900000 	.word	0x3c900000

0800b8cc <_init>:
 800b8cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8ce:	bf00      	nop
 800b8d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8d2:	bc08      	pop	{r3}
 800b8d4:	469e      	mov	lr, r3
 800b8d6:	4770      	bx	lr

0800b8d8 <_fini>:
 800b8d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8da:	bf00      	nop
 800b8dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8de:	bc08      	pop	{r3}
 800b8e0:	469e      	mov	lr, r3
 800b8e2:	4770      	bx	lr
